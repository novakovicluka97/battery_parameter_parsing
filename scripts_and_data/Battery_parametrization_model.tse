version = 4.2

//
// Saved by sw version: 2022.4 DEV
//

model "battery_parametrization_model" {
    configuration {
        hil_device = "VHIL+"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = 20e-6
        simulation_discret_scaling = 1
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = False
        enb_gds_oversampling = False
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_digital_outputs_on_sim_stop = True
        vhil_adio_loopback = False
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.01
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = False
        dss_num_tol = 1e-15
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
        sp_compiler_type = "C compiler"
        sig_stim = "off"
        export_resource_list = ""
        export_dependency_list = ""
        export_out_file = ""
        export_lock_top_level = True
        export_encrypt_library = True
        export_encrypt_resources = True
    }

    component Subsystem Root {
        component "core/Voltage Measurement" voltage_1 {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 7648, 8368
            rotation = right
            scale = -1, 1
            size = 64, 32
        ]

        component gen_c_function "C function1" {
            global_variables = "real next_sw;real counter_cooldown;real first_time_step_flag;"
            init_fnc = "/*Begin code section*/
script_no = 1;  // start with the first script
sw_select = 1;  // start with first sw permutation (1st script)
timer = 0;
counter_cooldown = counter_cooldown_max;  // wait an hour for the
// battery to go back to its original temperature [instant with typhoon] 
// and to discharge the RC capacitors
first_time_step_flag = 1;  // This flag exists because vcell measurement
// will always start with 0. We need to prevent even looking at that false vcell.
temperature = input_temp;
/*End code section*/"
            input_terminals = "real input_temp;real Vcell;"
            input_terminals_dimensions = "inherit;inherit"
            input_terminals_feedthrough = "True;True"
            input_terminals_show_labels = "True;True"
            output_fnc = "/*Begin code section*/
// The model starts immediately with time and script_no 1
// sw_select = 1
// script_no = 1

if (sw_select == 0) {
    counter_cooldown--;
    if (counter_cooldown <= 0) {
        sw_select = next_sw;
        counter_cooldown = counter_cooldown_max;
    }
}
else {  // (sw_select != 0)
    timer += Ts;
    if (Vcell < Vmin && sw_select == 1 && first_time_step_flag != 1) {
        // Start second script countdown
        // Usually we would wait for the batteries and the chamber to cool off back to 25 degrees 
        script_no = 2;  // second script
        sw_select = 0;  // zero current
        next_sw = 2;
        temperature = 25;  // default temperature
        timer = 0;
    }
    else if (timer > OCV_25_SCRIPT_2_TIME_STOP && sw_select == 2){
        timer = 0;
        if (Vcell < Vmin) {
            // Start third script
            script_no = 3;
            sw_select = 3;
            temperature = input_temp;
        }
    }
    else if (Vcell > Vmax && sw_select == 3) {
        // Start forth script countdown
        // Usually we would wait for the batteries and the chamber to cool off back to 25 degrees 
        script_no = 4;
        sw_select = 0;  // zero current
        next_sw = 4;
        timer = 0;
    }
    else if (timer > OCV_25_SCRIPT_4_TIME_STOP && sw_select == 4){
        timer = 0;
        if (Vcell > Vmax) {
            // Start forth script countdown
            // Usually we would wait for the batteries and the chamber to cool off back to 25 degrees 
            sw_select = 0;  // zero current
            script_no = 5;
            next_sw = 0;
        }
    }
}

first_time_step_flag = 0;
/*End code section*/"
            output_terminals = "real sw_select;inherit temperature;inherit timer;inherit script_no;"
            output_terminals_dimensions = "inherit;inherit;inherit;inherit"
            output_terminals_feedthrough = "True;True;True;True"
            output_terminals_show_labels = "True;True;True;True"
            parameters = "real Vmin;real Vmax;real Ts;real OCV_25_SCRIPT_4_TIME_STOP;real OCV_25_SCRIPT_2_TIME_STOP;real counter_cooldown_max;"
        }
        [
            position = 7888, 7912
            hide_name = True
            size = 264, 160
        ]

        component gen_probe script_no_1 {
        }
        [
            position = 8128, 8064
        ]

        component sys_mp_signal_switch "Multiport signal switch1" {
            number_of_input_terminals = "4"
        }
        [
            position = 7784, 8232
            hide_name = True
        ]

        component lut_1d "1D look-up table23" {
            in_vec_x = "OCV_25_SCRIPT_2_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_2_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 7640, 8232
            hide_name = True
        ]

        component lut_1d "1D look-up table25" {
            in_vec_x = "OCV_25_SCRIPT_4_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_4_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 7640, 8264
            hide_name = True
        ]

        component "core/Signal Controlled Current Source" Isp22 {
        }
        [
            position = 7952, 8368
            rotation = left
            hide_name = True
            scale = -1, 1
            size = 64, 32
        ]

        component Subsystem "Battery Cell_25" {
            layout = static
            component Subsystem "SOC Model" {
                layout = dynamic
                component gen_gain Gain2 {
                    gain = "1/numeric_scale"
                }
                [
                    position = 7944, 8152
                    hide_name = True
                ]

                component gen_integrator Integrator {
                    limit_lower = "-0.1e6"
                    limit_output = "True"
                    limit_upper = "1.1e6"
                    show_init_condition = "external"
                    show_reset = "rising"
                }
                [
                    position = 7840, 8152
                ]

                component gen_gain Gain1 {
                    execution_rate = "Ts"
                    gain = "1/3600.0"
                }
                [
                    position = 7688, 8128
                    hide_name = True
                ]

                component gen_c_function Coulombic_Eff {
                    input_terminals = "real i;real eta;"
                    input_terminals_dimensions = "inherit;inherit"
                    input_terminals_feedthrough = "True;True"
                    input_terminals_show_labels = "True;True"
                    output_fnc = "/*Begin code section*/
// If the battery is being discharged, efficiency is 1
// If battery is being charged, efficiency eta is used
if(i>0)
    i_out = i;
else
    i_out = eta*i;
/*End code section*/"
                    output_terminals = "real i_out;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "False"
                }
                [
                    position = 7496, 8120
                    size = 48, 48
                ]

                component gen_gain Gain3 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7752, 8128
                    hide_name = True
                ]

                component gen_product Product1 {
                    signs = "*/"
                }
                [
                    position = 7608, 8128
                    hide_name = True
                ]

                component gen_sum Sum1 {
                    signs = "+-"
                }
                [
                    position = 8072, 8088
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                }
                [
                    position = 7976, 8080
                ]

                component src_scada_input "SOC Override" {
                    def_value = "Init_SOC/100.0"
                    execution_rate = "Ts"
                    max = "1"
                    min = "0"
                    unit = ""
                }
                [
                    position = 7472, 8432
                ]

                component gen_sum Sum2 {
                    signs = "+-"
                }
                [
                    position = 7600, 8424
                    hide_name = True
                ]

                component src_constant Constant2 {
                    execution_rate = "Ts"
                }
                [
                    position = 7520, 8392
                    hide_name = True
                ]

                component "core/Edge Detection" "Edge Detection1" {
                }
                [
                    position = 7712, 8168
                    hide_name = True
                    size = 32, 32
                ]

                component gen_gain Gain4 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7720, 8424
                    hide_name = True
                ]

                component gen_limiter Limit1 {
                    lower_limit = "-0.1"
                }
                [
                    position = 8160, 8088
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8112
                ]

                port SOC_pu {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8240, 8088
                ]

                port Q {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8256
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8192
                ]

                junction Junction1 sp
                [
                    position = 7656, 8424
                ]

                comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Ah-As</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling  </span></p></body></html> ENDCOMMENT 
                [
                    position = 7664, 8056
                ]

                comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Taking into account</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">the Coulombic Efficiency</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">during charge </span></p></body></html> ENDCOMMENT 
                [
                    position = 7424, 8024
                ]

                comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7736, 8056
                ]

                comment Comment4 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling Inversion</span></p></body></html> ENDCOMMENT 
                [
                    position = 7896, 8176
                ]

                comment Comment6 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">pu</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling </span> </p></body></html> ENDCOMMENT 
                [
                    position = 7584, 8056
                ]

                comment Comment7 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Initial SOC and</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">SOC Override</span></p></body></html> ENDCOMMENT 
                [
                    position = 7512, 8328
                ]

                comment Comment8 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7696, 8448
                ]

                connect I Coulombic_Eff.i as Connection1019
                connect Integrator.in Gain3.out as Connection1024
                connect Gain3.in Gain1.out as Connection1025
                connect Gain2.in Integrator.out as Connection1026
                connect Product1.in Coulombic_Eff.i_out as Connection1027
                connect Product1.out Gain1.in as Connection1028
                connect Constant1.out Sum1.in as Connection1030
                connect Sum1.in1 Gain2.out as Connection1031
                [
                    position = 0, 0
                    breakpoints = 8024, 8096; 8024, 8152
                ]
                connect Q Product1.in1 as Connection1033
                connect Constant2.out Sum2.in as Connection1034
                connect Sum2.in1 "SOC Override.out" as Connection1035
                connect Integrator.reset "Edge Detection1.Out1" as Connection1042
                connect "Edge Detection1.In1" Junction1 as Connection1043
                connect Junction1 Sum2.out as Connection1044
                [
                    position = 0, 0
                ]
                connect Integrator.init_condition_port Gain4.out as Connection1045
                connect Gain4.in Junction1 as Connection1046
                connect eta Coulombic_Eff.eta as Connection1047
                [
                    position = 0, 0
                    breakpoints = 7440, 8192; 7440, 8128
                ]
                connect Sum1.out Limit1.in as Connection1048
                connect Limit1.out SOC_pu as Connection1049

                Init_SOC = "Init_SOC"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">SOC Model models the state of charge of the battery by applying ideal Coulomb Counting.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Following options are supported:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Coulombic Efficiency</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Available capacity as signal input Q</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Inital SOC supported</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- SOC can be overridden during the simulation (reset to any value)</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Full numerical range of the integrator is used </p></body></html>"

                    Init_SOC {
                        label = "Initial SOC"
                        widget = edit
                        type = generic
                        default_value = "80"
                        unit = "%"
                    }

                    Ts {
                        label = "execution_rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE init
                        numeric_scale = 1e6
                    ENDCODE
                }
            }
            [
                position = 8072, 8072
                size = 128, 64
            ]

            component "core/Signal Controlled Voltage Source" Vt {
            }
            [
                position = 8352, 8384
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component "core/Current Measurement" It {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8448, 8336
                size = 64, 32
            ]

            component gen_sum Sum3 {
                signs = "++--"
            }
            [
                position = 8016, 8384
                hide_name = True
            ]

            component src_scada_input SOH_set {
                def_value = "1"
                execution_rate = "Ts"
                max = "1"
                min = "0"
                unit = ""
            }
            [
                position = 7224, 8032
            ]

            component Subsystem Capacity {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Qnom {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port Q {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Qnom.out Q as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Capacity can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Qnom {
                        label = "Nominal Capacity"
                        widget = edit
                        type = generic
                        default_value = "Q_discharge"
                        unit = "Ah"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Qnom = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Qnom_value = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Qnom_value)) < 0:
                            raise SchApiException("Cell total capacity cannot be smaller than 0. Please check the data again")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Qnom_value) == 0:
                            Qnom = mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Qnom, "value"), Qnom_value)
                            mdl.set_property_value(mdl.prop(Qnom, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Q)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Q)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7816
                size = 128, 56
            ]

            component Subsystem "Internal Resistance" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Rint {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port R {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Rint.out R as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Resistance can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Rint {
                        label = "Series Resistance"
                        widget = edit
                        type = generic
                        default_value = "R0"
                        unit = "Ω"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Rint = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Rint_prop_value = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Rint_prop_value)) < 0:
                            raise SchApiException("Provided Internal resistance cannot be smaller than 0")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Rint = mdl.get_item("R", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Rint_prop_value) == 0:
                            Rint = mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Rint, "value"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(Rint, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Rint)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Rint)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Internal resistance is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7896
                size = 128, 56
            ]

            component Subsystem "Coulombic efficiency" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Efficiency_constant {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port eta {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Efficiency_constant.out eta as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Coulombic efficiency can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    eta {
                        label = "Coulombic efficiency"
                        widget = edit
                        type = generic
                        default_value = "eta"
                        unit = "ohm"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        eta_prop_value = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(eta_prop_value)) < 0:
                            raise SchApiException("Cell coulombic efficiency cannot be smaller than 0.")
                        if np.max(np.max(eta_prop_value)) > 1:
                            raise SchApiException("Cell coulombic efficiency cannot be larger than 1.")
                    
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(eta_prop_value) == 0:
                            Efficiency_constant = mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "value"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_eta)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_eta)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7984
                size = 128, 56
            ]

            component Subsystem "Open Circuit Voltage" {
                layout = dynamic
                component lut_1d LUT_1D {
                    ext_mode = "Linear"
                }
                [
                    position = 8432, 8200
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8416, 8096
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port OCV {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOC {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOC</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect LUT_1D.addr SOC as Connection1
                connect LUT_1D.value OCV as Connection2
                connect termination_T.in T as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage is always a function of State of Charge.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage can be a function of temperature but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a list, then it\'s dependace is of SOC, regardless of what is written inside temperature vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a nested list, then it\'s dependance is first of SOC and then of temperature.</p></body></html>"

                    OCV {
                        label = "Open circuit voltage vector (table)"
                        widget = edit
                        type = generic
                        default_value = "OCV"
                        unit = "V"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        OCV_value = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    
                        if not np.all(np.diff(SOC_vector) >= 0):
                            raise SchApiException("Provided SOC data is not monotonically nondecreasing, please check the documentation")
                    
                        if np.min(np.min(OCV_value)) < 0:
                            raise SchApiException("Open circuit voltage cannot be negative for any point.")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_OCV = mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(OCV_value) == 1:
                            LUT_1D = mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), execution_rate)
                            if not np.all(np.diff(OCV_value) >= 0):
                                raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                        elif np.ndim(OCV_value) == 2:
                            for OCV_1D in OCV_value:  # checks for non decaying OCV for each Temp
                                if not np.all(np.diff(OCV_value) >= 0):
                                    raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_SOC)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_OCV)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), execution_rate)
                    
                        else:
                            raise SchApiException("Provided discharge data is not valid")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7672, 7816
                size = 128, 56
            ]

            component Subsystem "Parallel RC" {
                layout = dynamic
                component gen_terminator termination_I {
                }
                [
                    position = 7832, 8048
                ]

                component gen_product Product_1a {
                }
                [
                    position = 7952, 8256
                ]

                component gen_product Product_1b {
                    signs = "*/"
                }
                [
                    position = 8064, 8112
                ]

                component gen_product Product_1c {
                    signs = "/*"
                }
                [
                    position = 8176, 8216
                    rotation = down
                ]

                component gen_sum Sum_1 {
                    signs = "+-"
                }
                [
                    position = 8176, 8120
                ]

                component gen_integrator Integrator_1 {
                }
                [
                    position = 8304, 8120
                ]

                component src_constant Constant_C1 {
                    execution_rate = "Ts"
                    value = "C1"
                }
                [
                    position = 7832, 8208
                ]

                component src_constant Constant_R1 {
                    execution_rate = "Ts"
                    value = "R1"
                }
                [
                    position = 7832, 8264
                ]

                component gen_sum Sum {
                    signs = "+"
                }
                [
                    position = 8448, 8128
                ]

                port V {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8544, 8136
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7736, 8120
                ]

                junction Junction1 sp
                [
                    position = 8344, 8520
                ]

                connect I termination_I.in as Connection127
                [
                    position = 0, 0
                ]
                connect Product_1a.in Constant_C1.out as Connection128
                connect Product_1a.in1 Constant_R1.out as Connection129
                connect Product_1b.in I as Connection131
                connect Product_1b.in1 Constant_C1.out as Connection132
                connect Product_1a.out Product_1c.in as Connection133
                connect Sum_1.in1 Product_1c.out as Connection134
                connect Product_1b.out Sum_1.in as Connection135
                connect Integrator_1.in Sum_1.out as Connection136
                connect Integrator_1.out Product_1c.in1 as Connection137
                connect Integrator_1.out Sum.in as Connection138
                connect Sum.out V as Connection139

                mask {
                    description = "The parallel RC subsystem emulates cell voltage drop due to the physical proccess diffusion of lithium ions.

                                   This is a standard method of implementing a cell in electrical circuits. The fidelity of the cell response can be modeled by increasing the order of the system. If the selected Model Order is less than 3, then the values for unused resistors and capacitors are not propagated. All the RC circuits are implemented using signal processing. If None is selected than the output voltage drop is a constant 0."

                    RC_number {
                        label = "Model order"
                        widget = combo
                        combo_values = "None", "1", "2", "3"
                        type = string
                        default_value = "1"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            port_V = mdl.get_item("V", parent=sub_handle, item_type=ITEM_PORT)
                            port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        
                            def delete_constant():
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                        
                            def delete_1():
                                mdl.delete_item(mdl.get_item("Constant_C1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_2():
                                mdl.delete_item(mdl.get_item("Constant_C2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_3():
                                mdl.delete_item(mdl.get_item("Constant_C3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def create_constant():
                                Constant_0 = mdl.create_component("core/Constant",
                                                            name="Constant_0",
                                                            parent=sub_handle,)
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V)
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                            def create_1():
                                Product_1a = mdl.create_component("core/Product",
                                                                name="Product_1a",
                                                                parent=sub_handle,
                                                                position=(7952, 8256),)
                                Product_1b = mdl.create_component("core/Product",
                                                                name="Product_1b",
                                                                parent=sub_handle,
                                                                position=(8064, 8112))
                                Product_1c = mdl.create_component("core/Product",
                                                                name="Product_1c",
                                                                parent=sub_handle,
                                                                position=(8176, 8216),
                                                                rotation="down")
                                Sum_1 = mdl.create_component("core/Sum",
                                                                name="Sum_1",
                                                                parent=sub_handle,
                                                                position=(8176, 8120),)
                                Integrator_1 = mdl.create_component("core/Integrator",
                                                                name="Integrator_1",
                                                                parent=sub_handle,
                                                                position=(8304, 8120),)
                                Constant_C1 = mdl.create_component("core/Constant",
                                                                name="Constant_C1",
                                                                parent=sub_handle,
                                                                position=(7832, 8208))
                                Constant_R1 = mdl.create_component("core/Constant",
                                                                name="Constant_R1",
                                                                parent=sub_handle,
                                                                position=(7832, 8264))
                        
                                mdl.set_property_value(mdl.prop(Sum_1, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_1b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_1c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R1, "value"), "R1")
                                mdl.set_property_value(mdl.prop(Constant_C1, "value"), "C1")
                        
                                mdl.create_connection(start=mdl.term(Product_1a, "in"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "in1"), end=mdl.term(Constant_R1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_1b, "in1"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "out"), end=mdl.term(Product_1c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_1, "in1"), end=mdl.term(Product_1c, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "out"), end=mdl.term(Sum_1, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "in"), end=mdl.term(Sum_1, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Product_1c, "in1"))
                        
                            def create_2():
                                Product_2a = mdl.create_component("core/Product",
                                                            name="Product_2a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+400),)
                                Product_2b = mdl.create_component("core/Product",
                                                            name="Product_2b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+400))
                                Product_2c = mdl.create_component("core/Product",
                                                            name="Product_2c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+400),
                                                            rotation="down")
                                Sum_2 = mdl.create_component("core/Sum",
                                                            name="Sum_2",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+400),)
                                Integrator_2 = mdl.create_component("core/Integrator",
                                                            name="Integrator_2",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+400),)
                                Constant_C2 = mdl.create_component("core/Constant",
                                                            name="Constant_C2",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+400))
                                Constant_R2 = mdl.create_component("core/Constant",
                                                            name="Constant_R2",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+400))
                        
                                mdl.set_property_value(mdl.prop(Sum_2, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_2b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_2c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R2, "value"), "R2")
                                mdl.set_property_value(mdl.prop(Constant_C2, "value"), "C2")
                        
                                mdl.create_connection(start=mdl.term(Product_2a, "in"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "in1"), end=mdl.term(Constant_R2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_2b, "in1"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "out"), end=mdl.term(Product_2c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_2, "in1"), end=mdl.term(Product_2c, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "out"), end=mdl.term(Sum_2, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "in"), end=mdl.term(Sum_2, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Product_2c, "in1"))
                        
                            def create_3():
                                Product_3a = mdl.create_component("core/Product",
                                                            name="Product_3a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+200),)
                                Product_3b = mdl.create_component("core/Product",
                                                            name="Product_3b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+200))
                                Product_3c = mdl.create_component("core/Product",
                                                            name="Product_3c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+200),
                                                            rotation="down")
                                Sum_3 = mdl.create_component("core/Sum",
                                                            name="Sum_3",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+200),)
                                Integrator_3 = mdl.create_component("core/Integrator",
                                                            name="Integrator_3",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+200),)
                                Constant_C3 = mdl.create_component("core/Constant",
                                                            name="Constant_C3",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+200))
                                Constant_R3 = mdl.create_component("core/Constant",
                                                            name="Constant_R3",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+200))
                        
                                mdl.set_property_value(mdl.prop(Sum_3, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_3b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_3c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R3, "value"), "R3")
                                mdl.set_property_value(mdl.prop(Constant_C3, "value"), "C3")
                        
                                mdl.create_connection(start=mdl.term(Product_3a, "in"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "in1"), end=mdl.term(Constant_R3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_3b, "in1"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "out"), end=mdl.term(Product_3c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_3, "in1"), end=mdl.term(Product_3c, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "out"), end=mdl.term(Sum_3, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "in"), end=mdl.term(Sum_3, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Product_3c, "in1"))
                        
                            #####################################################
                        
                            if new_value == "None":
                                delete_1()
                        
                                if old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                        
                                create_constant()
                        
                            elif new_value == "1":
                                if old_value == "None":
                                    delete_constant()
                                    create_1()
                                elif old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                                if old_value == "1":
                                    pass
                                else:
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Sum = mdl.create_component("core/Sum",
                                                                name="Sum",
                                                                parent=sub_handle,
                                                                position=(8450, 8130))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "+")
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                        
                            elif new_value == "2":
                                if old_value == "None" or old_value == "1":
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                    create_2()
                                elif old_value == "3":
                                    delete_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                        
                            elif new_value == "3":
                                if old_value == "None" or old_value == "1":
                                    create_2()
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                create_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "+++")
                        
                                try:
                                    Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                                except:
                                    pass
                                Integrator_3 = mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Sum, "in2"))
                        ENDCODE
                    }

                    R1 {
                        label = "Resistance 1"
                        widget = edit
                        type = generic
                        default_value = "R1"
                        unit = "Ω"
                    }

                    C1 {
                        label = "Capacitance 1"
                        widget = edit
                        type = generic
                        default_value = "C1"
                        unit = "F"
                    }

                    R2 {
                        label = "Resistance 2"
                        widget = edit
                        type = generic
                        default_value = "R2"
                        unit = "Ω"
                    }

                    C2 {
                        label = "Capacitance 2"
                        widget = edit
                        type = generic
                        default_value = "C2"
                        unit = "F"
                    }

                    R3 {
                        label = "Resistance 3"
                        widget = edit
                        type = generic
                        default_value = "R3"
                        unit = "Ω"
                    }

                    C3 {
                        label = "Capacitance 3"
                        widget = edit
                        type = generic
                        default_value = "C3"
                        unit = "F"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        RC_number = mdl.get_property_value(mdl.prop(item_handle, "RC_number"))
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.exception import SchApiException
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    
                        if R1 < 0:
                            raise SchApiException("R1 cannot be negative.")
                        if R2 < 0:
                            raise SchApiException("R2 cannot be negative.")
                        if R3 < 0:
                            raise SchApiException("R3 cannot be negative.")
                        if C1 < 0:
                            raise SchApiException("C1 cannot be negative.")
                        if C2 < 0:
                            raise SchApiException("C2 cannot be negative.")
                        if C3 < 0:
                            raise SchApiException("C3 cannot be negative.")
                    ENDCODE
                }
            }
            [
                position = 7672, 8096
                size = 128, 80
            ]

            component Subsystem "Series voltage drop" {
                layout = dynamic
                component gen_product Product {
                }
                [
                    position = 8224, 8176
                    hide_name = True
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8168
                ]

                port R0 {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8208
                ]

                port V_R0 {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8296, 8176
                ]

                connect Product.out V_R0 as Connection1170
                connect Product.in I as Connection1168
                connect Product.in1 R0 as Connection1169
            }
            [
                position = 7672, 8200
                size = 128, 64
            ]

            component Subsystem "Passive Balancing" {
                layout = dynamic
                component src_constant Constant_0 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8136, 8280
                ]

                port I_bal {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8208
                ]

                port I_t {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7992, 7936
                ]

                port I_cell {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8072
                ]

                connect I_t I_cell as direct_connection
                connect Constant_0.out I_bal as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Passive balancing subsystem is dynamically changed by changing the type of balancing:<br></br>1. \"None\" mode simply propagates the total input current as the cell current and 0 value for balance current.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. \"Passive balancing\" introduces a current flowing through the resistor parallel to the cell. Value of resistance is specified as a parameter and an input for terminal voltage and balancing switch is created. Balancing switch opens and closes the ideal switch connecting cell terminals to the resistor.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. \"Direct current input\" option simply subtracts the signal out of the I_in terminal from the I_t and outputs in the I_cell signal output. I_bal is therefore the signal that enters I_in terminal.</p></body></html>"

                    balancing_combo {
                        label = "Balancing mode"
                        widget = combo
                        combo_values = "None", "Passive balancing", "Direct current input"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            I_t = mdl.get_item("I_t", parent=sub_handle, item_type=ITEM_PORT)
                            I_cell = mdl.get_item("I_cell", parent=sub_handle, item_type=ITEM_PORT)
                            I_bal = mdl.get_item("I_bal", parent=sub_handle, item_type=ITEM_PORT)
                        
                            if new_value==old_value:
                                pass
                            elif new_value=="None":
                                if old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                                mdl.create_connection(start=I_t, end=I_cell, name="direct_connection")
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=I_bal, name="Connection1")
                        
                            elif new_value=="Passive balancing":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    try:
                                        mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                        mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    except:
                                        pass
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                BL_SW = mdl.create_port(name="BL_SW",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                V_term = mdl.create_port(name="V_term",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8220),)
                                R_balance_gain = mdl.create_component("core/Gain",
                                                        name="R_balance_gain",
                                                        parent=sub_handle,
                                                        position=(8135, 8200))
                                signal_switch = mdl.create_component("core/Signal switch",
                                                        name="signal_switch",
                                                        parent=sub_handle,
                                                        position=(8262, 8240))
                                unit_delay = mdl.create_component("core/Unit Delay",
                                                        name="unit_delay",
                                                        parent=sub_handle,
                                                        position=(8325, 8216))
                        
                                mdl.set_property_value(mdl.prop(signal_switch, "threshold"), 0.5)
                                mdl.set_property_value(mdl.prop(R_balance_gain, "gain"), "1/R_balance")
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                                mdl.create_connection(start=BL_SW, end=mdl.term(signal_switch, "in2"))
                                mdl.create_connection(start=V_term, end=mdl.term(R_balance_gain, "in"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in"), end=mdl.term(R_balance_gain, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in1"), end=mdl.term(Constant_0, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "out"), end=mdl.term(unit_delay, "in"))
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=mdl.term(unit_delay, "out"))
                                mdl.create_connection(start=I_bal, end=mdl.term(unit_delay, "out"))
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        
                            elif new_value=="Direct current input":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                    mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                elif old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                                I_in = mdl.create_port(name="I_in",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=I_in)
                                mdl.create_connection(start=I_bal, end=I_in)
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        ENDCODE
                    }

                    R_balance {
                        label = "Balancing Resistance"
                        widget = edit
                        type = generic
                        default_value = "R_balance"
                        unit = "Ω"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE
                }
            }
            [
                position = 7520, 8344
                size = 128, 112
            ]

            component gen_gain Cell_NO {
                gain = "1/cell_NO"
            }
            [
                position = 7408, 8312
                hide_name = True
            ]

            component gen_probe "Cell voltage" {
            }
            [
                position = 8688, 8064
            ]

            component gen_terminator Termination1 {
            }
            [
                position = 8400, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination2 {
            }
            [
                position = 8576, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination3 {
            }
            [
                position = 8400, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination4 {
            }
            [
                position = 8400, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination5 {
            }
            [
                position = 8400, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination6 {
            }
            [
                position = 8400, 8064
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination7 {
            }
            [
                position = 8576, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination8 {
            }
            [
                position = 8576, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination9 {
            }
            [
                position = 8576, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination10 {
            }
            [
                position = 8576, 8064
                rotation = down
                hide_name = True
            ]

            component Subsystem Hysteresis {
                layout = dynamic
                component gen_terminator termination_T {
                }
                [
                    position = 7968, 8280
                ]

                component gen_terminator termination_I {
                }
                [
                    position = 8080, 8440
                ]

                component gen_terminator termination_eta {
                }
                [
                    position = 7976, 8056
                ]

                component gen_c_function C_function {
                    global_variables = "real h;real h_mem;real h1;real h2;real current_sign;real efficiency;"
                    init_fnc = "/*Begin code section*/
current_sign = 1;
h_mem = 0;
efficiency = 1;
/*End code section*/"
                    input_terminals = "real current;inherit M0;inherit M;inherit gamma_param;inherit eta;inherit Q;inherit Ts;"
                    input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
if (current<0){
    current_sign = -1;
    efficiency = eta;
}
else if (current>0){
    current_sign = 1;
    efficiency = 1;
}

h = exp(-fabs(current*efficiency*gamma_param/Q*Ts))*h_mem - (1-exp(-fabs(current*efficiency*gamma_param/Q*Ts)))*current_sign;
h_mem = h;
V_h = M0*current_sign + M*h;
/*End code section*/"
                    output_terminals = "inherit V_h;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "True"
                }
                [
                    position = 8320, 8160
                    scale = 1, -1
                    size = 144, 320
                ]

                component lut_1d M0_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8072, 8240
                ]

                component lut_1d M_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 7992, 8200
                ]

                component lut_1d gamma_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8080, 8160
                ]

                component gen_terminator termination_Q {
                }
                [
                    position = 8016, 7952
                ]

                component gen_terminator termination_Ts {
                }
                [
                    position = 8248, 7952
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                    value = "Ts"
                }
                [
                    position = 8160, 8040
                ]

                component gen_terminator termination_SOC {
                }
                [
                    position = 7976, 8336
                ]

                port I {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7984, 8392
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8104
                ]

                port T {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8216
                ]

                port V_hyst {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8504, 8160
                ]

                port Q {
                    position = left:4
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7896, 8008
                ]

                port SOC {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7856, 8336
                ]

                junction Junction1 sp
                [
                    position = 7936, 8216
                ]

                junction Junction2 sp
                [
                    position = 7936, 8216
                ]

                junction Junction3 sp
                [
                    position = 7904, 8216
                ]

                junction Junction4 sp
                [
                    position = 8040, 8392
                ]

                junction Junction7 sp
                [
                    position = 8208, 8240
                ]

                junction Junction12 sp
                [
                    position = 8192, 8040
                ]

                junction Junction8 sp
                [
                    position = 8032, 8200
                ]

                junction Junction10 sp
                [
                    position = 7904, 8104
                ]

                junction Junction11 sp
                [
                    position = 7936, 8008
                ]

                connect C_function.V_h V_hyst as Connection1164
                connect M_LUT_1D.addr Junction1 as Connection1165
                connect M0_LUT_1D.addr Junction2 as Connection1168
                connect Junction2 Junction1 as Connection1169
                connect gamma_LUT_1D.addr Junction2 as Connection1170
                connect Junction1 Junction3 as Connection1171
                connect Junction3 T as Connection1172
                connect termination_T.in Junction3 as Connection1173
                connect C_function.current Junction4 as Connection1174
                [
                    position = 0, 0
                    breakpoints = 8184, 8280; 8184, 8392
                ]
                connect Junction4 I as Connection1175
                connect termination_I.in Junction4 as Connection1176
                connect gamma_LUT_1D.value C_function.gamma_param as Connection1211
                connect C_function.M0 Junction7 as Connection1192
                connect Constant1.out Junction12 as Connection1212
                connect Junction7 M0_LUT_1D.value as Connection1193
                [
                    position = 0, 0
                ]
                connect Junction12 C_function.Ts as Connection1213
                connect termination_Ts.in Junction12 as Connection1214
                connect M_LUT_1D.value Junction8 as Connection1196
                connect Junction8 C_function.M as Connection1197
                connect termination_eta.in Junction10 as Connection1203
                connect Junction10 eta as Connection1204
                [
                    position = 0, 0
                ]
                connect C_function.eta Junction10 as Connection1205
                connect Q Junction11 as Connection1207
                connect Junction11 termination_Q.in as Connection1208
                [
                    position = 0, 0
                ]
                connect C_function.Q Junction11 as Connection1209
                [
                    position = 0, 0
                    breakpoints = 8024, 8080; 8024, 8008
                ]
                connect SOC termination_SOC.in as Connection1215

                hysteresis_model = "One state"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If hysteresis implementation is \"None\", then the output is a constant 0.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For the \"One state\" implementation, output is a multivariable function referenced from: https://ieeexplore.ieee.org/document/7049363<br></br>This C-function is a function of multiple parameters, including the temperature and SOC dependant M, M0 and gamma.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For each of these parameters, if their value is entered as a constant, they are not functions of temperature and SOC.<br></br>If their value is a list, they are a function of temperature and if it is a nested list, they are a function first of temperature and then of SOC.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"Preisach model\" implementation is also a popular method of representing hysteresis, but is not currently available.<br></br></p></body></html>"

                    hysteresis_model {
                        label = "Hysteresis model"
                        widget = combo
                        combo_values = "None", "One state"
                        type = string
                        default_value = "None"
                        no_evaluate
                    }

                    T_vector {
                        label = "Temperature vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector_h"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector_h"
                    }

                    M0 {
                        label = "M0 parameter"
                        widget = edit
                        type = generic
                        default_value = "M0"
                    }

                    M {
                        label = "M parameter"
                        widget = edit
                        type = generic
                        default_value = "M"
                    }

                    gamma {
                        label = "Gamma parameter"
                        widget = edit
                        type = generic
                        default_value = "gamma"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        M0_value = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M_value = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma_value = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                    
                        if np.min(np.min(M0_value)) < 0:
                            raise SchApiException("M0 parameter cannot be negative for any point.")
                        if np.min(np.min(M_value)) < 0:
                            raise SchApiException("M parameter cannot be negative for any point.")
                        if np.min(np.min(gamma_value)) < 0:
                            raise SchApiException("Gamma parameter cannot be negative for any point.")
                    
                        port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                        port_V_hyst = mdl.get_item("V_hyst", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        C_function = mdl.get_item("C_function", parent=sub_handle, item_type=ITEM_COMPONENT)
                        gamma_LUT_1D = mdl.get_item("gamma_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M_LUT_1D = mdl.get_item("M_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M0_LUT_1D = mdl.get_item("M0_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if hysteresis_model == "None":
                            mdl.delete_item(mdl.get_item("Connection1164", parent=sub_handle, item_type=ITEM_CONNECTION))
                            Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                            # replace output voltage with 0
                            mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V_hyst)
                            mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), execution_rate)
                            mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        else:
                            # M_value
                            if np.ndim(M_value) == 0:
                                mdl.delete_item(M_LUT_1D)
                                Constant_M = mdl.create_component("core/Constant",
                                                        name="Constant_M",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M, "value"), M_value)
                                mdl.set_property_value(mdl.prop(Constant_M, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M, "out"), end=mdl.term(C_function, "M"))
                    
                            elif np.ndim(M_value) == 1:
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "out_vec_f_x"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M_value) == 2:
                                M_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "value"), end=mdl.term(C_function, "M"))
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "out_vec_f_xy"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M_value.")
                    
                            # M0_value
                            if np.ndim(M0_value) == 0:
                                mdl.delete_item(M0_LUT_1D)
                                Constant_M0 = mdl.create_component("core/Constant",
                                                        name="Constant_M0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M0, "value"), M0_value)
                                mdl.set_property_value(mdl.prop(Constant_M0, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M0, "out"), end=mdl.term(C_function, "M0"))
                    
                            elif np.ndim(M0_value) == 1:
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "out_vec_f_x"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M0_value) == 2:
                                M0_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M0_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M0_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "value"), end=mdl.term(C_function, "M0"))
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "out_vec_f_xy"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M0_value.")
                    
                            # gamma_value
                            if np.ndim(gamma_value) == 0:
                                mdl.delete_item(gamma_LUT_1D)
                                Constant_gamma = mdl.create_component("core/Constant",
                                                        name="Constant_gamma",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_gamma, "value"), gamma_value)
                                mdl.set_property_value(mdl.prop(Constant_gamma, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_gamma, "out"), end=mdl.term(C_function, "gamma_param"))
                    
                            elif np.ndim(gamma_value) == 1:
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "out_vec_f_x"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(gamma_value) == 2:
                                gamma_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="gamma_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(gamma_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "value"), end=mdl.term(C_function, "gamma_param"))
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "out_vec_f_xy"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for gamma value.")
                    ENDCODE
                }
            }
            [
                position = 7672, 7944
                size = 128, 160
            ]

            component sys_signal_switch "Signal switch1" {
            }
            [
                position = 8096, 8368
            ]

            component src_scada_input "Vcell Value Set" {
                execution_rate = "Ts"
                min = "0"
                unit = ""
            }
            [
                position = 8016, 8304
            ]

            component src_scada_input "Vcell Override" {
                execution_rate = "Ts"
                format = "int"
                max = "1"
                min = "0"
                signal_type = "int"
                unit = ""
            }
            [
                position = 8016, 8248
            ]

            component gen_probe SOC {
            }
            [
                position = 8488, 7824
            ]

            port P {
                position = top center
                kind = pe
            }
            [
                position = 8528, 8336
                rotation = down
                hide_name = True
            ]

            port N {
                position = bottom center
                kind = pe
            }
            [
                position = 8528, 8424
                rotation = down
                hide_name = True
            ]

            port T {
                position = -16.0, -8.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7128, 7904
                hide_name = True
            ]

            tag From1 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8056
                hide_name = True
                size = 60, 20
            ]

            tag Goto3 {
                value = "T"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7368, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From6 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From7 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From10 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8216
                hide_name = True
                size = 60, 20
            ]

            tag From11 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7856, 8360
                hide_name = True
                size = 60, 20
            ]

            tag Goto6 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8200
                hide_name = True
                size = 60, 20
            ]

            tag From12 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7840, 8392
                hide_name = True
                size = 60, 20
            ]

            tag From13 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8408
                hide_name = True
                size = 60, 20
            ]

            tag Goto19 {
                value = "Q"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7816
                hide_name = True
                size = 60, 20
            ]

            tag From32 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From16 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8184
                hide_name = True
                size = 60, 20
            ]

            tag Goto10 {
                value = "R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7896
                hide_name = True
                size = 60, 20
            ]

            tag Goto11 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8376
                hide_name = True
                size = 60, 20
            ]

            tag Goto12 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7944
                hide_name = True
                size = 60, 20
            ]

            tag Goto13 {
                value = "OCV"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7816
                hide_name = True
                size = 60, 20
            ]

            tag Goto14 {
                value = "I_t"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8496, 8288
                hide_name = True
                size = 60, 20
            ]

            tag Goto16 {
                value = "V_term"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8176, 8368
                hide_name = True
                size = 60, 20
            ]

            tag From20 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8256, 8384
                hide_name = True
                size = 60, 20
            ]

            tag From22 {
                value = "I_t"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7344, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto2 {
                value = "SOH"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7344, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From34 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From35 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7888
                hide_name = True
                size = 60, 20
            ]

            tag Goto20 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7984
                hide_name = True
                size = 60, 20
            ]

            tag From36 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From37 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7976
                hide_name = True
                size = 60, 20
            ]

            tag From38 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8088
                hide_name = True
                size = 60, 20
            ]

            tag From39 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7488, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From40 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From15 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto9 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto21 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto22 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8376
                hide_name = True
                size = 60, 20
            ]

            tag From33 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From23 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From24 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From25 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From26 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From27 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From28 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From29 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From30 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From43 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From5 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7944
                hide_name = True
                size = 60, 20
            ]

            tag From42 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7920
                hide_name = True
                size = 60, 20
            ]

            tag From44 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From45 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7896
                hide_name = True
                size = 60, 20
            ]

            tag From46 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7968
                hide_name = True
                size = 60, 20
            ]

            junction Junction12 sp
            [
                position = 8632, 8032
            ]

            comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Measurements *****</p></body></html> ENDCOMMENT 
            [
                position = 8440, 7704
            ]

            comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Battery Effects *****  </p></body></html> ENDCOMMENT 
            [
                position = 7752, 7720
            ]

            comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** ECM and Passive Balancing *****  </p></body></html> ENDCOMMENT 
            [
                position = 7848, 8192
            ]

            connect From1 "SOC Model.I" as Connection1062
            connect Vt.p_node It.p_node as Connection42
            connect It.n_node P as Connection1129
            connect Vt.n_node N as Connection1130
            connect From32 "SOC Model.Q" as Connection1135
            connect From11 Sum3.in as Connection1091
            connect From18 Sum3.in1 as Connection1095
            connect Goto14 It.out as Connection1102
            connect From20 Vt.in as Connection1109
            connect Goto11 "SOC Model.SOC_pu" as Connection1119
            connect Goto2 SOH_set.out as Connection1063
            connect Capacity.SOH From6 as Connection1144
            connect Capacity.T From7 as Connection1145
            connect From35 "Internal Resistance.T" as Connection1147
            connect From34 "Internal Resistance.SOH" as Connection1148
            connect Goto10 "Internal Resistance.R" as Connection1149
            connect From37 "Coulombic efficiency.T" as Connection1150
            connect From36 "Coulombic efficiency.SOH" as Connection1151
            connect Goto20 "Coulombic efficiency.eta" as Connection1152
            connect From38 "SOC Model.eta" as Connection1153
            connect "Open Circuit Voltage.SOC" From39 as Connection1154
            connect "Open Circuit Voltage.T" From40 as Connection1155
            connect Goto13 "Open Circuit Voltage.OCV" as Connection1162
            connect Goto9 "Parallel RC.V" as Connection1141
            connect From15 "Parallel RC.I" as Connection1077
            connect Goto6 "Series voltage drop.V_R0" as Connection1169
            connect From10 "Series voltage drop.R0" as Connection1168
            connect From16 "Series voltage drop.I" as Connection1167
            connect Sum3.in3 From13 as Connection1175
            connect From12 Sum3.in2 as Connection1179
            connect Goto21 "Passive Balancing.I_bal" as Connection1173
            connect Capacity.Q Goto19 as Connection1181
            connect From22 Cell_NO.in as Connection1182
            connect Cell_NO.out "Passive Balancing.I_t" as Connection1183
            connect Goto22 "Passive Balancing.I_cell" as Connection1184
            connect From25 Junction12 as Connection1212
            connect Junction12 "Cell voltage.in" as Connection1213
            connect Termination10.in Junction12 as Connection1214
            connect From26 Termination5.in as Connection1222
            connect From28 Termination6.in as Connection1220
            connect Termination4.in From24 as Connection1221
            connect Termination8.in From29 as Connection1218
            connect Termination2.in From27 as Connection1223
            connect From23 Termination3.in as Connection1215
            connect Termination7.in From33 as Connection1219
            connect Termination9.in From43 as Connection1216
            connect Termination1.in From30 as Connection1217
            connect Hysteresis.T From5 as Connection1158
            connect Hysteresis.I From42 as Connection1159
            connect From44 Hysteresis.Q as Connection1233
            connect From45 Hysteresis.eta as Connection1234
            connect Goto12 Hysteresis.V_hyst as Connection1235
            connect From46 Hysteresis.SOC as Connection1245
            connect T Goto3 as Connection1131
            connect "Signal switch1.in1" Sum3.out as Connection1246
            connect Goto16 "Signal switch1.out" as Connection1247
            connect "Vcell Value Set.out" "Signal switch1.in" as Connection1248
            connect "Vcell Override.out" "Signal switch1.in2" as Connection1249
            connect SOC.in Termination3.in as Connection1251

            Q_total = "total_Q"
            Ts = "Ts"
            meas_Ibal = "False"
            meas_Icell = "False"
            meas_OCV = "False"
            meas_Q = "False"
            meas_Rint = "False"
            meas_SOH = "False"
            meas_T = "False"
            meas_hyst = "False"

            mask {
                description = "This component represents the \"Enhanced self correcting\" battery cell model. It is a state-of-the-art electrical representation of the physical processes naturally ocurring inside the battery cell. Many parameters can be set as either constants or functions of temperature, state of charge, or state of health. Parallel cells are modelled simply by distributing the input current across the number of cells entered in the parameter input. <br></br>This component is simulated at the signal processing time step, entered in this component as the Execution rate parameter.<br></br><br></br>For more information regarding implementation and parametrization, please refer to the documentation."
                help_file = "battery_cell.html"

                SOC_vector {
                    label = "State of charge vector"
                    widget = edit
                    type = generic
                    default_value = "[0.00000, 0.00500, 0.01000, 0.01500, 0.02000, 0.02500, 0.03000, 0.03500, 0.04000, 0.04500, 0.05000, 0.05500, 0.06000, 0.06500, 0.07000, 0.07500, 0.08000, 0.08500, 0.09000, 0.09500, 0.10000, 0.10500, 0.11000, 0.11500, 0.12000, 0.12500, 0.13000, 0.13500, 0.14000, 0.14500, 0.15000, 0.15500, 0.16000, 0.16500, 0.17000, 0.17500, 0.18000, 0.18500, 0.19000, 0.19500, 0.20000, 0.20500, 0.21000, 0.21500, 0.22000, 0.22500, 0.23000, 0.23500, 0.24000, 0.24500, 0.25000, 0.25500, 0.26000, 0.26500, 0.27000, 0.27500, 0.28000, 0.28500, 0.29000, 0.29500, 0.30000, 0.30500, 0.31000, 0.31500, 0.32000, 0.32500, 0.33000, 0.33500, 0.34000, 0.34500, 0.35000, 0.35500, 0.36000, 0.36500, 0.37000, 0.37500, 0.38000, 0.38500, 0.39000, 0.39500, 0.40000, 0.40500, 0.41000, 0.41500, 0.42000, 0.42500, 0.43000, 0.43500, 0.44000, 0.44500, 0.45000, 0.45500, 0.46000, 0.46500, 0.47000, 0.47500, 0.48000, 0.48500, 0.49000, 0.49500, 0.50000, 0.50500, 0.51000, 0.51500, 0.52000, 0.52500, 0.53000, 0.53500, 0.54000, 0.54500, 0.55000, 0.55500, 0.56000, 0.56500, 0.57000, 0.57500, 0.58000, 0.58500, 0.59000, 0.59500, 0.60000, 0.60500, 0.61000, 0.61500, 0.62000, 0.62500, 0.63000, 0.63500, 0.64000, 0.64500, 0.65000, 0.65500, 0.66000, 0.66500, 0.67000, 0.67500, 0.68000, 0.68500, 0.69000, 0.69500, 0.70000, 0.70500, 0.71000, 0.71500, 0.72000, 0.72500, 0.73000, 0.73500, 0.74000, 0.74500, 0.75000, 0.75500, 0.76000, 0.76500, 0.77000, 0.77500, 0.78000, 0.78500, 0.79000, 0.79500, 0.80000, 0.80500, 0.81000, 0.81500, 0.82000, 0.82500, 0.83000, 0.83500, 0.84000, 0.84500, 0.85000, 0.85500, 0.86000, 0.86500, 0.87000, 0.87500, 0.88000, 0.88500, 0.89000, 0.89500, 0.90000, 0.90500, 0.91000, 0.91500, 0.92000, 0.92500, 0.93000, 0.93500, 0.94000, 0.94500, 0.95000, 0.95500, 0.96000, 0.96500, 0.97000, 0.97500, 0.98000, 0.98500, 0.99000, 0.99500, 1.00000]"
                    unit = "p.u."
                    group = "Basic parameters:1"
                }

                Init_SOC {
                    label = "Initial state of charge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                    group = "Basic parameters"
                }

                SOH_vector {
                    label = "State of health vector"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Basic parameters"
                }

                T_vector {
                    label = "Temperatures vector"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    group = "Basic parameters"
                }

                OCV {
                    label = "Open circuit voltage"
                    widget = edit
                    type = generic
                    default_value = "[[ 2.81376455, 2.934249, 3.01131295, 3.0707406, 3.12232055, 3.1679386999999997, 3.20864785, 3.2450991, 3.27819715, 3.30856405, 3.3362725999999996, 3.3618633499999997, 3.38570235, 3.40775795, 3.42830425, 3.4476403500000004, 3.4655972, 3.48235125, 3.4982734000000004, 3.5123286499999997, 3.52428065, 3.5322503000000003, 3.536190725, 3.538614355, 3.5410027349999997, 3.543410505, 3.54570155, 3.548176695, 3.55074616, 3.55332738, 3.5560948150000002, 3.5590690300000003, 3.5622155269999998, 3.5656399850000002, 3.569116135, 3.5732180099999997, 3.57727722, 3.5820934199999996, 3.58702369, 3.5923769, 3.5981162299999996, 3.60387865, 3.6098619999999997, 3.61578425, 3.6219618000000002, 3.6279250050000003, 3.633843695, 3.6400532699999997, 3.646100845, 3.6525218749999997, 3.659006475, 3.6658932699999998, 3.6723717, 3.67845187, 3.6843657899999998, 3.690319095, 3.696598375, 3.70317101, 3.7103087649999997, 3.71751191, 3.72478503, 3.7312556949999998, 3.737126875, 3.7421215, 3.746753425, 3.7512470799999997, 3.7557191, 3.759948005, 3.7641692570000003, 3.7683243400000004, 3.77226982, 3.776130865, 3.77996065, 3.7834905, 3.78724775, 3.79068595, 3.79405435, 3.79739885, 3.8008169, 3.8037784, 3.80672915, 3.80976375, 3.81294495, 3.8155956, 3.81841755, 3.8211345, 3.82375915, 3.826463, 3.8289732, 3.83148675, 3.8339139, 3.8364958500000004, 3.8389766, 3.84130125, 3.8436186, 3.84593155, 3.8484112, 3.8508698999999997, 3.853017, 3.8553768, 3.8575925, 3.8597776, 3.8618757, 3.8639596, 3.8662289, 3.8684966, 3.8704239, 3.8727584, 3.8746679, 3.8767636000000003, 3.8789283, 3.88108645, 3.88336145, 3.88554035, 3.8876272999999997, 3.88979185, 3.8919731499999997, 3.89423455, 3.89660415, 3.89878675, 3.9010609, 3.9034554999999997, 3.9058273, 3.9083077999999998, 3.9107870499999997, 3.9134431, 3.91605185, 3.9188395000000003, 3.92173155, 3.9245562, 3.9278719, 3.93123635, 3.93501795, 3.9392118, 3.9434215, 3.9476625, 3.9522793, 3.956863, 3.9614228, 3.9661213500000003, 3.97056845, 3.97496085, 3.97923145, 3.98304985, 3.9867527999999997, 3.990355, 3.9938599000000004, 3.997107, 4.0001812, 4.0032136000000005, 4.0059932, 4.0087594499999994, 4.011432500000001, 4.0139152, 4.0163138, 4.0185217, 4.02070895, 4.022900900000001, 4.0249913, 4.0268188, 4.02872455, 4.03070295, 4.0323274, 4.0341031, 4.03572435, 4.0374238, 4.03904715, 4.0406617, 4.0421721999999995, 4.04385255, 4.04555215, 4.0469809, 4.048781399999999, 4.05039585, 4.052104, 4.05390415, 4.0557043, 4.057513849999999, 4.0593374, 4.0614338, 4.0635322, 4.0657283, 4.0680112, 4.0704244, 4.07274935, 4.075507399999999, 4.0782211, 4.0812930000000005, 4.08431865, 4.08759685, 4.0910807, 4.0947777499999995, 4.0989474, 4.10329865, 4.10799, 4.1129271, 4.1185746, 4.1244995, 4.1311105999999995, 4.138731625, 4.14890576], [2.8100227500000003, 2.916445, 2.99576475, 3.057303, 3.11000275, 3.1564935, 3.19803925, 3.2350955, 3.26858575, 3.2992202500000003, 3.3273629999999996, 3.35331675, 3.37731175, 3.39958975, 3.4203212499999998, 3.4398017500000004, 3.457986, 3.47495625, 3.4909670000000004, 3.50564325, 3.51860325, 3.5288515, 3.535353625, 3.539071775, 3.5418136749999998, 3.544252525, 3.54650775, 3.5488834750000002, 3.5513308, 3.5538369, 3.556474075, 3.55934515, 3.5622776349999996, 3.565399925, 3.5687806749999997, 3.57249005, 3.5763861, 3.5808671, 3.5855184500000004, 3.5906845, 3.5961811499999996, 3.60179325, 3.60771, 3.6137212499999998, 3.619809, 3.626025025, 3.632018475, 3.63826635, 3.644504225, 3.6510093749999997, 3.657832375, 3.66466635, 3.6710585, 3.67705935, 3.6830289499999997, 3.689195475, 3.6957918750000003, 3.70265505, 3.709943825, 3.71715955, 3.72392515, 3.729878475, 3.735234375, 3.7402075, 3.744967125, 3.7498354, 3.7545954999999998, 3.759340025, 3.764046285, 3.7688217, 3.7733491, 3.777854325, 3.78220325, 3.7862525, 3.7902387500000003, 3.79382975, 3.79747175, 3.80099425, 3.8044845, 3.807692, 3.81084575, 3.81401875, 3.81712475, 3.819978, 3.82288775, 3.8256725, 3.82839575, 3.831115, 3.833666, 3.83623375, 3.8387695, 3.8412792500000004, 3.843683, 3.84610625, 3.848493, 3.85085775, 3.853256, 3.8555495, 3.857885, 3.860084, 3.8623624999999997, 3.864488, 3.8665785, 3.868598, 3.8707445, 3.872883, 3.8749195, 3.876992, 3.8789395, 3.881018, 3.8830415, 3.88503225, 3.88720725, 3.88930175, 3.8913365, 3.89335925, 3.8954657499999996, 3.89757275, 3.89982075, 3.90193375, 3.9041045000000003, 3.9064775, 3.9087365, 3.911139, 3.91353525, 3.9160155, 3.91865925, 3.9213975000000003, 3.92425775, 3.927181, 3.9305595, 3.93418175, 3.93828975, 3.942859, 3.9479075, 3.9531125, 3.9585965, 3.9639149999999996, 3.968714, 3.97340675, 3.9776422499999997, 3.98160425, 3.98535725, 3.98884925, 3.992164, 3.995375, 3.9984995000000003, 4.001535, 4.004506, 4.007268, 4.0099659999999995, 4.01259725, 4.015162500000001, 4.017576, 4.019969, 4.0222085, 4.02434475, 4.026504500000001, 4.0285565, 4.030494, 4.03242275, 4.03431475, 4.036036999999999, 4.0377155, 4.03942175, 4.041119, 4.04283575, 4.0445085, 4.046061, 4.047662750000001, 4.04936075, 4.050904500000001, 4.052707, 4.05437925, 4.05612, 4.05792075, 4.0597215, 4.06156925, 4.063487, 4.065569, 4.067661, 4.0698415, 4.072056, 4.074522, 4.07694675, 4.079536999999999, 4.0823055, 4.085265000000001, 4.08839325, 4.0915842499999995, 4.0950035, 4.09868875, 4.102737, 4.106893250000001, 4.11155, 4.1162355, 4.1216729999999995, 4.1272975, 4.133553, 4.140458125, 4.149328799999999], [2.80628095, 2.898641, 2.98021655, 3.0438654, 3.09768495, 3.1450483, 3.18743065, 3.2250919, 3.2589743500000004, 3.2898764500000004, 3.3184533999999997, 3.34477015, 3.36892115, 3.39142155, 3.41233825, 3.43196315, 3.4503747999999996, 3.46756125, 3.4836606000000003, 3.4989578499999996, 3.5129258500000002, 3.5254527, 3.534516525, 3.539529195, 3.542624615, 3.545094545, 3.54731395, 3.549590255, 3.55191544, 3.55434642, 3.556853335, 3.55962127, 3.562339743, 3.565159865, 3.568445215, 3.57176209, 3.57549498, 3.5796407799999996, 3.58401321, 3.5889921, 3.5942460699999996, 3.59970785, 3.605558, 3.6116582499999996, 3.6176562, 3.624125045, 3.630193255, 3.63647943, 3.642907605, 3.6494968749999996, 3.656658275, 3.66343943, 3.6697452999999998, 3.67566683, 3.6816921099999997, 3.688071855, 3.694985375, 3.70213909, 3.709578885, 3.71680719, 3.72306527, 3.728501255, 3.7333418750000003, 3.7382934999999997, 3.743180825, 3.74842372, 3.7534718999999996, 3.758732045, 3.7639233130000003, 3.7693190600000004, 3.77442838, 3.779577785, 3.78444585, 3.7890145, 3.79322975, 3.7969735499999997, 3.80088915, 3.80458965, 3.8081521, 3.8116056, 3.81496235, 3.81827375, 3.8213045500000002, 3.8243603999999998, 3.82735795, 3.8302104999999997, 3.83303235, 3.8357669999999997, 3.8383588, 3.84098075, 3.8436251, 3.8460626500000004, 3.8483894000000003, 3.8509112500000002, 3.8533674, 3.85578395, 3.8581008, 3.8602290999999997, 3.862753, 3.8647912, 3.8671325, 3.8691984, 3.8712813, 3.8732364, 3.8752600999999998, 3.8772694, 3.8794151, 3.8812256, 3.8832111, 3.8852724000000003, 3.8871547, 3.88897805, 3.89105305, 3.8930631499999997, 3.8950457, 3.89692665, 3.8989583499999996, 3.90091095, 3.90303735, 3.90508075, 3.9071481, 3.9094995, 3.9116457000000002, 3.9139702, 3.91628345, 3.9185879, 3.92126665, 3.9239555, 3.92678395, 3.9298058, 3.9332471, 3.93712715, 3.9415615500000003, 3.9465062, 3.9523935, 3.9585624999999998, 3.9649137, 3.970967, 3.9760052, 3.9806921500000003, 3.98471605, 3.98824765, 3.99148305, 3.99464865, 3.9975752, 4.000395, 4.0031391, 4.005963, 4.0088308, 4.0113224, 4.0139388, 4.016435049999999, 4.018892500000001, 4.0212368, 4.0236241999999995, 4.0258953, 4.02798055, 4.0301081000000005, 4.032121699999999, 4.0341692, 4.03612095, 4.03792655, 4.0397466, 4.0413279, 4.04311915, 4.0448142, 4.04662435, 4.0483553, 4.0499498, 4.05147295, 4.05316935, 4.0548281, 4.0566325999999995, 4.05836265, 4.060136, 4.06193735, 4.0637387, 4.06562465, 4.0676366, 4.069704199999999, 4.0717898, 4.0739547, 4.0761008, 4.0786196, 4.08114415, 4.083566599999999, 4.0863899, 4.089237000000001, 4.09246785, 4.09557165, 4.0989263, 4.1025997499999995, 4.1065266, 4.11048785, 4.11511, 4.1195439, 4.1247714, 4.1300955, 4.1359954, 4.1421846250000005, 4.1497518399999995]]"
                    unit = "V"
                    group = "Basic parameters"
                }

                R0 {
                    label = "Internal resistance"
                    widget = edit
                    type = generic
                    default_value = "[4.6198e-3, 1.7810e-3, 1.1351e-3]"
                    unit = "Ω"
                    group = "Basic parameters"
                }

                eta {
                    label = "Coulombic efficiency"
                    widget = edit
                    type = generic
                    default_value = "[0.98174, 0.99102, 0.98965]"
                    group = "Basic parameters"
                }

                cell_NO {
                    label = "Number of cells in parallel"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Basic parameters"
                }

                nom_Q_combo {
                    label = "Nominal capacity"
                    widget = combo
                    combo_values = "Total capacity", "Discharge capacity"
                    type = string
                    default_value = "Total capacity"
                    group = "Basic parameters"
                    no_evaluate

                    CODE property_value_edited
                        if new_value=="Total capacity":
                            mdl.enable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.disable_property(mdl.prop(container_handle, "V_min"))
                            mdl.disable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_discharge"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.enable_property(mdl.prop(container_handle, "V_min"))
                            mdl.enable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_discharge"))
                    ENDCODE
                }

                Q_discharge {
                    label = "Discharge capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                    disabled
                }

                V_min {
                    label = "Minimum/cut-off voltage"
                    widget = edit
                    type = generic
                    default_value = "2.81"
                    unit = "V"
                    group = "Basic parameters"
                    disabled
                }

                I_dis {
                    label = "Discharge rate"
                    widget = edit
                    type = generic
                    default_value = "15"
                    unit = "A"
                    group = "Basic parameters"
                    disabled
                }

                Q_total {
                    label = "Total capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                }

                Ts {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "s"
                    group = "Basic parameters"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Basic parameters"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "basic_parameters")
                    ENDCODE
                }

                RC_NO {
                    label = "Model order"
                    widget = combo
                    combo_values = "None", "1", "2", "3"
                    type = string
                    default_value = "1"
                    group = "Diffusion process:3"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        parallel_rc = mdl.get_item("Parallel RC", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        mdl.set_property_value(mdl.prop(parallel_rc, "RC_number"), new_value)
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.disable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="1":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="2":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="3":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.enable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.enable_property(mdl.prop(container_handle, "C3"))
                    ENDCODE
                }

                R1 {
                    label = "Resistor 1"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                }

                C1 {
                    label = "Capacitor 1"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                }

                R2 {
                    label = "Resistor 2"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C2 {
                    label = "Capacitor 2"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                R3 {
                    label = "Resistor 3"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C3 {
                    label = "Capacitor 3"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                H_type {
                    label = "Hysteresis model"
                    widget = combo
                    combo_values = "None", "One state"
                    type = string
                    default_value = "One state"
                    group = "Voltage hysteresis:4"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        Hysteresis = mdl.get_item("Hysteresis", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if new_value=="None":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "None")
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        if new_value=="One state":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "One state")
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    ENDCODE
                }

                T_vector_h {
                    label = "Temperatures vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    unit = "celsius"
                    group = "Voltage hysteresis"
                }

                SOC_vector_h {
                    label = "State of charge vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Voltage hysteresis"
                }

                M0 {
                    label = "M0 parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.0031315, 0.0023535, 0.0011502]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                M {
                    label = "M parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.039929, 0.020018, 0.020545]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                gamma {
                    label = "Gamma parameter"
                    widget = edit
                    type = generic
                    default_value = "[67.207e-3, 92.645e-3, 67.840e-3]"
                    group = "Voltage hysteresis"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Voltage hysteresis"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "voltage_hysteresis")
                    
                    ENDCODE
                }

                balancing {
                    label = "Balancing circuit"
                    widget = combo
                    combo_values = "None", "Passive", "Direct current input"
                    type = string
                    default_value = "None"
                    group = "Balancing circuit:5"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION, ITEM_TAG
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        passive_balancing_subsystem = mdl.get_item("Passive Balancing", parent=sub_handle, item_type=ITEM_COMPONENT)
                        Sum3 = mdl.get_item("Sum3", parent=sub_handle, item_type=ITEM_COMPONENT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        Goto3 = mdl.get_item("Goto3", parent=sub_handle, item_type=ITEM_TAG)
                    
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            try:
                                mdl.delete_item(mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT))
                            except:
                                pass
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "None")
                            try:
                                mdl.create_connection(start=port_T, end=Goto3, name = "Connection1131")
                            except:
                                pass
                        elif new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Passive balancing")
                            if old_value=="Direct current input":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:  #elif old_value=="None":
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                    
                            mdl.create_connection(start=mdl.term(passive_balancing_subsystem, "BL_SW"), end=mdl.term(bus_split, "out1"))
                            mdl.create_connection(start=mdl.term(Sum3, "out"), end=mdl.term(passive_balancing_subsystem, "V_term"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Direct current input")
                            if old_value=="Passive":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                            mdl.create_connection(start=mdl.term(bus_split, "out1"), end=mdl.term(passive_balancing_subsystem, "I_in"))
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                    ENDCODE
                }

                R_balance {
                    label = "Balancing parallel resistor"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "Ω"
                    group = "Balancing circuit"
                    disabled
                }

                meas_SOH {
                    label = "State of health"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements:6"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOH = mdl.create_component("core/Probe",
                                                        name="SOH",
                                                        parent=sub_handle,
                                                        position=(8488, 7760),)
                            Termination1 = mdl.get_item("Termination1", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOH, "in"), end=mdl.term(Termination1, "in"))
                    
                        else:
                            if mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_SOC {
                    label = "State of charge"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOC = mdl.create_component("core/Probe",
                                                        name="SOC",
                                                        parent=sub_handle,
                                                        position=(8488, 7824),)
                            Termination3 = mdl.get_item("Termination3", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOC, "in"), end=mdl.term(Termination3, "in"))
                    
                        else:
                            if mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_OCV {
                    label = "Open circuit voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            OCV = mdl.create_component("core/Probe",
                                                        name="OCV",
                                                        parent=sub_handle,
                                                        position=(8488, 7888),)
                            Termination4 = mdl.get_item("Termination4", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(OCV, "in"), end=mdl.term(Termination4, "in"))
                    
                        else:
                            if mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Rint {
                    label = "Internal resistance"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Internal_resistance = mdl.create_component("core/Probe",
                                                        name="Internal resistance",
                                                        parent=sub_handle,
                                                        position=(8488, 7952),)
                            Termination5 = mdl.get_item("Termination5", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Internal_resistance, "in"), end=mdl.term(Termination5, "in"))
                    
                        else:
                            if mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Q {
                    label = "Total capacity"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Total_capacity = mdl.create_component("core/Probe",
                                                        name="Total capacity",
                                                        parent=sub_handle,
                                                        position=(8488, 8016),)
                            Termination6 = mdl.get_item("Termination6", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Total_capacity, "in"), end=mdl.term(Termination6, "in"))
                    
                        else:
                            if mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Ibal {
                    label = "Balancing current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            current = mdl.create_component("core/Probe",
                                                        name="Balancing current",
                                                        parent=sub_handle,
                                                        position=(8688, 7760),)
                            Termination2 = mdl.get_item("Termination2", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(current, "in"), end=mdl.term(Termination2, "in"))
                    
                        else:
                            if mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Icell {
                    label = "Cell current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Cell_current = mdl.create_component("core/Probe",
                                                        name="Cell current",
                                                        parent=sub_handle,
                                                        position=(8688, 7824),)
                            Termination7 = mdl.get_item("Termination7", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Cell_current, "in"), end=mdl.term(Termination7, "in"))
                    
                        else:
                            if mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_T {
                    label = "Temperature"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Temperature = mdl.create_component("core/Probe",
                                                        name="Temperature",
                                                        parent=sub_handle,
                                                        position=(8688, 7888),)
                            Termination8 = mdl.get_item("Termination8", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Temperature, "in"), end=mdl.term(Termination8, "in"))
                    
                        else:
                            if mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_hyst {
                    label = "Hysteresis voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            voltage = mdl.create_component("core/Probe",
                                                        name="Hysteresis voltage",
                                                        parent=sub_handle,
                                                        position=(8688, 7952),)
                            Termination9 = mdl.get_item("Termination9", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(voltage, "in"), end=mdl.term(Termination9, "in"))
                    
                        else:
                            if mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    Init_SOC = mdl.get_property_value(mdl.prop(item_handle, "Init_SOC"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                    cell_NO = mdl.get_property_value(mdl.prop(item_handle, "cell_NO"))
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                    C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                    R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                    C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                    R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                    C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    T_vector_h = mdl.get_property_value(mdl.prop(item_handle, "T_vector_h"))
                    SOC_vector_h = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector_h"))
                    M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                    M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                    gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                    balancing = mdl.get_property_value(mdl.prop(item_handle, "balancing"))
                    R_balance = mdl.get_property_value(mdl.prop(item_handle, "R_balance"))
                    meas_SOH = mdl.get_property_value(mdl.prop(item_handle, "meas_SOH"))
                    meas_SOC = mdl.get_property_value(mdl.prop(item_handle, "meas_SOC"))
                    meas_OCV = mdl.get_property_value(mdl.prop(item_handle, "meas_OCV"))
                    meas_Rint = mdl.get_property_value(mdl.prop(item_handle, "meas_Rint"))
                    meas_Q = mdl.get_property_value(mdl.prop(item_handle, "meas_Q"))
                    meas_Ibal = mdl.get_property_value(mdl.prop(item_handle, "meas_Ibal"))
                    meas_Icell = mdl.get_property_value(mdl.prop(item_handle, "meas_Icell"))
                    meas_T = mdl.get_property_value(mdl.prop(item_handle, "meas_T"))
                    meas_hyst = mdl.get_property_value(mdl.prop(item_handle, "meas_hyst"))
                    # HEADER STOP
                    # Entire code here is for calculating Q_total from Q_discharge
                    from typhoon.api.schematic_editor.exception import SchApiException
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    import scipy.interpolate as interpolate
                
                    sub_handle = mdl.get_sub_level_handle(item_handle)
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    capacity_module = mdl.get_item("Capacity", parent=sub_handle, item_type=ITEM_COMPONENT)
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                
                    if nom_Q_combo == "Total capacity":
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_total)
                
                    elif nom_Q_combo == "Discharge capacity":
                        # Finding the voltage drops: V_RC_max
                        if RC_NO == "None":
                            RC_drop = 0
                        elif RC_NO == "1":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            RC_drop = R1*I_dis
                        elif RC_NO == "2":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            RC_drop = (R1+R2)*I_dis
                        elif RC_NO == "3":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                            RC_drop = (R1+R2+R3)*I_dis
                
                        # Finding the voltage drops: V_hyst_max
                        if H_type == "None":
                            H_drop = 0
                        elif H_type == "One state":
                            M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                            M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                            H_drop = np.mean(M) + np.mean(M0)
                
                        if np.ndim(Q_discharge) == 0:
                            if np.ndim(R0) == 0:
                                OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    # This is a bad cornercase where OCV is a function of temperature,
                                    # but neither R0 nor Q_discharge are. We take last temperature dependant OCV
                                    SOC_from_OCV = interpolate.interp1d(OCV[-1], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 1:
                                Q_max = [0]*len(R0)
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 2:
                                Q_max = [0]*len(R0[-1])
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 1:
                            Q_max = Q_discharge.copy()
                            for index, temp in enumerate(T_vector):
                                if np.ndim(R0) == 0:
                                    OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 1:
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 2:
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    # [-1] index is used to find the last of the SOH vector
                
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max[index] = Q_discharge[index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 2:
                            Q_max = Q_discharge.copy()
                            for health_index in range(len(SOH_vector)):
                                for index, temp in enumerate(T_vector):
                                    if np.ndim(R0) == 0:
                                        OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 1:
                                        OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 2:
                                        OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                        # [-1] index is used to find the last of the SOH vector
                
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[health_index][index] = Q_discharge[health_index][index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_max)
                        if np.min(np.min(Q_max))<0:
                            info(f"{Q_max=}")
                            raise SchApiException("Provided discharge data is not valid")
                ENDCODE

                CODE define_icon
                    image('battery_cell.svg')
                ENDCODE
            }
        }
        [
            position = 7808, 8376
            size = 32, 64
        ]

        component src_scada_input "battery temp 1" {
            def_value = "25"
            execution_rate = "Ts"
            unit = ""
        }
        [
            position = 7216, 8560
        ]

        component "core/Current Measurement" current_1 {
            execution_rate = "Ts"
            sig_output = "True"
        }
        [
            position = 7888, 8328
            rotation = down
            scale = 1, -1
            size = 64, 32
        ]

        component gen_integrator Integrator1 {
        }
        [
            position = 8080, 8144
            hide_name = True
        ]

        component gen_probe chgAh_1 {
        }
        [
            position = 8176, 8144
        ]

        component gen_integrator Integrator2 {
        }
        [
            position = 8080, 8208
            hide_name = True
        ]

        component gen_probe disAh_1 {
        }
        [
            position = 8176, 8208
        ]

        component gen_c_function "C function2" {
            input_terminals = "real current;"
            input_terminals_dimensions = "inherit"
            input_terminals_feedthrough = "True"
            input_terminals_show_labels = "False"
            output_fnc = "/*Begin code section*/
if (current>0) {
    out = current;
    out2 = 0;
}
else if (current<0) {
    out2 = current;
    out = 0;
}
/*End code section*/"
            output_terminals = "real out;inherit out2;"
            output_terminals_dimensions = "inherit;inherit"
            output_terminals_feedthrough = "True;True"
            output_terminals_show_labels = "False;False"
        }
        [
            position = 7984, 8176
            hide_name = True
            size = 48, 48
        ]

        component gen_probe temperature_1 {
        }
        [
            position = 8128, 7840
        ]

        component "core/Voltage Measurement" voltage_2 {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 8504, 8360
            rotation = right
            scale = -1, 1
            size = 64, 32
        ]

        component gen_probe script_no_2 {
        }
        [
            position = 8984, 8056
        ]

        component sys_mp_signal_switch "Multiport signal switch2" {
            number_of_input_terminals = "4"
        }
        [
            position = 8640, 8224
            hide_name = True
        ]

        component lut_1d "1D look-up table26" {
            in_vec_x = "OCV_25_SCRIPT_2_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_2_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 8496, 8224
            hide_name = True
        ]

        component lut_1d "1D look-up table27" {
            in_vec_x = "OCV_25_SCRIPT_4_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_4_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 8496, 8256
            hide_name = True
        ]

        component "core/Signal Controlled Current Source" Isp23 {
        }
        [
            position = 8808, 8360
            rotation = left
            hide_name = True
            scale = -1, 1
            size = 64, 32
        ]

        component Subsystem "Battery Cell_45" {
            layout = static
            component Subsystem "SOC Model" {
                layout = dynamic
                component gen_gain Gain2 {
                    gain = "1/numeric_scale"
                }
                [
                    position = 7944, 8152
                    hide_name = True
                ]

                component gen_integrator Integrator {
                    limit_lower = "-0.1e6"
                    limit_output = "True"
                    limit_upper = "1.1e6"
                    show_init_condition = "external"
                    show_reset = "rising"
                }
                [
                    position = 7840, 8152
                ]

                component gen_gain Gain1 {
                    execution_rate = "Ts"
                    gain = "1/3600.0"
                }
                [
                    position = 7688, 8128
                    hide_name = True
                ]

                component gen_c_function Coulombic_Eff {
                    input_terminals = "real i;real eta;"
                    input_terminals_dimensions = "inherit;inherit"
                    input_terminals_feedthrough = "True;True"
                    input_terminals_show_labels = "True;True"
                    output_fnc = "/*Begin code section*/
// If the battery is being discharged, efficiency is 1
// If battery is being charged, efficiency eta is used
if(i>0)
    i_out = i;
else
    i_out = eta*i;
/*End code section*/"
                    output_terminals = "real i_out;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "False"
                }
                [
                    position = 7496, 8120
                    size = 48, 48
                ]

                component gen_gain Gain3 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7752, 8128
                    hide_name = True
                ]

                component gen_product Product1 {
                    signs = "*/"
                }
                [
                    position = 7608, 8128
                    hide_name = True
                ]

                component gen_sum Sum1 {
                    signs = "+-"
                }
                [
                    position = 8072, 8088
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                }
                [
                    position = 7976, 8080
                ]

                component src_scada_input "SOC Override" {
                    def_value = "Init_SOC/100.0"
                    execution_rate = "Ts"
                    max = "1"
                    min = "0"
                    unit = ""
                }
                [
                    position = 7472, 8432
                ]

                component gen_sum Sum2 {
                    signs = "+-"
                }
                [
                    position = 7600, 8424
                    hide_name = True
                ]

                component src_constant Constant2 {
                    execution_rate = "Ts"
                }
                [
                    position = 7520, 8392
                    hide_name = True
                ]

                component "core/Edge Detection" "Edge Detection1" {
                }
                [
                    position = 7712, 8168
                    hide_name = True
                    size = 32, 32
                ]

                component gen_gain Gain4 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7720, 8424
                    hide_name = True
                ]

                component gen_limiter Limit1 {
                    lower_limit = "-0.1"
                }
                [
                    position = 8160, 8088
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8112
                ]

                port SOC_pu {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8240, 8088
                ]

                port Q {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8256
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8192
                ]

                junction Junction1 sp
                [
                    position = 7656, 8424
                ]

                comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Ah-As</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling  </span></p></body></html> ENDCOMMENT 
                [
                    position = 7664, 8056
                ]

                comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Taking into account</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">the Coulombic Efficiency</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">during charge </span></p></body></html> ENDCOMMENT 
                [
                    position = 7424, 8024
                ]

                comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7736, 8056
                ]

                comment Comment4 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling Inversion</span></p></body></html> ENDCOMMENT 
                [
                    position = 7896, 8176
                ]

                comment Comment6 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">pu</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling </span> </p></body></html> ENDCOMMENT 
                [
                    position = 7584, 8056
                ]

                comment Comment7 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Initial SOC and</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">SOC Override</span></p></body></html> ENDCOMMENT 
                [
                    position = 7512, 8328
                ]

                comment Comment8 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7696, 8448
                ]

                connect I Coulombic_Eff.i as Connection1019
                connect Integrator.in Gain3.out as Connection1024
                connect Gain3.in Gain1.out as Connection1025
                connect Gain2.in Integrator.out as Connection1026
                connect Product1.in Coulombic_Eff.i_out as Connection1027
                connect Product1.out Gain1.in as Connection1028
                connect Constant1.out Sum1.in as Connection1030
                connect Sum1.in1 Gain2.out as Connection1031
                [
                    position = 0, 0
                    breakpoints = 8024, 8096; 8024, 8152
                ]
                connect Q Product1.in1 as Connection1033
                connect Constant2.out Sum2.in as Connection1034
                connect Sum2.in1 "SOC Override.out" as Connection1035
                connect Integrator.reset "Edge Detection1.Out1" as Connection1042
                connect "Edge Detection1.In1" Junction1 as Connection1043
                connect Junction1 Sum2.out as Connection1044
                [
                    position = 0, 0
                ]
                connect Integrator.init_condition_port Gain4.out as Connection1045
                connect Gain4.in Junction1 as Connection1046
                connect eta Coulombic_Eff.eta as Connection1047
                [
                    position = 0, 0
                    breakpoints = 7440, 8192; 7440, 8128
                ]
                connect Sum1.out Limit1.in as Connection1048
                connect Limit1.out SOC_pu as Connection1049

                Init_SOC = "Init_SOC"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">SOC Model models the state of charge of the battery by applying ideal Coulomb Counting.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Following options are supported:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Coulombic Efficiency</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Available capacity as signal input Q</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Inital SOC supported</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- SOC can be overridden during the simulation (reset to any value)</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Full numerical range of the integrator is used </p></body></html>"

                    Init_SOC {
                        label = "Initial SOC"
                        widget = edit
                        type = generic
                        default_value = "80"
                        unit = "%"
                    }

                    Ts {
                        label = "execution_rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE init
                        numeric_scale = 1e6
                    ENDCODE
                }
            }
            [
                position = 8072, 8072
                size = 128, 64
            ]

            component "core/Signal Controlled Voltage Source" Vt {
            }
            [
                position = 8352, 8384
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component "core/Current Measurement" It {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8448, 8336
                size = 64, 32
            ]

            component gen_sum Sum3 {
                signs = "++--"
            }
            [
                position = 8016, 8384
                hide_name = True
            ]

            component src_scada_input SOH_set {
                def_value = "1"
                execution_rate = "Ts"
                max = "1"
                min = "0"
                unit = ""
            }
            [
                position = 7224, 8032
            ]

            component Subsystem Capacity {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Qnom {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port Q {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Qnom.out Q as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Capacity can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Qnom {
                        label = "Nominal Capacity"
                        widget = edit
                        type = generic
                        default_value = "Q_discharge"
                        unit = "Ah"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Qnom = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Qnom_value = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Qnom_value)) < 0:
                            raise SchApiException("Cell total capacity cannot be smaller than 0. Please check the data again")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Qnom_value) == 0:
                            Qnom = mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Qnom, "value"), Qnom_value)
                            mdl.set_property_value(mdl.prop(Qnom, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Q)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Q)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7816
                size = 128, 56
            ]

            component Subsystem "Internal Resistance" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Rint {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port R {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Rint.out R as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Resistance can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Rint {
                        label = "Series Resistance"
                        widget = edit
                        type = generic
                        default_value = "R0"
                        unit = "Ω"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Rint = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Rint_prop_value = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Rint_prop_value)) < 0:
                            raise SchApiException("Provided Internal resistance cannot be smaller than 0")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Rint = mdl.get_item("R", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Rint_prop_value) == 0:
                            Rint = mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Rint, "value"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(Rint, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Rint)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Rint)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Internal resistance is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7896
                size = 128, 56
            ]

            component Subsystem "Coulombic efficiency" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Efficiency_constant {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port eta {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Efficiency_constant.out eta as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Coulombic efficiency can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    eta {
                        label = "Coulombic efficiency"
                        widget = edit
                        type = generic
                        default_value = "eta"
                        unit = "ohm"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        eta_prop_value = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(eta_prop_value)) < 0:
                            raise SchApiException("Cell coulombic efficiency cannot be smaller than 0.")
                        if np.max(np.max(eta_prop_value)) > 1:
                            raise SchApiException("Cell coulombic efficiency cannot be larger than 1.")
                    
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(eta_prop_value) == 0:
                            Efficiency_constant = mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "value"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_eta)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_eta)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7984
                size = 128, 56
            ]

            component Subsystem "Open Circuit Voltage" {
                layout = dynamic
                component lut_1d LUT_1D {
                    ext_mode = "Linear"
                }
                [
                    position = 8432, 8200
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8416, 8096
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port OCV {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOC {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOC</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect LUT_1D.addr SOC as Connection1
                connect LUT_1D.value OCV as Connection2
                connect termination_T.in T as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage is always a function of State of Charge.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage can be a function of temperature but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a list, then it\'s dependace is of SOC, regardless of what is written inside temperature vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a nested list, then it\'s dependance is first of SOC and then of temperature.</p></body></html>"

                    OCV {
                        label = "Open circuit voltage vector (table)"
                        widget = edit
                        type = generic
                        default_value = "OCV"
                        unit = "V"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        OCV_value = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    
                        if not np.all(np.diff(SOC_vector) >= 0):
                            raise SchApiException("Provided SOC data is not monotonically nondecreasing, please check the documentation")
                    
                        if np.min(np.min(OCV_value)) < 0:
                            raise SchApiException("Open circuit voltage cannot be negative for any point.")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_OCV = mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(OCV_value) == 1:
                            LUT_1D = mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), execution_rate)
                            if not np.all(np.diff(OCV_value) >= 0):
                                raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                        elif np.ndim(OCV_value) == 2:
                            for OCV_1D in OCV_value:  # checks for non decaying OCV for each Temp
                                if not np.all(np.diff(OCV_value) >= 0):
                                    raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_SOC)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_OCV)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), execution_rate)
                    
                        else:
                            raise SchApiException("Provided discharge data is not valid")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7672, 7816
                size = 128, 56
            ]

            component Subsystem "Parallel RC" {
                layout = dynamic
                component gen_terminator termination_I {
                }
                [
                    position = 7832, 8048
                ]

                component gen_product Product_1a {
                }
                [
                    position = 7952, 8256
                ]

                component gen_product Product_1b {
                    signs = "*/"
                }
                [
                    position = 8064, 8112
                ]

                component gen_product Product_1c {
                    signs = "/*"
                }
                [
                    position = 8176, 8216
                    rotation = down
                ]

                component gen_sum Sum_1 {
                    signs = "+-"
                }
                [
                    position = 8176, 8120
                ]

                component gen_integrator Integrator_1 {
                }
                [
                    position = 8304, 8120
                ]

                component src_constant Constant_C1 {
                    execution_rate = "Ts"
                    value = "C1"
                }
                [
                    position = 7832, 8208
                ]

                component src_constant Constant_R1 {
                    execution_rate = "Ts"
                    value = "R1"
                }
                [
                    position = 7832, 8264
                ]

                component gen_sum Sum {
                    signs = "+"
                }
                [
                    position = 8448, 8128
                ]

                port V {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8544, 8136
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7736, 8120
                ]

                junction Junction1 sp
                [
                    position = 8344, 8520
                ]

                connect I termination_I.in as Connection127
                [
                    position = 0, 0
                ]
                connect Product_1a.in Constant_C1.out as Connection128
                connect Product_1a.in1 Constant_R1.out as Connection129
                connect Product_1b.in I as Connection131
                connect Product_1b.in1 Constant_C1.out as Connection132
                connect Product_1a.out Product_1c.in as Connection133
                connect Sum_1.in1 Product_1c.out as Connection134
                connect Product_1b.out Sum_1.in as Connection135
                connect Integrator_1.in Sum_1.out as Connection136
                connect Integrator_1.out Product_1c.in1 as Connection137
                connect Integrator_1.out Sum.in as Connection138
                connect Sum.out V as Connection139

                mask {
                    description = "The parallel RC subsystem emulates cell voltage drop due to the physical proccess diffusion of lithium ions.

                                   This is a standard method of implementing a cell in electrical circuits. The fidelity of the cell response can be modeled by increasing the order of the system. If the selected Model Order is less than 3, then the values for unused resistors and capacitors are not propagated. All the RC circuits are implemented using signal processing. If None is selected than the output voltage drop is a constant 0."

                    RC_number {
                        label = "Model order"
                        widget = combo
                        combo_values = "None", "1", "2", "3"
                        type = string
                        default_value = "1"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            port_V = mdl.get_item("V", parent=sub_handle, item_type=ITEM_PORT)
                            port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        
                            def delete_constant():
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                        
                            def delete_1():
                                mdl.delete_item(mdl.get_item("Constant_C1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_2():
                                mdl.delete_item(mdl.get_item("Constant_C2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_3():
                                mdl.delete_item(mdl.get_item("Constant_C3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def create_constant():
                                Constant_0 = mdl.create_component("core/Constant",
                                                            name="Constant_0",
                                                            parent=sub_handle,)
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V)
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                            def create_1():
                                Product_1a = mdl.create_component("core/Product",
                                                                name="Product_1a",
                                                                parent=sub_handle,
                                                                position=(7952, 8256),)
                                Product_1b = mdl.create_component("core/Product",
                                                                name="Product_1b",
                                                                parent=sub_handle,
                                                                position=(8064, 8112))
                                Product_1c = mdl.create_component("core/Product",
                                                                name="Product_1c",
                                                                parent=sub_handle,
                                                                position=(8176, 8216),
                                                                rotation="down")
                                Sum_1 = mdl.create_component("core/Sum",
                                                                name="Sum_1",
                                                                parent=sub_handle,
                                                                position=(8176, 8120),)
                                Integrator_1 = mdl.create_component("core/Integrator",
                                                                name="Integrator_1",
                                                                parent=sub_handle,
                                                                position=(8304, 8120),)
                                Constant_C1 = mdl.create_component("core/Constant",
                                                                name="Constant_C1",
                                                                parent=sub_handle,
                                                                position=(7832, 8208))
                                Constant_R1 = mdl.create_component("core/Constant",
                                                                name="Constant_R1",
                                                                parent=sub_handle,
                                                                position=(7832, 8264))
                        
                                mdl.set_property_value(mdl.prop(Sum_1, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_1b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_1c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R1, "value"), "R1")
                                mdl.set_property_value(mdl.prop(Constant_C1, "value"), "C1")
                        
                                mdl.create_connection(start=mdl.term(Product_1a, "in"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "in1"), end=mdl.term(Constant_R1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_1b, "in1"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "out"), end=mdl.term(Product_1c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_1, "in1"), end=mdl.term(Product_1c, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "out"), end=mdl.term(Sum_1, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "in"), end=mdl.term(Sum_1, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Product_1c, "in1"))
                        
                            def create_2():
                                Product_2a = mdl.create_component("core/Product",
                                                            name="Product_2a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+400),)
                                Product_2b = mdl.create_component("core/Product",
                                                            name="Product_2b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+400))
                                Product_2c = mdl.create_component("core/Product",
                                                            name="Product_2c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+400),
                                                            rotation="down")
                                Sum_2 = mdl.create_component("core/Sum",
                                                            name="Sum_2",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+400),)
                                Integrator_2 = mdl.create_component("core/Integrator",
                                                            name="Integrator_2",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+400),)
                                Constant_C2 = mdl.create_component("core/Constant",
                                                            name="Constant_C2",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+400))
                                Constant_R2 = mdl.create_component("core/Constant",
                                                            name="Constant_R2",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+400))
                        
                                mdl.set_property_value(mdl.prop(Sum_2, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_2b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_2c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R2, "value"), "R2")
                                mdl.set_property_value(mdl.prop(Constant_C2, "value"), "C2")
                        
                                mdl.create_connection(start=mdl.term(Product_2a, "in"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "in1"), end=mdl.term(Constant_R2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_2b, "in1"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "out"), end=mdl.term(Product_2c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_2, "in1"), end=mdl.term(Product_2c, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "out"), end=mdl.term(Sum_2, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "in"), end=mdl.term(Sum_2, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Product_2c, "in1"))
                        
                            def create_3():
                                Product_3a = mdl.create_component("core/Product",
                                                            name="Product_3a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+200),)
                                Product_3b = mdl.create_component("core/Product",
                                                            name="Product_3b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+200))
                                Product_3c = mdl.create_component("core/Product",
                                                            name="Product_3c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+200),
                                                            rotation="down")
                                Sum_3 = mdl.create_component("core/Sum",
                                                            name="Sum_3",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+200),)
                                Integrator_3 = mdl.create_component("core/Integrator",
                                                            name="Integrator_3",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+200),)
                                Constant_C3 = mdl.create_component("core/Constant",
                                                            name="Constant_C3",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+200))
                                Constant_R3 = mdl.create_component("core/Constant",
                                                            name="Constant_R3",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+200))
                        
                                mdl.set_property_value(mdl.prop(Sum_3, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_3b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_3c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R3, "value"), "R3")
                                mdl.set_property_value(mdl.prop(Constant_C3, "value"), "C3")
                        
                                mdl.create_connection(start=mdl.term(Product_3a, "in"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "in1"), end=mdl.term(Constant_R3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_3b, "in1"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "out"), end=mdl.term(Product_3c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_3, "in1"), end=mdl.term(Product_3c, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "out"), end=mdl.term(Sum_3, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "in"), end=mdl.term(Sum_3, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Product_3c, "in1"))
                        
                            #####################################################
                        
                            if new_value == "None":
                                delete_1()
                        
                                if old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                        
                                create_constant()
                        
                            elif new_value == "1":
                                if old_value == "None":
                                    delete_constant()
                                    create_1()
                                elif old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                                if old_value == "1":
                                    pass
                                else:
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Sum = mdl.create_component("core/Sum",
                                                                name="Sum",
                                                                parent=sub_handle,
                                                                position=(8450, 8130))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "+")
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                        
                            elif new_value == "2":
                                if old_value == "None" or old_value == "1":
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                    create_2()
                                elif old_value == "3":
                                    delete_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                        
                            elif new_value == "3":
                                if old_value == "None" or old_value == "1":
                                    create_2()
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                create_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "+++")
                        
                                try:
                                    Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                                except:
                                    pass
                                Integrator_3 = mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Sum, "in2"))
                        ENDCODE
                    }

                    R1 {
                        label = "Resistance 1"
                        widget = edit
                        type = generic
                        default_value = "R1"
                        unit = "Ω"
                    }

                    C1 {
                        label = "Capacitance 1"
                        widget = edit
                        type = generic
                        default_value = "C1"
                        unit = "F"
                    }

                    R2 {
                        label = "Resistance 2"
                        widget = edit
                        type = generic
                        default_value = "R2"
                        unit = "Ω"
                    }

                    C2 {
                        label = "Capacitance 2"
                        widget = edit
                        type = generic
                        default_value = "C2"
                        unit = "F"
                    }

                    R3 {
                        label = "Resistance 3"
                        widget = edit
                        type = generic
                        default_value = "R3"
                        unit = "Ω"
                    }

                    C3 {
                        label = "Capacitance 3"
                        widget = edit
                        type = generic
                        default_value = "C3"
                        unit = "F"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        RC_number = mdl.get_property_value(mdl.prop(item_handle, "RC_number"))
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.exception import SchApiException
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    
                        if R1 < 0:
                            raise SchApiException("R1 cannot be negative.")
                        if R2 < 0:
                            raise SchApiException("R2 cannot be negative.")
                        if R3 < 0:
                            raise SchApiException("R3 cannot be negative.")
                        if C1 < 0:
                            raise SchApiException("C1 cannot be negative.")
                        if C2 < 0:
                            raise SchApiException("C2 cannot be negative.")
                        if C3 < 0:
                            raise SchApiException("C3 cannot be negative.")
                    ENDCODE
                }
            }
            [
                position = 7672, 8096
                size = 128, 80
            ]

            component Subsystem "Series voltage drop" {
                layout = dynamic
                component gen_product Product {
                }
                [
                    position = 8224, 8176
                    hide_name = True
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8168
                ]

                port R0 {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8208
                ]

                port V_R0 {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8296, 8176
                ]

                connect Product.out V_R0 as Connection1170
                connect Product.in I as Connection1168
                connect Product.in1 R0 as Connection1169
            }
            [
                position = 7672, 8200
                size = 128, 64
            ]

            component Subsystem "Passive Balancing" {
                layout = dynamic
                component src_constant Constant_0 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8136, 8280
                ]

                port I_bal {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8208
                ]

                port I_t {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7992, 7936
                ]

                port I_cell {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8072
                ]

                connect I_t I_cell as direct_connection
                connect Constant_0.out I_bal as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Passive balancing subsystem is dynamically changed by changing the type of balancing:<br></br>1. \"None\" mode simply propagates the total input current as the cell current and 0 value for balance current.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. \"Passive balancing\" introduces a current flowing through the resistor parallel to the cell. Value of resistance is specified as a parameter and an input for terminal voltage and balancing switch is created. Balancing switch opens and closes the ideal switch connecting cell terminals to the resistor.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. \"Direct current input\" option simply subtracts the signal out of the I_in terminal from the I_t and outputs in the I_cell signal output. I_bal is therefore the signal that enters I_in terminal.</p></body></html>"

                    balancing_combo {
                        label = "Balancing mode"
                        widget = combo
                        combo_values = "None", "Passive balancing", "Direct current input"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            I_t = mdl.get_item("I_t", parent=sub_handle, item_type=ITEM_PORT)
                            I_cell = mdl.get_item("I_cell", parent=sub_handle, item_type=ITEM_PORT)
                            I_bal = mdl.get_item("I_bal", parent=sub_handle, item_type=ITEM_PORT)
                        
                            if new_value==old_value:
                                pass
                            elif new_value=="None":
                                if old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                                mdl.create_connection(start=I_t, end=I_cell, name="direct_connection")
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=I_bal, name="Connection1")
                        
                            elif new_value=="Passive balancing":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    try:
                                        mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                        mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    except:
                                        pass
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                BL_SW = mdl.create_port(name="BL_SW",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                V_term = mdl.create_port(name="V_term",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8220),)
                                R_balance_gain = mdl.create_component("core/Gain",
                                                        name="R_balance_gain",
                                                        parent=sub_handle,
                                                        position=(8135, 8200))
                                signal_switch = mdl.create_component("core/Signal switch",
                                                        name="signal_switch",
                                                        parent=sub_handle,
                                                        position=(8262, 8240))
                                unit_delay = mdl.create_component("core/Unit Delay",
                                                        name="unit_delay",
                                                        parent=sub_handle,
                                                        position=(8325, 8216))
                        
                                mdl.set_property_value(mdl.prop(signal_switch, "threshold"), 0.5)
                                mdl.set_property_value(mdl.prop(R_balance_gain, "gain"), "1/R_balance")
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                                mdl.create_connection(start=BL_SW, end=mdl.term(signal_switch, "in2"))
                                mdl.create_connection(start=V_term, end=mdl.term(R_balance_gain, "in"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in"), end=mdl.term(R_balance_gain, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in1"), end=mdl.term(Constant_0, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "out"), end=mdl.term(unit_delay, "in"))
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=mdl.term(unit_delay, "out"))
                                mdl.create_connection(start=I_bal, end=mdl.term(unit_delay, "out"))
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        
                            elif new_value=="Direct current input":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                    mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                elif old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                                I_in = mdl.create_port(name="I_in",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=I_in)
                                mdl.create_connection(start=I_bal, end=I_in)
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        ENDCODE
                    }

                    R_balance {
                        label = "Balancing Resistance"
                        widget = edit
                        type = generic
                        default_value = "R_balance"
                        unit = "Ω"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE
                }
            }
            [
                position = 7520, 8344
                size = 128, 112
            ]

            component gen_gain Cell_NO {
                gain = "1/cell_NO"
            }
            [
                position = 7408, 8312
                hide_name = True
            ]

            component gen_probe "Cell voltage" {
            }
            [
                position = 8688, 8064
            ]

            component gen_terminator Termination1 {
            }
            [
                position = 8400, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination2 {
            }
            [
                position = 8576, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination3 {
            }
            [
                position = 8400, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination4 {
            }
            [
                position = 8400, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination5 {
            }
            [
                position = 8400, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination6 {
            }
            [
                position = 8400, 8064
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination7 {
            }
            [
                position = 8576, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination8 {
            }
            [
                position = 8576, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination9 {
            }
            [
                position = 8576, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination10 {
            }
            [
                position = 8576, 8064
                rotation = down
                hide_name = True
            ]

            component Subsystem Hysteresis {
                layout = dynamic
                component gen_terminator termination_T {
                }
                [
                    position = 7968, 8280
                ]

                component gen_terminator termination_I {
                }
                [
                    position = 8080, 8440
                ]

                component gen_terminator termination_eta {
                }
                [
                    position = 7976, 8056
                ]

                component gen_c_function C_function {
                    global_variables = "real h;real h_mem;real h1;real h2;real current_sign;real efficiency;"
                    init_fnc = "/*Begin code section*/
current_sign = 1;
h_mem = 0;
efficiency = 1;
/*End code section*/"
                    input_terminals = "real current;inherit M0;inherit M;inherit gamma_param;inherit eta;inherit Q;inherit Ts;"
                    input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
if (current<0){
    current_sign = -1;
    efficiency = eta;
}
else if (current>0){
    current_sign = 1;
    efficiency = 1;
}

h = exp(-fabs(current*efficiency*gamma_param/Q*Ts))*h_mem - (1-exp(-fabs(current*efficiency*gamma_param/Q*Ts)))*current_sign;
h_mem = h;
V_h = M0*current_sign + M*h;
/*End code section*/"
                    output_terminals = "inherit V_h;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "True"
                }
                [
                    position = 8320, 8160
                    scale = 1, -1
                    size = 144, 320
                ]

                component lut_1d M0_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8072, 8240
                ]

                component lut_1d M_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 7992, 8200
                ]

                component lut_1d gamma_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8080, 8160
                ]

                component gen_terminator termination_Q {
                }
                [
                    position = 8016, 7952
                ]

                component gen_terminator termination_Ts {
                }
                [
                    position = 8248, 7952
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                    value = "Ts"
                }
                [
                    position = 8160, 8040
                ]

                component gen_terminator termination_SOC {
                }
                [
                    position = 7976, 8336
                ]

                port I {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7984, 8392
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8104
                ]

                port T {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8216
                ]

                port V_hyst {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8504, 8160
                ]

                port Q {
                    position = left:4
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7896, 8008
                ]

                port SOC {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7856, 8336
                ]

                junction Junction1 sp
                [
                    position = 7936, 8216
                ]

                junction Junction2 sp
                [
                    position = 7936, 8216
                ]

                junction Junction3 sp
                [
                    position = 7904, 8216
                ]

                junction Junction4 sp
                [
                    position = 8040, 8392
                ]

                junction Junction7 sp
                [
                    position = 8208, 8240
                ]

                junction Junction12 sp
                [
                    position = 8192, 8040
                ]

                junction Junction8 sp
                [
                    position = 8032, 8200
                ]

                junction Junction10 sp
                [
                    position = 7904, 8104
                ]

                junction Junction11 sp
                [
                    position = 7936, 8008
                ]

                connect C_function.V_h V_hyst as Connection1164
                connect M_LUT_1D.addr Junction1 as Connection1165
                connect M0_LUT_1D.addr Junction2 as Connection1168
                connect Junction2 Junction1 as Connection1169
                connect gamma_LUT_1D.addr Junction2 as Connection1170
                connect Junction1 Junction3 as Connection1171
                connect Junction3 T as Connection1172
                connect termination_T.in Junction3 as Connection1173
                connect C_function.current Junction4 as Connection1174
                [
                    position = 0, 0
                    breakpoints = 8184, 8280; 8184, 8392
                ]
                connect Junction4 I as Connection1175
                connect termination_I.in Junction4 as Connection1176
                connect gamma_LUT_1D.value C_function.gamma_param as Connection1211
                connect C_function.M0 Junction7 as Connection1192
                connect Constant1.out Junction12 as Connection1212
                connect Junction7 M0_LUT_1D.value as Connection1193
                [
                    position = 0, 0
                ]
                connect Junction12 C_function.Ts as Connection1213
                connect termination_Ts.in Junction12 as Connection1214
                connect M_LUT_1D.value Junction8 as Connection1196
                connect Junction8 C_function.M as Connection1197
                connect termination_eta.in Junction10 as Connection1203
                connect Junction10 eta as Connection1204
                [
                    position = 0, 0
                ]
                connect C_function.eta Junction10 as Connection1205
                connect Q Junction11 as Connection1207
                connect Junction11 termination_Q.in as Connection1208
                [
                    position = 0, 0
                ]
                connect C_function.Q Junction11 as Connection1209
                [
                    position = 0, 0
                    breakpoints = 8024, 8080; 8024, 8008
                ]
                connect SOC termination_SOC.in as Connection1215

                hysteresis_model = "One state"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If hysteresis implementation is \"None\", then the output is a constant 0.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For the \"One state\" implementation, output is a multivariable function referenced from: https://ieeexplore.ieee.org/document/7049363<br></br>This C-function is a function of multiple parameters, including the temperature and SOC dependant M, M0 and gamma.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For each of these parameters, if their value is entered as a constant, they are not functions of temperature and SOC.<br></br>If their value is a list, they are a function of temperature and if it is a nested list, they are a function first of temperature and then of SOC.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"Preisach model\" implementation is also a popular method of representing hysteresis, but is not currently available.<br></br></p></body></html>"

                    hysteresis_model {
                        label = "Hysteresis model"
                        widget = combo
                        combo_values = "None", "One state"
                        type = string
                        default_value = "None"
                        no_evaluate
                    }

                    T_vector {
                        label = "Temperature vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector_h"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector_h"
                    }

                    M0 {
                        label = "M0 parameter"
                        widget = edit
                        type = generic
                        default_value = "M0"
                    }

                    M {
                        label = "M parameter"
                        widget = edit
                        type = generic
                        default_value = "M"
                    }

                    gamma {
                        label = "Gamma parameter"
                        widget = edit
                        type = generic
                        default_value = "gamma"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        M0_value = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M_value = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma_value = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                    
                        if np.min(np.min(M0_value)) < 0:
                            raise SchApiException("M0 parameter cannot be negative for any point.")
                        if np.min(np.min(M_value)) < 0:
                            raise SchApiException("M parameter cannot be negative for any point.")
                        if np.min(np.min(gamma_value)) < 0:
                            raise SchApiException("Gamma parameter cannot be negative for any point.")
                    
                        port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                        port_V_hyst = mdl.get_item("V_hyst", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        C_function = mdl.get_item("C_function", parent=sub_handle, item_type=ITEM_COMPONENT)
                        gamma_LUT_1D = mdl.get_item("gamma_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M_LUT_1D = mdl.get_item("M_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M0_LUT_1D = mdl.get_item("M0_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if hysteresis_model == "None":
                            mdl.delete_item(mdl.get_item("Connection1164", parent=sub_handle, item_type=ITEM_CONNECTION))
                            Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                            # replace output voltage with 0
                            mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V_hyst)
                            mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), execution_rate)
                            mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        else:
                            # M_value
                            if np.ndim(M_value) == 0:
                                mdl.delete_item(M_LUT_1D)
                                Constant_M = mdl.create_component("core/Constant",
                                                        name="Constant_M",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M, "value"), M_value)
                                mdl.set_property_value(mdl.prop(Constant_M, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M, "out"), end=mdl.term(C_function, "M"))
                    
                            elif np.ndim(M_value) == 1:
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "out_vec_f_x"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M_value) == 2:
                                M_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "value"), end=mdl.term(C_function, "M"))
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "out_vec_f_xy"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M_value.")
                    
                            # M0_value
                            if np.ndim(M0_value) == 0:
                                mdl.delete_item(M0_LUT_1D)
                                Constant_M0 = mdl.create_component("core/Constant",
                                                        name="Constant_M0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M0, "value"), M0_value)
                                mdl.set_property_value(mdl.prop(Constant_M0, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M0, "out"), end=mdl.term(C_function, "M0"))
                    
                            elif np.ndim(M0_value) == 1:
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "out_vec_f_x"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M0_value) == 2:
                                M0_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M0_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M0_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "value"), end=mdl.term(C_function, "M0"))
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "out_vec_f_xy"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M0_value.")
                    
                            # gamma_value
                            if np.ndim(gamma_value) == 0:
                                mdl.delete_item(gamma_LUT_1D)
                                Constant_gamma = mdl.create_component("core/Constant",
                                                        name="Constant_gamma",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_gamma, "value"), gamma_value)
                                mdl.set_property_value(mdl.prop(Constant_gamma, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_gamma, "out"), end=mdl.term(C_function, "gamma_param"))
                    
                            elif np.ndim(gamma_value) == 1:
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "out_vec_f_x"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(gamma_value) == 2:
                                gamma_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="gamma_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(gamma_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "value"), end=mdl.term(C_function, "gamma_param"))
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "out_vec_f_xy"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for gamma value.")
                    ENDCODE
                }
            }
            [
                position = 7672, 7944
                size = 128, 160
            ]

            component sys_signal_switch "Signal switch1" {
            }
            [
                position = 8096, 8368
            ]

            component src_scada_input "Vcell Value Set" {
                execution_rate = "Ts"
                min = "0"
                unit = ""
            }
            [
                position = 8016, 8304
            ]

            component src_scada_input "Vcell Override" {
                execution_rate = "Ts"
                format = "int"
                max = "1"
                min = "0"
                signal_type = "int"
                unit = ""
            }
            [
                position = 8016, 8248
            ]

            component gen_probe SOC {
            }
            [
                position = 8488, 7824
            ]

            port P {
                position = top center
                kind = pe
            }
            [
                position = 8528, 8336
                rotation = down
                hide_name = True
            ]

            port N {
                position = bottom center
                kind = pe
            }
            [
                position = 8528, 8424
                rotation = down
                hide_name = True
            ]

            port T {
                position = -16.0, -8.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7128, 7904
                hide_name = True
            ]

            tag From1 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8056
                hide_name = True
                size = 60, 20
            ]

            tag Goto3 {
                value = "T"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7368, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From6 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From7 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From10 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8216
                hide_name = True
                size = 60, 20
            ]

            tag From11 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7856, 8360
                hide_name = True
                size = 60, 20
            ]

            tag Goto6 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8200
                hide_name = True
                size = 60, 20
            ]

            tag From12 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7840, 8392
                hide_name = True
                size = 60, 20
            ]

            tag From13 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8408
                hide_name = True
                size = 60, 20
            ]

            tag Goto19 {
                value = "Q"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7816
                hide_name = True
                size = 60, 20
            ]

            tag From32 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From16 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8184
                hide_name = True
                size = 60, 20
            ]

            tag Goto10 {
                value = "R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7896
                hide_name = True
                size = 60, 20
            ]

            tag Goto11 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8376
                hide_name = True
                size = 60, 20
            ]

            tag Goto12 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7944
                hide_name = True
                size = 60, 20
            ]

            tag Goto13 {
                value = "OCV"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7816
                hide_name = True
                size = 60, 20
            ]

            tag Goto14 {
                value = "I_t"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8496, 8288
                hide_name = True
                size = 60, 20
            ]

            tag Goto16 {
                value = "V_term"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8176, 8368
                hide_name = True
                size = 60, 20
            ]

            tag From20 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8256, 8384
                hide_name = True
                size = 60, 20
            ]

            tag From22 {
                value = "I_t"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7344, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto2 {
                value = "SOH"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7344, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From34 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From35 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7888
                hide_name = True
                size = 60, 20
            ]

            tag Goto20 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7984
                hide_name = True
                size = 60, 20
            ]

            tag From36 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From37 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7976
                hide_name = True
                size = 60, 20
            ]

            tag From38 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8088
                hide_name = True
                size = 60, 20
            ]

            tag From39 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7488, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From40 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From15 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto9 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto21 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto22 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8376
                hide_name = True
                size = 60, 20
            ]

            tag From33 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From23 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From24 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From25 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From26 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From27 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From28 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From29 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From30 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From43 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From5 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7944
                hide_name = True
                size = 60, 20
            ]

            tag From42 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7920
                hide_name = True
                size = 60, 20
            ]

            tag From44 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From45 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7896
                hide_name = True
                size = 60, 20
            ]

            tag From46 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7968
                hide_name = True
                size = 60, 20
            ]

            junction Junction12 sp
            [
                position = 8632, 8032
            ]

            comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Measurements *****</p></body></html> ENDCOMMENT 
            [
                position = 8440, 7704
            ]

            comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Battery Effects *****  </p></body></html> ENDCOMMENT 
            [
                position = 7752, 7720
            ]

            comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** ECM and Passive Balancing *****  </p></body></html> ENDCOMMENT 
            [
                position = 7848, 8192
            ]

            connect From1 "SOC Model.I" as Connection1062
            connect Vt.p_node It.p_node as Connection42
            connect It.n_node P as Connection1129
            connect Vt.n_node N as Connection1130
            connect From32 "SOC Model.Q" as Connection1135
            connect From11 Sum3.in as Connection1091
            connect From18 Sum3.in1 as Connection1095
            connect Goto14 It.out as Connection1102
            connect From20 Vt.in as Connection1109
            connect Goto11 "SOC Model.SOC_pu" as Connection1119
            connect Goto2 SOH_set.out as Connection1063
            connect Capacity.SOH From6 as Connection1144
            connect Capacity.T From7 as Connection1145
            connect From35 "Internal Resistance.T" as Connection1147
            connect From34 "Internal Resistance.SOH" as Connection1148
            connect Goto10 "Internal Resistance.R" as Connection1149
            connect From37 "Coulombic efficiency.T" as Connection1150
            connect From36 "Coulombic efficiency.SOH" as Connection1151
            connect Goto20 "Coulombic efficiency.eta" as Connection1152
            connect From38 "SOC Model.eta" as Connection1153
            connect "Open Circuit Voltage.SOC" From39 as Connection1154
            connect "Open Circuit Voltage.T" From40 as Connection1155
            connect Goto13 "Open Circuit Voltage.OCV" as Connection1162
            connect Goto9 "Parallel RC.V" as Connection1141
            connect From15 "Parallel RC.I" as Connection1077
            connect Goto6 "Series voltage drop.V_R0" as Connection1169
            connect From10 "Series voltage drop.R0" as Connection1168
            connect From16 "Series voltage drop.I" as Connection1167
            connect Sum3.in3 From13 as Connection1175
            connect From12 Sum3.in2 as Connection1179
            connect Goto21 "Passive Balancing.I_bal" as Connection1173
            connect Capacity.Q Goto19 as Connection1181
            connect From22 Cell_NO.in as Connection1182
            connect Cell_NO.out "Passive Balancing.I_t" as Connection1183
            connect Goto22 "Passive Balancing.I_cell" as Connection1184
            connect From25 Junction12 as Connection1212
            connect Junction12 "Cell voltage.in" as Connection1213
            connect Termination10.in Junction12 as Connection1214
            connect From26 Termination5.in as Connection1222
            connect From28 Termination6.in as Connection1220
            connect Termination4.in From24 as Connection1221
            connect Termination8.in From29 as Connection1218
            connect Termination2.in From27 as Connection1223
            connect From23 Termination3.in as Connection1215
            connect Termination7.in From33 as Connection1219
            connect Termination9.in From43 as Connection1216
            connect Termination1.in From30 as Connection1217
            connect Hysteresis.T From5 as Connection1158
            connect Hysteresis.I From42 as Connection1159
            connect From44 Hysteresis.Q as Connection1233
            connect From45 Hysteresis.eta as Connection1234
            connect Goto12 Hysteresis.V_hyst as Connection1235
            connect From46 Hysteresis.SOC as Connection1245
            connect T Goto3 as Connection1131
            connect "Signal switch1.in1" Sum3.out as Connection1246
            connect Goto16 "Signal switch1.out" as Connection1247
            connect "Vcell Value Set.out" "Signal switch1.in" as Connection1248
            connect "Vcell Override.out" "Signal switch1.in2" as Connection1249
            connect SOC.in Termination3.in as Connection1251

            Q_total = "total_Q"
            Ts = "Ts"
            meas_Ibal = "False"
            meas_Icell = "False"
            meas_OCV = "False"
            meas_Q = "False"
            meas_Rint = "False"
            meas_SOH = "False"
            meas_T = "False"
            meas_hyst = "False"

            mask {
                description = "This component represents the \"Enhanced self correcting\" battery cell model. It is a state-of-the-art electrical representation of the physical processes naturally ocurring inside the battery cell. Many parameters can be set as either constants or functions of temperature, state of charge, or state of health. Parallel cells are modelled simply by distributing the input current across the number of cells entered in the parameter input. <br></br>This component is simulated at the signal processing time step, entered in this component as the Execution rate parameter.<br></br><br></br>For more information regarding implementation and parametrization, please refer to the documentation."
                help_file = "battery_cell.html"

                SOC_vector {
                    label = "State of charge vector"
                    widget = edit
                    type = generic
                    default_value = "[0.00000, 0.00500, 0.01000, 0.01500, 0.02000, 0.02500, 0.03000, 0.03500, 0.04000, 0.04500, 0.05000, 0.05500, 0.06000, 0.06500, 0.07000, 0.07500, 0.08000, 0.08500, 0.09000, 0.09500, 0.10000, 0.10500, 0.11000, 0.11500, 0.12000, 0.12500, 0.13000, 0.13500, 0.14000, 0.14500, 0.15000, 0.15500, 0.16000, 0.16500, 0.17000, 0.17500, 0.18000, 0.18500, 0.19000, 0.19500, 0.20000, 0.20500, 0.21000, 0.21500, 0.22000, 0.22500, 0.23000, 0.23500, 0.24000, 0.24500, 0.25000, 0.25500, 0.26000, 0.26500, 0.27000, 0.27500, 0.28000, 0.28500, 0.29000, 0.29500, 0.30000, 0.30500, 0.31000, 0.31500, 0.32000, 0.32500, 0.33000, 0.33500, 0.34000, 0.34500, 0.35000, 0.35500, 0.36000, 0.36500, 0.37000, 0.37500, 0.38000, 0.38500, 0.39000, 0.39500, 0.40000, 0.40500, 0.41000, 0.41500, 0.42000, 0.42500, 0.43000, 0.43500, 0.44000, 0.44500, 0.45000, 0.45500, 0.46000, 0.46500, 0.47000, 0.47500, 0.48000, 0.48500, 0.49000, 0.49500, 0.50000, 0.50500, 0.51000, 0.51500, 0.52000, 0.52500, 0.53000, 0.53500, 0.54000, 0.54500, 0.55000, 0.55500, 0.56000, 0.56500, 0.57000, 0.57500, 0.58000, 0.58500, 0.59000, 0.59500, 0.60000, 0.60500, 0.61000, 0.61500, 0.62000, 0.62500, 0.63000, 0.63500, 0.64000, 0.64500, 0.65000, 0.65500, 0.66000, 0.66500, 0.67000, 0.67500, 0.68000, 0.68500, 0.69000, 0.69500, 0.70000, 0.70500, 0.71000, 0.71500, 0.72000, 0.72500, 0.73000, 0.73500, 0.74000, 0.74500, 0.75000, 0.75500, 0.76000, 0.76500, 0.77000, 0.77500, 0.78000, 0.78500, 0.79000, 0.79500, 0.80000, 0.80500, 0.81000, 0.81500, 0.82000, 0.82500, 0.83000, 0.83500, 0.84000, 0.84500, 0.85000, 0.85500, 0.86000, 0.86500, 0.87000, 0.87500, 0.88000, 0.88500, 0.89000, 0.89500, 0.90000, 0.90500, 0.91000, 0.91500, 0.92000, 0.92500, 0.93000, 0.93500, 0.94000, 0.94500, 0.95000, 0.95500, 0.96000, 0.96500, 0.97000, 0.97500, 0.98000, 0.98500, 0.99000, 0.99500, 1.00000]"
                    unit = "p.u."
                    group = "Basic parameters:1"
                }

                Init_SOC {
                    label = "Initial state of charge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                    group = "Basic parameters"
                }

                SOH_vector {
                    label = "State of health vector"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Basic parameters"
                }

                T_vector {
                    label = "Temperatures vector"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    group = "Basic parameters"
                }

                OCV {
                    label = "Open circuit voltage"
                    widget = edit
                    type = generic
                    default_value = "[[ 2.81376455, 2.934249, 3.01131295, 3.0707406, 3.12232055, 3.1679386999999997, 3.20864785, 3.2450991, 3.27819715, 3.30856405, 3.3362725999999996, 3.3618633499999997, 3.38570235, 3.40775795, 3.42830425, 3.4476403500000004, 3.4655972, 3.48235125, 3.4982734000000004, 3.5123286499999997, 3.52428065, 3.5322503000000003, 3.536190725, 3.538614355, 3.5410027349999997, 3.543410505, 3.54570155, 3.548176695, 3.55074616, 3.55332738, 3.5560948150000002, 3.5590690300000003, 3.5622155269999998, 3.5656399850000002, 3.569116135, 3.5732180099999997, 3.57727722, 3.5820934199999996, 3.58702369, 3.5923769, 3.5981162299999996, 3.60387865, 3.6098619999999997, 3.61578425, 3.6219618000000002, 3.6279250050000003, 3.633843695, 3.6400532699999997, 3.646100845, 3.6525218749999997, 3.659006475, 3.6658932699999998, 3.6723717, 3.67845187, 3.6843657899999998, 3.690319095, 3.696598375, 3.70317101, 3.7103087649999997, 3.71751191, 3.72478503, 3.7312556949999998, 3.737126875, 3.7421215, 3.746753425, 3.7512470799999997, 3.7557191, 3.759948005, 3.7641692570000003, 3.7683243400000004, 3.77226982, 3.776130865, 3.77996065, 3.7834905, 3.78724775, 3.79068595, 3.79405435, 3.79739885, 3.8008169, 3.8037784, 3.80672915, 3.80976375, 3.81294495, 3.8155956, 3.81841755, 3.8211345, 3.82375915, 3.826463, 3.8289732, 3.83148675, 3.8339139, 3.8364958500000004, 3.8389766, 3.84130125, 3.8436186, 3.84593155, 3.8484112, 3.8508698999999997, 3.853017, 3.8553768, 3.8575925, 3.8597776, 3.8618757, 3.8639596, 3.8662289, 3.8684966, 3.8704239, 3.8727584, 3.8746679, 3.8767636000000003, 3.8789283, 3.88108645, 3.88336145, 3.88554035, 3.8876272999999997, 3.88979185, 3.8919731499999997, 3.89423455, 3.89660415, 3.89878675, 3.9010609, 3.9034554999999997, 3.9058273, 3.9083077999999998, 3.9107870499999997, 3.9134431, 3.91605185, 3.9188395000000003, 3.92173155, 3.9245562, 3.9278719, 3.93123635, 3.93501795, 3.9392118, 3.9434215, 3.9476625, 3.9522793, 3.956863, 3.9614228, 3.9661213500000003, 3.97056845, 3.97496085, 3.97923145, 3.98304985, 3.9867527999999997, 3.990355, 3.9938599000000004, 3.997107, 4.0001812, 4.0032136000000005, 4.0059932, 4.0087594499999994, 4.011432500000001, 4.0139152, 4.0163138, 4.0185217, 4.02070895, 4.022900900000001, 4.0249913, 4.0268188, 4.02872455, 4.03070295, 4.0323274, 4.0341031, 4.03572435, 4.0374238, 4.03904715, 4.0406617, 4.0421721999999995, 4.04385255, 4.04555215, 4.0469809, 4.048781399999999, 4.05039585, 4.052104, 4.05390415, 4.0557043, 4.057513849999999, 4.0593374, 4.0614338, 4.0635322, 4.0657283, 4.0680112, 4.0704244, 4.07274935, 4.075507399999999, 4.0782211, 4.0812930000000005, 4.08431865, 4.08759685, 4.0910807, 4.0947777499999995, 4.0989474, 4.10329865, 4.10799, 4.1129271, 4.1185746, 4.1244995, 4.1311105999999995, 4.138731625, 4.14890576], [2.8100227500000003, 2.916445, 2.99576475, 3.057303, 3.11000275, 3.1564935, 3.19803925, 3.2350955, 3.26858575, 3.2992202500000003, 3.3273629999999996, 3.35331675, 3.37731175, 3.39958975, 3.4203212499999998, 3.4398017500000004, 3.457986, 3.47495625, 3.4909670000000004, 3.50564325, 3.51860325, 3.5288515, 3.535353625, 3.539071775, 3.5418136749999998, 3.544252525, 3.54650775, 3.5488834750000002, 3.5513308, 3.5538369, 3.556474075, 3.55934515, 3.5622776349999996, 3.565399925, 3.5687806749999997, 3.57249005, 3.5763861, 3.5808671, 3.5855184500000004, 3.5906845, 3.5961811499999996, 3.60179325, 3.60771, 3.6137212499999998, 3.619809, 3.626025025, 3.632018475, 3.63826635, 3.644504225, 3.6510093749999997, 3.657832375, 3.66466635, 3.6710585, 3.67705935, 3.6830289499999997, 3.689195475, 3.6957918750000003, 3.70265505, 3.709943825, 3.71715955, 3.72392515, 3.729878475, 3.735234375, 3.7402075, 3.744967125, 3.7498354, 3.7545954999999998, 3.759340025, 3.764046285, 3.7688217, 3.7733491, 3.777854325, 3.78220325, 3.7862525, 3.7902387500000003, 3.79382975, 3.79747175, 3.80099425, 3.8044845, 3.807692, 3.81084575, 3.81401875, 3.81712475, 3.819978, 3.82288775, 3.8256725, 3.82839575, 3.831115, 3.833666, 3.83623375, 3.8387695, 3.8412792500000004, 3.843683, 3.84610625, 3.848493, 3.85085775, 3.853256, 3.8555495, 3.857885, 3.860084, 3.8623624999999997, 3.864488, 3.8665785, 3.868598, 3.8707445, 3.872883, 3.8749195, 3.876992, 3.8789395, 3.881018, 3.8830415, 3.88503225, 3.88720725, 3.88930175, 3.8913365, 3.89335925, 3.8954657499999996, 3.89757275, 3.89982075, 3.90193375, 3.9041045000000003, 3.9064775, 3.9087365, 3.911139, 3.91353525, 3.9160155, 3.91865925, 3.9213975000000003, 3.92425775, 3.927181, 3.9305595, 3.93418175, 3.93828975, 3.942859, 3.9479075, 3.9531125, 3.9585965, 3.9639149999999996, 3.968714, 3.97340675, 3.9776422499999997, 3.98160425, 3.98535725, 3.98884925, 3.992164, 3.995375, 3.9984995000000003, 4.001535, 4.004506, 4.007268, 4.0099659999999995, 4.01259725, 4.015162500000001, 4.017576, 4.019969, 4.0222085, 4.02434475, 4.026504500000001, 4.0285565, 4.030494, 4.03242275, 4.03431475, 4.036036999999999, 4.0377155, 4.03942175, 4.041119, 4.04283575, 4.0445085, 4.046061, 4.047662750000001, 4.04936075, 4.050904500000001, 4.052707, 4.05437925, 4.05612, 4.05792075, 4.0597215, 4.06156925, 4.063487, 4.065569, 4.067661, 4.0698415, 4.072056, 4.074522, 4.07694675, 4.079536999999999, 4.0823055, 4.085265000000001, 4.08839325, 4.0915842499999995, 4.0950035, 4.09868875, 4.102737, 4.106893250000001, 4.11155, 4.1162355, 4.1216729999999995, 4.1272975, 4.133553, 4.140458125, 4.149328799999999], [2.80628095, 2.898641, 2.98021655, 3.0438654, 3.09768495, 3.1450483, 3.18743065, 3.2250919, 3.2589743500000004, 3.2898764500000004, 3.3184533999999997, 3.34477015, 3.36892115, 3.39142155, 3.41233825, 3.43196315, 3.4503747999999996, 3.46756125, 3.4836606000000003, 3.4989578499999996, 3.5129258500000002, 3.5254527, 3.534516525, 3.539529195, 3.542624615, 3.545094545, 3.54731395, 3.549590255, 3.55191544, 3.55434642, 3.556853335, 3.55962127, 3.562339743, 3.565159865, 3.568445215, 3.57176209, 3.57549498, 3.5796407799999996, 3.58401321, 3.5889921, 3.5942460699999996, 3.59970785, 3.605558, 3.6116582499999996, 3.6176562, 3.624125045, 3.630193255, 3.63647943, 3.642907605, 3.6494968749999996, 3.656658275, 3.66343943, 3.6697452999999998, 3.67566683, 3.6816921099999997, 3.688071855, 3.694985375, 3.70213909, 3.709578885, 3.71680719, 3.72306527, 3.728501255, 3.7333418750000003, 3.7382934999999997, 3.743180825, 3.74842372, 3.7534718999999996, 3.758732045, 3.7639233130000003, 3.7693190600000004, 3.77442838, 3.779577785, 3.78444585, 3.7890145, 3.79322975, 3.7969735499999997, 3.80088915, 3.80458965, 3.8081521, 3.8116056, 3.81496235, 3.81827375, 3.8213045500000002, 3.8243603999999998, 3.82735795, 3.8302104999999997, 3.83303235, 3.8357669999999997, 3.8383588, 3.84098075, 3.8436251, 3.8460626500000004, 3.8483894000000003, 3.8509112500000002, 3.8533674, 3.85578395, 3.8581008, 3.8602290999999997, 3.862753, 3.8647912, 3.8671325, 3.8691984, 3.8712813, 3.8732364, 3.8752600999999998, 3.8772694, 3.8794151, 3.8812256, 3.8832111, 3.8852724000000003, 3.8871547, 3.88897805, 3.89105305, 3.8930631499999997, 3.8950457, 3.89692665, 3.8989583499999996, 3.90091095, 3.90303735, 3.90508075, 3.9071481, 3.9094995, 3.9116457000000002, 3.9139702, 3.91628345, 3.9185879, 3.92126665, 3.9239555, 3.92678395, 3.9298058, 3.9332471, 3.93712715, 3.9415615500000003, 3.9465062, 3.9523935, 3.9585624999999998, 3.9649137, 3.970967, 3.9760052, 3.9806921500000003, 3.98471605, 3.98824765, 3.99148305, 3.99464865, 3.9975752, 4.000395, 4.0031391, 4.005963, 4.0088308, 4.0113224, 4.0139388, 4.016435049999999, 4.018892500000001, 4.0212368, 4.0236241999999995, 4.0258953, 4.02798055, 4.0301081000000005, 4.032121699999999, 4.0341692, 4.03612095, 4.03792655, 4.0397466, 4.0413279, 4.04311915, 4.0448142, 4.04662435, 4.0483553, 4.0499498, 4.05147295, 4.05316935, 4.0548281, 4.0566325999999995, 4.05836265, 4.060136, 4.06193735, 4.0637387, 4.06562465, 4.0676366, 4.069704199999999, 4.0717898, 4.0739547, 4.0761008, 4.0786196, 4.08114415, 4.083566599999999, 4.0863899, 4.089237000000001, 4.09246785, 4.09557165, 4.0989263, 4.1025997499999995, 4.1065266, 4.11048785, 4.11511, 4.1195439, 4.1247714, 4.1300955, 4.1359954, 4.1421846250000005, 4.1497518399999995]]"
                    unit = "V"
                    group = "Basic parameters"
                }

                R0 {
                    label = "Internal resistance"
                    widget = edit
                    type = generic
                    default_value = "[4.6198e-3, 1.7810e-3, 1.1351e-3]"
                    unit = "Ω"
                    group = "Basic parameters"
                }

                eta {
                    label = "Coulombic efficiency"
                    widget = edit
                    type = generic
                    default_value = "[0.98174, 0.99102, 0.98965]"
                    group = "Basic parameters"
                }

                cell_NO {
                    label = "Number of cells in parallel"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Basic parameters"
                }

                nom_Q_combo {
                    label = "Nominal capacity"
                    widget = combo
                    combo_values = "Total capacity", "Discharge capacity"
                    type = string
                    default_value = "Total capacity"
                    group = "Basic parameters"
                    no_evaluate

                    CODE property_value_edited
                        if new_value=="Total capacity":
                            mdl.enable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.disable_property(mdl.prop(container_handle, "V_min"))
                            mdl.disable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_discharge"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.enable_property(mdl.prop(container_handle, "V_min"))
                            mdl.enable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_discharge"))
                    ENDCODE
                }

                Q_discharge {
                    label = "Discharge capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                    disabled
                }

                V_min {
                    label = "Minimum/cut-off voltage"
                    widget = edit
                    type = generic
                    default_value = "2.81"
                    unit = "V"
                    group = "Basic parameters"
                    disabled
                }

                I_dis {
                    label = "Discharge rate"
                    widget = edit
                    type = generic
                    default_value = "15"
                    unit = "A"
                    group = "Basic parameters"
                    disabled
                }

                Q_total {
                    label = "Total capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                }

                Ts {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "s"
                    group = "Basic parameters"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Basic parameters"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "basic_parameters")
                    ENDCODE
                }

                RC_NO {
                    label = "Model order"
                    widget = combo
                    combo_values = "None", "1", "2", "3"
                    type = string
                    default_value = "1"
                    group = "Diffusion process:3"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        parallel_rc = mdl.get_item("Parallel RC", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        mdl.set_property_value(mdl.prop(parallel_rc, "RC_number"), new_value)
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.disable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="1":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="2":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="3":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.enable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.enable_property(mdl.prop(container_handle, "C3"))
                    ENDCODE
                }

                R1 {
                    label = "Resistor 1"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                }

                C1 {
                    label = "Capacitor 1"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                }

                R2 {
                    label = "Resistor 2"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C2 {
                    label = "Capacitor 2"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                R3 {
                    label = "Resistor 3"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C3 {
                    label = "Capacitor 3"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                H_type {
                    label = "Hysteresis model"
                    widget = combo
                    combo_values = "None", "One state"
                    type = string
                    default_value = "One state"
                    group = "Voltage hysteresis:4"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        Hysteresis = mdl.get_item("Hysteresis", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if new_value=="None":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "None")
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        if new_value=="One state":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "One state")
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    ENDCODE
                }

                T_vector_h {
                    label = "Temperatures vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    unit = "celsius"
                    group = "Voltage hysteresis"
                }

                SOC_vector_h {
                    label = "State of charge vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Voltage hysteresis"
                }

                M0 {
                    label = "M0 parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.0031315, 0.0023535, 0.0011502]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                M {
                    label = "M parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.039929, 0.020018, 0.020545]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                gamma {
                    label = "Gamma parameter"
                    widget = edit
                    type = generic
                    default_value = "[67.207e-3, 92.645e-3, 67.840e-3]"
                    group = "Voltage hysteresis"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Voltage hysteresis"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "voltage_hysteresis")
                    
                    ENDCODE
                }

                balancing {
                    label = "Balancing circuit"
                    widget = combo
                    combo_values = "None", "Passive", "Direct current input"
                    type = string
                    default_value = "None"
                    group = "Balancing circuit:5"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION, ITEM_TAG
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        passive_balancing_subsystem = mdl.get_item("Passive Balancing", parent=sub_handle, item_type=ITEM_COMPONENT)
                        Sum3 = mdl.get_item("Sum3", parent=sub_handle, item_type=ITEM_COMPONENT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        Goto3 = mdl.get_item("Goto3", parent=sub_handle, item_type=ITEM_TAG)
                    
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            try:
                                mdl.delete_item(mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT))
                            except:
                                pass
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "None")
                            try:
                                mdl.create_connection(start=port_T, end=Goto3, name = "Connection1131")
                            except:
                                pass
                        elif new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Passive balancing")
                            if old_value=="Direct current input":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:  #elif old_value=="None":
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                    
                            mdl.create_connection(start=mdl.term(passive_balancing_subsystem, "BL_SW"), end=mdl.term(bus_split, "out1"))
                            mdl.create_connection(start=mdl.term(Sum3, "out"), end=mdl.term(passive_balancing_subsystem, "V_term"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Direct current input")
                            if old_value=="Passive":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                            mdl.create_connection(start=mdl.term(bus_split, "out1"), end=mdl.term(passive_balancing_subsystem, "I_in"))
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                    ENDCODE
                }

                R_balance {
                    label = "Balancing parallel resistor"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "Ω"
                    group = "Balancing circuit"
                    disabled
                }

                meas_SOH {
                    label = "State of health"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements:6"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOH = mdl.create_component("core/Probe",
                                                        name="SOH",
                                                        parent=sub_handle,
                                                        position=(8488, 7760),)
                            Termination1 = mdl.get_item("Termination1", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOH, "in"), end=mdl.term(Termination1, "in"))
                    
                        else:
                            if mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_SOC {
                    label = "State of charge"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOC = mdl.create_component("core/Probe",
                                                        name="SOC",
                                                        parent=sub_handle,
                                                        position=(8488, 7824),)
                            Termination3 = mdl.get_item("Termination3", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOC, "in"), end=mdl.term(Termination3, "in"))
                    
                        else:
                            if mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_OCV {
                    label = "Open circuit voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            OCV = mdl.create_component("core/Probe",
                                                        name="OCV",
                                                        parent=sub_handle,
                                                        position=(8488, 7888),)
                            Termination4 = mdl.get_item("Termination4", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(OCV, "in"), end=mdl.term(Termination4, "in"))
                    
                        else:
                            if mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Rint {
                    label = "Internal resistance"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Internal_resistance = mdl.create_component("core/Probe",
                                                        name="Internal resistance",
                                                        parent=sub_handle,
                                                        position=(8488, 7952),)
                            Termination5 = mdl.get_item("Termination5", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Internal_resistance, "in"), end=mdl.term(Termination5, "in"))
                    
                        else:
                            if mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Q {
                    label = "Total capacity"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Total_capacity = mdl.create_component("core/Probe",
                                                        name="Total capacity",
                                                        parent=sub_handle,
                                                        position=(8488, 8016),)
                            Termination6 = mdl.get_item("Termination6", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Total_capacity, "in"), end=mdl.term(Termination6, "in"))
                    
                        else:
                            if mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Ibal {
                    label = "Balancing current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            current = mdl.create_component("core/Probe",
                                                        name="Balancing current",
                                                        parent=sub_handle,
                                                        position=(8688, 7760),)
                            Termination2 = mdl.get_item("Termination2", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(current, "in"), end=mdl.term(Termination2, "in"))
                    
                        else:
                            if mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Icell {
                    label = "Cell current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Cell_current = mdl.create_component("core/Probe",
                                                        name="Cell current",
                                                        parent=sub_handle,
                                                        position=(8688, 7824),)
                            Termination7 = mdl.get_item("Termination7", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Cell_current, "in"), end=mdl.term(Termination7, "in"))
                    
                        else:
                            if mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_T {
                    label = "Temperature"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Temperature = mdl.create_component("core/Probe",
                                                        name="Temperature",
                                                        parent=sub_handle,
                                                        position=(8688, 7888),)
                            Termination8 = mdl.get_item("Termination8", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Temperature, "in"), end=mdl.term(Termination8, "in"))
                    
                        else:
                            if mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_hyst {
                    label = "Hysteresis voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            voltage = mdl.create_component("core/Probe",
                                                        name="Hysteresis voltage",
                                                        parent=sub_handle,
                                                        position=(8688, 7952),)
                            Termination9 = mdl.get_item("Termination9", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(voltage, "in"), end=mdl.term(Termination9, "in"))
                    
                        else:
                            if mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    Init_SOC = mdl.get_property_value(mdl.prop(item_handle, "Init_SOC"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                    cell_NO = mdl.get_property_value(mdl.prop(item_handle, "cell_NO"))
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                    C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                    R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                    C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                    R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                    C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    T_vector_h = mdl.get_property_value(mdl.prop(item_handle, "T_vector_h"))
                    SOC_vector_h = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector_h"))
                    M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                    M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                    gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                    balancing = mdl.get_property_value(mdl.prop(item_handle, "balancing"))
                    R_balance = mdl.get_property_value(mdl.prop(item_handle, "R_balance"))
                    meas_SOH = mdl.get_property_value(mdl.prop(item_handle, "meas_SOH"))
                    meas_SOC = mdl.get_property_value(mdl.prop(item_handle, "meas_SOC"))
                    meas_OCV = mdl.get_property_value(mdl.prop(item_handle, "meas_OCV"))
                    meas_Rint = mdl.get_property_value(mdl.prop(item_handle, "meas_Rint"))
                    meas_Q = mdl.get_property_value(mdl.prop(item_handle, "meas_Q"))
                    meas_Ibal = mdl.get_property_value(mdl.prop(item_handle, "meas_Ibal"))
                    meas_Icell = mdl.get_property_value(mdl.prop(item_handle, "meas_Icell"))
                    meas_T = mdl.get_property_value(mdl.prop(item_handle, "meas_T"))
                    meas_hyst = mdl.get_property_value(mdl.prop(item_handle, "meas_hyst"))
                    # HEADER STOP
                    # Entire code here is for calculating Q_total from Q_discharge
                    from typhoon.api.schematic_editor.exception import SchApiException
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    import scipy.interpolate as interpolate
                
                    sub_handle = mdl.get_sub_level_handle(item_handle)
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    capacity_module = mdl.get_item("Capacity", parent=sub_handle, item_type=ITEM_COMPONENT)
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                
                    if nom_Q_combo == "Total capacity":
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_total)
                
                    elif nom_Q_combo == "Discharge capacity":
                        # Finding the voltage drops: V_RC_max
                        if RC_NO == "None":
                            RC_drop = 0
                        elif RC_NO == "1":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            RC_drop = R1*I_dis
                        elif RC_NO == "2":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            RC_drop = (R1+R2)*I_dis
                        elif RC_NO == "3":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                            RC_drop = (R1+R2+R3)*I_dis
                
                        # Finding the voltage drops: V_hyst_max
                        if H_type == "None":
                            H_drop = 0
                        elif H_type == "One state":
                            M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                            M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                            H_drop = np.mean(M) + np.mean(M0)
                
                        if np.ndim(Q_discharge) == 0:
                            if np.ndim(R0) == 0:
                                OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    # This is a bad cornercase where OCV is a function of temperature,
                                    # but neither R0 nor Q_discharge are. We take last temperature dependant OCV
                                    SOC_from_OCV = interpolate.interp1d(OCV[-1], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 1:
                                Q_max = [0]*len(R0)
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 2:
                                Q_max = [0]*len(R0[-1])
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 1:
                            Q_max = Q_discharge.copy()
                            for index, temp in enumerate(T_vector):
                                if np.ndim(R0) == 0:
                                    OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 1:
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 2:
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    # [-1] index is used to find the last of the SOH vector
                
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max[index] = Q_discharge[index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 2:
                            Q_max = Q_discharge.copy()
                            for health_index in range(len(SOH_vector)):
                                for index, temp in enumerate(T_vector):
                                    if np.ndim(R0) == 0:
                                        OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 1:
                                        OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 2:
                                        OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                        # [-1] index is used to find the last of the SOH vector
                
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[health_index][index] = Q_discharge[health_index][index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_max)
                        if np.min(np.min(Q_max))<0:
                            info(f"{Q_max=}")
                            raise SchApiException("Provided discharge data is not valid")
                ENDCODE

                CODE define_icon
                    image('battery_cell.svg')
                ENDCODE
            }
        }
        [
            position = 8664, 8368
            size = 32, 64
        ]

        component "core/Current Measurement" current_2 {
            execution_rate = "Ts"
            sig_output = "True"
        }
        [
            position = 8744, 8320
            rotation = down
            scale = 1, -1
            size = 64, 32
        ]

        component gen_integrator Integrator3 {
        }
        [
            position = 8936, 8144
            hide_name = True
        ]

        component gen_probe chgAh_2 {
        }
        [
            position = 9032, 8144
        ]

        component gen_integrator Integrator4 {
        }
        [
            position = 8936, 8208
            hide_name = True
        ]

        component gen_probe disAh_2 {
        }
        [
            position = 9032, 8208
        ]

        component gen_c_function "C function4" {
            input_terminals = "real current;"
            input_terminals_dimensions = "inherit"
            input_terminals_feedthrough = "True"
            input_terminals_show_labels = "False"
            output_fnc = "/*Begin code section*/
if (current>0) {
    out = current;
    out2 = 0;
}
else if (current<0) {
    out2 = current;
    out = 0;
}
/*End code section*/"
            output_terminals = "real out;inherit out2;"
            output_terminals_dimensions = "inherit;inherit"
            output_terminals_feedthrough = "True;True"
            output_terminals_show_labels = "False;False"
        }
        [
            position = 8840, 8176
            hide_name = True
            size = 48, 48
        ]

        component gen_probe temperature_2 {
        }
        [
            position = 8984, 7832
        ]

        component "core/Voltage Measurement" voltage_3 {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 9376, 8336
            rotation = right
            scale = -1, 1
            size = 64, 32
        ]

        component gen_probe script_no_3 {
        }
        [
            position = 9856, 8032
        ]

        component sys_mp_signal_switch "Multiport signal switch3" {
            number_of_input_terminals = "4"
        }
        [
            position = 9512, 8200
            hide_name = True
        ]

        component lut_1d "1D look-up table28" {
            in_vec_x = "OCV_25_SCRIPT_2_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_2_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 9368, 8200
            hide_name = True
        ]

        component lut_1d "1D look-up table29" {
            in_vec_x = "OCV_25_SCRIPT_4_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_4_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 9368, 8232
            hide_name = True
        ]

        component "core/Signal Controlled Current Source" Isp24 {
        }
        [
            position = 9680, 8336
            rotation = left
            hide_name = True
            scale = -1, 1
            size = 64, 32
        ]

        component Subsystem "Battery Cell_05" {
            layout = static
            component Subsystem "SOC Model" {
                layout = dynamic
                component gen_gain Gain2 {
                    gain = "1/numeric_scale"
                }
                [
                    position = 7944, 8152
                    hide_name = True
                ]

                component gen_integrator Integrator {
                    limit_lower = "-0.1e6"
                    limit_output = "True"
                    limit_upper = "1.1e6"
                    show_init_condition = "external"
                    show_reset = "rising"
                }
                [
                    position = 7840, 8152
                ]

                component gen_gain Gain1 {
                    execution_rate = "Ts"
                    gain = "1/3600.0"
                }
                [
                    position = 7688, 8128
                    hide_name = True
                ]

                component gen_c_function Coulombic_Eff {
                    input_terminals = "real i;real eta;"
                    input_terminals_dimensions = "inherit;inherit"
                    input_terminals_feedthrough = "True;True"
                    input_terminals_show_labels = "True;True"
                    output_fnc = "/*Begin code section*/
// If the battery is being discharged, efficiency is 1
// If battery is being charged, efficiency eta is used
if(i>0)
    i_out = i;
else
    i_out = eta*i;
/*End code section*/"
                    output_terminals = "real i_out;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "False"
                }
                [
                    position = 7496, 8120
                    size = 48, 48
                ]

                component gen_gain Gain3 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7752, 8128
                    hide_name = True
                ]

                component gen_product Product1 {
                    signs = "*/"
                }
                [
                    position = 7608, 8128
                    hide_name = True
                ]

                component gen_sum Sum1 {
                    signs = "+-"
                }
                [
                    position = 8072, 8088
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                }
                [
                    position = 7976, 8080
                ]

                component src_scada_input "SOC Override" {
                    def_value = "Init_SOC/100.0"
                    execution_rate = "Ts"
                    max = "1"
                    min = "0"
                    unit = ""
                }
                [
                    position = 7472, 8432
                ]

                component gen_sum Sum2 {
                    signs = "+-"
                }
                [
                    position = 7600, 8424
                    hide_name = True
                ]

                component src_constant Constant2 {
                    execution_rate = "Ts"
                }
                [
                    position = 7520, 8392
                    hide_name = True
                ]

                component "core/Edge Detection" "Edge Detection1" {
                }
                [
                    position = 7712, 8168
                    hide_name = True
                    size = 32, 32
                ]

                component gen_gain Gain4 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7720, 8424
                    hide_name = True
                ]

                component gen_limiter Limit1 {
                    lower_limit = "-0.1"
                }
                [
                    position = 8160, 8088
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8112
                ]

                port SOC_pu {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8240, 8088
                ]

                port Q {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8256
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8192
                ]

                junction Junction1 sp
                [
                    position = 7656, 8424
                ]

                comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Ah-As</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling  </span></p></body></html> ENDCOMMENT 
                [
                    position = 7664, 8056
                ]

                comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Taking into account</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">the Coulombic Efficiency</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">during charge </span></p></body></html> ENDCOMMENT 
                [
                    position = 7424, 8024
                ]

                comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7736, 8056
                ]

                comment Comment4 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling Inversion</span></p></body></html> ENDCOMMENT 
                [
                    position = 7896, 8176
                ]

                comment Comment6 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">pu</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling </span> </p></body></html> ENDCOMMENT 
                [
                    position = 7584, 8056
                ]

                comment Comment7 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Initial SOC and</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">SOC Override</span></p></body></html> ENDCOMMENT 
                [
                    position = 7512, 8328
                ]

                comment Comment8 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7696, 8448
                ]

                connect I Coulombic_Eff.i as Connection1019
                connect Integrator.in Gain3.out as Connection1024
                connect Gain3.in Gain1.out as Connection1025
                connect Gain2.in Integrator.out as Connection1026
                connect Product1.in Coulombic_Eff.i_out as Connection1027
                connect Product1.out Gain1.in as Connection1028
                connect Constant1.out Sum1.in as Connection1030
                connect Sum1.in1 Gain2.out as Connection1031
                [
                    position = 0, 0
                    breakpoints = 8024, 8096; 8024, 8152
                ]
                connect Q Product1.in1 as Connection1033
                connect Constant2.out Sum2.in as Connection1034
                connect Sum2.in1 "SOC Override.out" as Connection1035
                connect Integrator.reset "Edge Detection1.Out1" as Connection1042
                connect "Edge Detection1.In1" Junction1 as Connection1043
                connect Junction1 Sum2.out as Connection1044
                [
                    position = 0, 0
                ]
                connect Integrator.init_condition_port Gain4.out as Connection1045
                connect Gain4.in Junction1 as Connection1046
                connect eta Coulombic_Eff.eta as Connection1047
                [
                    position = 0, 0
                    breakpoints = 7440, 8192; 7440, 8128
                ]
                connect Sum1.out Limit1.in as Connection1048
                connect Limit1.out SOC_pu as Connection1049

                Init_SOC = "Init_SOC"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">SOC Model models the state of charge of the battery by applying ideal Coulomb Counting.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Following options are supported:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Coulombic Efficiency</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Available capacity as signal input Q</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Inital SOC supported</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- SOC can be overridden during the simulation (reset to any value)</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Full numerical range of the integrator is used </p></body></html>"

                    Init_SOC {
                        label = "Initial SOC"
                        widget = edit
                        type = generic
                        default_value = "80"
                        unit = "%"
                    }

                    Ts {
                        label = "execution_rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE init
                        numeric_scale = 1e6
                    ENDCODE
                }
            }
            [
                position = 8072, 8072
                size = 128, 64
            ]

            component "core/Signal Controlled Voltage Source" Vt {
            }
            [
                position = 8352, 8384
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component "core/Current Measurement" It {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8448, 8336
                size = 64, 32
            ]

            component gen_sum Sum3 {
                signs = "++--"
            }
            [
                position = 8016, 8384
                hide_name = True
            ]

            component src_scada_input SOH_set {
                def_value = "1"
                execution_rate = "Ts"
                max = "1"
                min = "0"
                unit = ""
            }
            [
                position = 7224, 8032
            ]

            component Subsystem Capacity {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Qnom {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port Q {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Qnom.out Q as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Capacity can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Qnom {
                        label = "Nominal Capacity"
                        widget = edit
                        type = generic
                        default_value = "Q_discharge"
                        unit = "Ah"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Qnom = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Qnom_value = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Qnom_value)) < 0:
                            raise SchApiException("Cell total capacity cannot be smaller than 0. Please check the data again")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Qnom_value) == 0:
                            Qnom = mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Qnom, "value"), Qnom_value)
                            mdl.set_property_value(mdl.prop(Qnom, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Q)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Q)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7816
                size = 128, 56
            ]

            component Subsystem "Internal Resistance" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Rint {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port R {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Rint.out R as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Resistance can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Rint {
                        label = "Series Resistance"
                        widget = edit
                        type = generic
                        default_value = "R0"
                        unit = "Ω"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Rint = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Rint_prop_value = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Rint_prop_value)) < 0:
                            raise SchApiException("Provided Internal resistance cannot be smaller than 0")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Rint = mdl.get_item("R", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Rint_prop_value) == 0:
                            Rint = mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Rint, "value"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(Rint, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Rint)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Rint)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Internal resistance is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7896
                size = 128, 56
            ]

            component Subsystem "Coulombic efficiency" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Efficiency_constant {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port eta {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Efficiency_constant.out eta as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Coulombic efficiency can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    eta {
                        label = "Coulombic efficiency"
                        widget = edit
                        type = generic
                        default_value = "eta"
                        unit = "ohm"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        eta_prop_value = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(eta_prop_value)) < 0:
                            raise SchApiException("Cell coulombic efficiency cannot be smaller than 0.")
                        if np.max(np.max(eta_prop_value)) > 1:
                            raise SchApiException("Cell coulombic efficiency cannot be larger than 1.")
                    
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(eta_prop_value) == 0:
                            Efficiency_constant = mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "value"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_eta)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_eta)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7984
                size = 128, 56
            ]

            component Subsystem "Open Circuit Voltage" {
                layout = dynamic
                component lut_1d LUT_1D {
                    ext_mode = "Linear"
                }
                [
                    position = 8432, 8200
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8416, 8096
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port OCV {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOC {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOC</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect LUT_1D.addr SOC as Connection1
                connect LUT_1D.value OCV as Connection2
                connect termination_T.in T as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage is always a function of State of Charge.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage can be a function of temperature but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a list, then it\'s dependace is of SOC, regardless of what is written inside temperature vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a nested list, then it\'s dependance is first of SOC and then of temperature.</p></body></html>"

                    OCV {
                        label = "Open circuit voltage vector (table)"
                        widget = edit
                        type = generic
                        default_value = "OCV"
                        unit = "V"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        OCV_value = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    
                        if not np.all(np.diff(SOC_vector) >= 0):
                            raise SchApiException("Provided SOC data is not monotonically nondecreasing, please check the documentation")
                    
                        if np.min(np.min(OCV_value)) < 0:
                            raise SchApiException("Open circuit voltage cannot be negative for any point.")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_OCV = mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(OCV_value) == 1:
                            LUT_1D = mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), execution_rate)
                            if not np.all(np.diff(OCV_value) >= 0):
                                raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                        elif np.ndim(OCV_value) == 2:
                            for OCV_1D in OCV_value:  # checks for non decaying OCV for each Temp
                                if not np.all(np.diff(OCV_value) >= 0):
                                    raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_SOC)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_OCV)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), execution_rate)
                    
                        else:
                            raise SchApiException("Provided discharge data is not valid")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7672, 7816
                size = 128, 56
            ]

            component Subsystem "Parallel RC" {
                layout = dynamic
                component gen_terminator termination_I {
                }
                [
                    position = 7832, 8048
                ]

                component gen_product Product_1a {
                }
                [
                    position = 7952, 8256
                ]

                component gen_product Product_1b {
                    signs = "*/"
                }
                [
                    position = 8064, 8112
                ]

                component gen_product Product_1c {
                    signs = "/*"
                }
                [
                    position = 8176, 8216
                    rotation = down
                ]

                component gen_sum Sum_1 {
                    signs = "+-"
                }
                [
                    position = 8176, 8120
                ]

                component gen_integrator Integrator_1 {
                }
                [
                    position = 8304, 8120
                ]

                component src_constant Constant_C1 {
                    execution_rate = "Ts"
                    value = "C1"
                }
                [
                    position = 7832, 8208
                ]

                component src_constant Constant_R1 {
                    execution_rate = "Ts"
                    value = "R1"
                }
                [
                    position = 7832, 8264
                ]

                component gen_sum Sum {
                    signs = "+"
                }
                [
                    position = 8448, 8128
                ]

                port V {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8544, 8136
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7736, 8120
                ]

                junction Junction1 sp
                [
                    position = 8344, 8520
                ]

                connect I termination_I.in as Connection127
                [
                    position = 0, 0
                ]
                connect Product_1a.in Constant_C1.out as Connection128
                connect Product_1a.in1 Constant_R1.out as Connection129
                connect Product_1b.in I as Connection131
                connect Product_1b.in1 Constant_C1.out as Connection132
                connect Product_1a.out Product_1c.in as Connection133
                connect Sum_1.in1 Product_1c.out as Connection134
                connect Product_1b.out Sum_1.in as Connection135
                connect Integrator_1.in Sum_1.out as Connection136
                connect Integrator_1.out Product_1c.in1 as Connection137
                connect Integrator_1.out Sum.in as Connection138
                connect Sum.out V as Connection139

                mask {
                    description = "The parallel RC subsystem emulates cell voltage drop due to the physical proccess diffusion of lithium ions.

                                   This is a standard method of implementing a cell in electrical circuits. The fidelity of the cell response can be modeled by increasing the order of the system. If the selected Model Order is less than 3, then the values for unused resistors and capacitors are not propagated. All the RC circuits are implemented using signal processing. If None is selected than the output voltage drop is a constant 0."

                    RC_number {
                        label = "Model order"
                        widget = combo
                        combo_values = "None", "1", "2", "3"
                        type = string
                        default_value = "1"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            port_V = mdl.get_item("V", parent=sub_handle, item_type=ITEM_PORT)
                            port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        
                            def delete_constant():
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                        
                            def delete_1():
                                mdl.delete_item(mdl.get_item("Constant_C1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_2():
                                mdl.delete_item(mdl.get_item("Constant_C2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_3():
                                mdl.delete_item(mdl.get_item("Constant_C3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def create_constant():
                                Constant_0 = mdl.create_component("core/Constant",
                                                            name="Constant_0",
                                                            parent=sub_handle,)
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V)
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                            def create_1():
                                Product_1a = mdl.create_component("core/Product",
                                                                name="Product_1a",
                                                                parent=sub_handle,
                                                                position=(7952, 8256),)
                                Product_1b = mdl.create_component("core/Product",
                                                                name="Product_1b",
                                                                parent=sub_handle,
                                                                position=(8064, 8112))
                                Product_1c = mdl.create_component("core/Product",
                                                                name="Product_1c",
                                                                parent=sub_handle,
                                                                position=(8176, 8216),
                                                                rotation="down")
                                Sum_1 = mdl.create_component("core/Sum",
                                                                name="Sum_1",
                                                                parent=sub_handle,
                                                                position=(8176, 8120),)
                                Integrator_1 = mdl.create_component("core/Integrator",
                                                                name="Integrator_1",
                                                                parent=sub_handle,
                                                                position=(8304, 8120),)
                                Constant_C1 = mdl.create_component("core/Constant",
                                                                name="Constant_C1",
                                                                parent=sub_handle,
                                                                position=(7832, 8208))
                                Constant_R1 = mdl.create_component("core/Constant",
                                                                name="Constant_R1",
                                                                parent=sub_handle,
                                                                position=(7832, 8264))
                        
                                mdl.set_property_value(mdl.prop(Sum_1, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_1b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_1c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R1, "value"), "R1")
                                mdl.set_property_value(mdl.prop(Constant_C1, "value"), "C1")
                        
                                mdl.create_connection(start=mdl.term(Product_1a, "in"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "in1"), end=mdl.term(Constant_R1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_1b, "in1"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "out"), end=mdl.term(Product_1c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_1, "in1"), end=mdl.term(Product_1c, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "out"), end=mdl.term(Sum_1, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "in"), end=mdl.term(Sum_1, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Product_1c, "in1"))
                        
                            def create_2():
                                Product_2a = mdl.create_component("core/Product",
                                                            name="Product_2a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+400),)
                                Product_2b = mdl.create_component("core/Product",
                                                            name="Product_2b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+400))
                                Product_2c = mdl.create_component("core/Product",
                                                            name="Product_2c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+400),
                                                            rotation="down")
                                Sum_2 = mdl.create_component("core/Sum",
                                                            name="Sum_2",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+400),)
                                Integrator_2 = mdl.create_component("core/Integrator",
                                                            name="Integrator_2",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+400),)
                                Constant_C2 = mdl.create_component("core/Constant",
                                                            name="Constant_C2",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+400))
                                Constant_R2 = mdl.create_component("core/Constant",
                                                            name="Constant_R2",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+400))
                        
                                mdl.set_property_value(mdl.prop(Sum_2, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_2b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_2c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R2, "value"), "R2")
                                mdl.set_property_value(mdl.prop(Constant_C2, "value"), "C2")
                        
                                mdl.create_connection(start=mdl.term(Product_2a, "in"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "in1"), end=mdl.term(Constant_R2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_2b, "in1"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "out"), end=mdl.term(Product_2c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_2, "in1"), end=mdl.term(Product_2c, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "out"), end=mdl.term(Sum_2, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "in"), end=mdl.term(Sum_2, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Product_2c, "in1"))
                        
                            def create_3():
                                Product_3a = mdl.create_component("core/Product",
                                                            name="Product_3a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+200),)
                                Product_3b = mdl.create_component("core/Product",
                                                            name="Product_3b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+200))
                                Product_3c = mdl.create_component("core/Product",
                                                            name="Product_3c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+200),
                                                            rotation="down")
                                Sum_3 = mdl.create_component("core/Sum",
                                                            name="Sum_3",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+200),)
                                Integrator_3 = mdl.create_component("core/Integrator",
                                                            name="Integrator_3",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+200),)
                                Constant_C3 = mdl.create_component("core/Constant",
                                                            name="Constant_C3",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+200))
                                Constant_R3 = mdl.create_component("core/Constant",
                                                            name="Constant_R3",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+200))
                        
                                mdl.set_property_value(mdl.prop(Sum_3, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_3b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_3c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R3, "value"), "R3")
                                mdl.set_property_value(mdl.prop(Constant_C3, "value"), "C3")
                        
                                mdl.create_connection(start=mdl.term(Product_3a, "in"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "in1"), end=mdl.term(Constant_R3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_3b, "in1"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "out"), end=mdl.term(Product_3c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_3, "in1"), end=mdl.term(Product_3c, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "out"), end=mdl.term(Sum_3, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "in"), end=mdl.term(Sum_3, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Product_3c, "in1"))
                        
                            #####################################################
                        
                            if new_value == "None":
                                delete_1()
                        
                                if old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                        
                                create_constant()
                        
                            elif new_value == "1":
                                if old_value == "None":
                                    delete_constant()
                                    create_1()
                                elif old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                                if old_value == "1":
                                    pass
                                else:
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Sum = mdl.create_component("core/Sum",
                                                                name="Sum",
                                                                parent=sub_handle,
                                                                position=(8450, 8130))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "+")
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                        
                            elif new_value == "2":
                                if old_value == "None" or old_value == "1":
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                    create_2()
                                elif old_value == "3":
                                    delete_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                        
                            elif new_value == "3":
                                if old_value == "None" or old_value == "1":
                                    create_2()
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                create_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "+++")
                        
                                try:
                                    Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                                except:
                                    pass
                                Integrator_3 = mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Sum, "in2"))
                        ENDCODE
                    }

                    R1 {
                        label = "Resistance 1"
                        widget = edit
                        type = generic
                        default_value = "R1"
                        unit = "Ω"
                    }

                    C1 {
                        label = "Capacitance 1"
                        widget = edit
                        type = generic
                        default_value = "C1"
                        unit = "F"
                    }

                    R2 {
                        label = "Resistance 2"
                        widget = edit
                        type = generic
                        default_value = "R2"
                        unit = "Ω"
                    }

                    C2 {
                        label = "Capacitance 2"
                        widget = edit
                        type = generic
                        default_value = "C2"
                        unit = "F"
                    }

                    R3 {
                        label = "Resistance 3"
                        widget = edit
                        type = generic
                        default_value = "R3"
                        unit = "Ω"
                    }

                    C3 {
                        label = "Capacitance 3"
                        widget = edit
                        type = generic
                        default_value = "C3"
                        unit = "F"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        RC_number = mdl.get_property_value(mdl.prop(item_handle, "RC_number"))
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.exception import SchApiException
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    
                        if R1 < 0:
                            raise SchApiException("R1 cannot be negative.")
                        if R2 < 0:
                            raise SchApiException("R2 cannot be negative.")
                        if R3 < 0:
                            raise SchApiException("R3 cannot be negative.")
                        if C1 < 0:
                            raise SchApiException("C1 cannot be negative.")
                        if C2 < 0:
                            raise SchApiException("C2 cannot be negative.")
                        if C3 < 0:
                            raise SchApiException("C3 cannot be negative.")
                    ENDCODE
                }
            }
            [
                position = 7672, 8096
                size = 128, 80
            ]

            component Subsystem "Series voltage drop" {
                layout = dynamic
                component gen_product Product {
                }
                [
                    position = 8224, 8176
                    hide_name = True
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8168
                ]

                port R0 {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8208
                ]

                port V_R0 {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8296, 8176
                ]

                connect Product.out V_R0 as Connection1170
                connect Product.in I as Connection1168
                connect Product.in1 R0 as Connection1169
            }
            [
                position = 7672, 8200
                size = 128, 64
            ]

            component Subsystem "Passive Balancing" {
                layout = dynamic
                component src_constant Constant_0 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8136, 8280
                ]

                port I_bal {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8208
                ]

                port I_t {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7992, 7936
                ]

                port I_cell {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8072
                ]

                connect I_t I_cell as direct_connection
                connect Constant_0.out I_bal as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Passive balancing subsystem is dynamically changed by changing the type of balancing:<br></br>1. \"None\" mode simply propagates the total input current as the cell current and 0 value for balance current.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. \"Passive balancing\" introduces a current flowing through the resistor parallel to the cell. Value of resistance is specified as a parameter and an input for terminal voltage and balancing switch is created. Balancing switch opens and closes the ideal switch connecting cell terminals to the resistor.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. \"Direct current input\" option simply subtracts the signal out of the I_in terminal from the I_t and outputs in the I_cell signal output. I_bal is therefore the signal that enters I_in terminal.</p></body></html>"

                    balancing_combo {
                        label = "Balancing mode"
                        widget = combo
                        combo_values = "None", "Passive balancing", "Direct current input"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            I_t = mdl.get_item("I_t", parent=sub_handle, item_type=ITEM_PORT)
                            I_cell = mdl.get_item("I_cell", parent=sub_handle, item_type=ITEM_PORT)
                            I_bal = mdl.get_item("I_bal", parent=sub_handle, item_type=ITEM_PORT)
                        
                            if new_value==old_value:
                                pass
                            elif new_value=="None":
                                if old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                                mdl.create_connection(start=I_t, end=I_cell, name="direct_connection")
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=I_bal, name="Connection1")
                        
                            elif new_value=="Passive balancing":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    try:
                                        mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                        mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    except:
                                        pass
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                BL_SW = mdl.create_port(name="BL_SW",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                V_term = mdl.create_port(name="V_term",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8220),)
                                R_balance_gain = mdl.create_component("core/Gain",
                                                        name="R_balance_gain",
                                                        parent=sub_handle,
                                                        position=(8135, 8200))
                                signal_switch = mdl.create_component("core/Signal switch",
                                                        name="signal_switch",
                                                        parent=sub_handle,
                                                        position=(8262, 8240))
                                unit_delay = mdl.create_component("core/Unit Delay",
                                                        name="unit_delay",
                                                        parent=sub_handle,
                                                        position=(8325, 8216))
                        
                                mdl.set_property_value(mdl.prop(signal_switch, "threshold"), 0.5)
                                mdl.set_property_value(mdl.prop(R_balance_gain, "gain"), "1/R_balance")
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                                mdl.create_connection(start=BL_SW, end=mdl.term(signal_switch, "in2"))
                                mdl.create_connection(start=V_term, end=mdl.term(R_balance_gain, "in"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in"), end=mdl.term(R_balance_gain, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in1"), end=mdl.term(Constant_0, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "out"), end=mdl.term(unit_delay, "in"))
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=mdl.term(unit_delay, "out"))
                                mdl.create_connection(start=I_bal, end=mdl.term(unit_delay, "out"))
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        
                            elif new_value=="Direct current input":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                    mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                elif old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                                I_in = mdl.create_port(name="I_in",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=I_in)
                                mdl.create_connection(start=I_bal, end=I_in)
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        ENDCODE
                    }

                    R_balance {
                        label = "Balancing Resistance"
                        widget = edit
                        type = generic
                        default_value = "R_balance"
                        unit = "Ω"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE
                }
            }
            [
                position = 7520, 8344
                size = 128, 112
            ]

            component gen_gain Cell_NO {
                gain = "1/cell_NO"
            }
            [
                position = 7408, 8312
                hide_name = True
            ]

            component gen_probe "Cell voltage" {
            }
            [
                position = 8688, 8064
            ]

            component gen_terminator Termination1 {
            }
            [
                position = 8400, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination2 {
            }
            [
                position = 8576, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination3 {
            }
            [
                position = 8400, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination4 {
            }
            [
                position = 8400, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination5 {
            }
            [
                position = 8400, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination6 {
            }
            [
                position = 8400, 8064
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination7 {
            }
            [
                position = 8576, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination8 {
            }
            [
                position = 8576, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination9 {
            }
            [
                position = 8576, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination10 {
            }
            [
                position = 8576, 8064
                rotation = down
                hide_name = True
            ]

            component Subsystem Hysteresis {
                layout = dynamic
                component gen_terminator termination_T {
                }
                [
                    position = 7968, 8280
                ]

                component gen_terminator termination_I {
                }
                [
                    position = 8080, 8440
                ]

                component gen_terminator termination_eta {
                }
                [
                    position = 7976, 8056
                ]

                component gen_c_function C_function {
                    global_variables = "real h;real h_mem;real h1;real h2;real current_sign;real efficiency;"
                    init_fnc = "/*Begin code section*/
current_sign = 1;
h_mem = 0;
efficiency = 1;
/*End code section*/"
                    input_terminals = "real current;inherit M0;inherit M;inherit gamma_param;inherit eta;inherit Q;inherit Ts;"
                    input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
if (current<0){
    current_sign = -1;
    efficiency = eta;
}
else if (current>0){
    current_sign = 1;
    efficiency = 1;
}

h = exp(-fabs(current*efficiency*gamma_param/Q*Ts))*h_mem - (1-exp(-fabs(current*efficiency*gamma_param/Q*Ts)))*current_sign;
h_mem = h;
V_h = M0*current_sign + M*h;
/*End code section*/"
                    output_terminals = "inherit V_h;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "True"
                }
                [
                    position = 8320, 8160
                    scale = 1, -1
                    size = 144, 320
                ]

                component lut_1d M0_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8072, 8240
                ]

                component lut_1d M_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 7992, 8200
                ]

                component lut_1d gamma_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8080, 8160
                ]

                component gen_terminator termination_Q {
                }
                [
                    position = 8016, 7952
                ]

                component gen_terminator termination_Ts {
                }
                [
                    position = 8248, 7952
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                    value = "Ts"
                }
                [
                    position = 8160, 8040
                ]

                component gen_terminator termination_SOC {
                }
                [
                    position = 7976, 8336
                ]

                port I {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7984, 8392
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8104
                ]

                port T {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8216
                ]

                port V_hyst {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8504, 8160
                ]

                port Q {
                    position = left:4
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7896, 8008
                ]

                port SOC {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7856, 8336
                ]

                junction Junction1 sp
                [
                    position = 7936, 8216
                ]

                junction Junction2 sp
                [
                    position = 7936, 8216
                ]

                junction Junction3 sp
                [
                    position = 7904, 8216
                ]

                junction Junction4 sp
                [
                    position = 8040, 8392
                ]

                junction Junction7 sp
                [
                    position = 8208, 8240
                ]

                junction Junction12 sp
                [
                    position = 8192, 8040
                ]

                junction Junction8 sp
                [
                    position = 8032, 8200
                ]

                junction Junction10 sp
                [
                    position = 7904, 8104
                ]

                junction Junction11 sp
                [
                    position = 7936, 8008
                ]

                connect C_function.V_h V_hyst as Connection1164
                connect M_LUT_1D.addr Junction1 as Connection1165
                connect M0_LUT_1D.addr Junction2 as Connection1168
                connect Junction2 Junction1 as Connection1169
                connect gamma_LUT_1D.addr Junction2 as Connection1170
                connect Junction1 Junction3 as Connection1171
                connect Junction3 T as Connection1172
                connect termination_T.in Junction3 as Connection1173
                connect C_function.current Junction4 as Connection1174
                [
                    position = 0, 0
                    breakpoints = 8184, 8280; 8184, 8392
                ]
                connect Junction4 I as Connection1175
                connect termination_I.in Junction4 as Connection1176
                connect gamma_LUT_1D.value C_function.gamma_param as Connection1211
                connect C_function.M0 Junction7 as Connection1192
                connect Constant1.out Junction12 as Connection1212
                connect Junction7 M0_LUT_1D.value as Connection1193
                [
                    position = 0, 0
                ]
                connect Junction12 C_function.Ts as Connection1213
                connect termination_Ts.in Junction12 as Connection1214
                connect M_LUT_1D.value Junction8 as Connection1196
                connect Junction8 C_function.M as Connection1197
                connect termination_eta.in Junction10 as Connection1203
                connect Junction10 eta as Connection1204
                [
                    position = 0, 0
                ]
                connect C_function.eta Junction10 as Connection1205
                connect Q Junction11 as Connection1207
                connect Junction11 termination_Q.in as Connection1208
                [
                    position = 0, 0
                ]
                connect C_function.Q Junction11 as Connection1209
                [
                    position = 0, 0
                    breakpoints = 8024, 8080; 8024, 8008
                ]
                connect SOC termination_SOC.in as Connection1215

                hysteresis_model = "One state"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If hysteresis implementation is \"None\", then the output is a constant 0.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For the \"One state\" implementation, output is a multivariable function referenced from: https://ieeexplore.ieee.org/document/7049363<br></br>This C-function is a function of multiple parameters, including the temperature and SOC dependant M, M0 and gamma.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For each of these parameters, if their value is entered as a constant, they are not functions of temperature and SOC.<br></br>If their value is a list, they are a function of temperature and if it is a nested list, they are a function first of temperature and then of SOC.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"Preisach model\" implementation is also a popular method of representing hysteresis, but is not currently available.<br></br></p></body></html>"

                    hysteresis_model {
                        label = "Hysteresis model"
                        widget = combo
                        combo_values = "None", "One state"
                        type = string
                        default_value = "None"
                        no_evaluate
                    }

                    T_vector {
                        label = "Temperature vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector_h"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector_h"
                    }

                    M0 {
                        label = "M0 parameter"
                        widget = edit
                        type = generic
                        default_value = "M0"
                    }

                    M {
                        label = "M parameter"
                        widget = edit
                        type = generic
                        default_value = "M"
                    }

                    gamma {
                        label = "Gamma parameter"
                        widget = edit
                        type = generic
                        default_value = "gamma"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        M0_value = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M_value = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma_value = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                    
                        if np.min(np.min(M0_value)) < 0:
                            raise SchApiException("M0 parameter cannot be negative for any point.")
                        if np.min(np.min(M_value)) < 0:
                            raise SchApiException("M parameter cannot be negative for any point.")
                        if np.min(np.min(gamma_value)) < 0:
                            raise SchApiException("Gamma parameter cannot be negative for any point.")
                    
                        port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                        port_V_hyst = mdl.get_item("V_hyst", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        C_function = mdl.get_item("C_function", parent=sub_handle, item_type=ITEM_COMPONENT)
                        gamma_LUT_1D = mdl.get_item("gamma_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M_LUT_1D = mdl.get_item("M_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M0_LUT_1D = mdl.get_item("M0_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if hysteresis_model == "None":
                            mdl.delete_item(mdl.get_item("Connection1164", parent=sub_handle, item_type=ITEM_CONNECTION))
                            Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                            # replace output voltage with 0
                            mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V_hyst)
                            mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), execution_rate)
                            mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        else:
                            # M_value
                            if np.ndim(M_value) == 0:
                                mdl.delete_item(M_LUT_1D)
                                Constant_M = mdl.create_component("core/Constant",
                                                        name="Constant_M",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M, "value"), M_value)
                                mdl.set_property_value(mdl.prop(Constant_M, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M, "out"), end=mdl.term(C_function, "M"))
                    
                            elif np.ndim(M_value) == 1:
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "out_vec_f_x"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M_value) == 2:
                                M_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "value"), end=mdl.term(C_function, "M"))
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "out_vec_f_xy"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M_value.")
                    
                            # M0_value
                            if np.ndim(M0_value) == 0:
                                mdl.delete_item(M0_LUT_1D)
                                Constant_M0 = mdl.create_component("core/Constant",
                                                        name="Constant_M0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M0, "value"), M0_value)
                                mdl.set_property_value(mdl.prop(Constant_M0, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M0, "out"), end=mdl.term(C_function, "M0"))
                    
                            elif np.ndim(M0_value) == 1:
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "out_vec_f_x"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M0_value) == 2:
                                M0_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M0_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M0_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "value"), end=mdl.term(C_function, "M0"))
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "out_vec_f_xy"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M0_value.")
                    
                            # gamma_value
                            if np.ndim(gamma_value) == 0:
                                mdl.delete_item(gamma_LUT_1D)
                                Constant_gamma = mdl.create_component("core/Constant",
                                                        name="Constant_gamma",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_gamma, "value"), gamma_value)
                                mdl.set_property_value(mdl.prop(Constant_gamma, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_gamma, "out"), end=mdl.term(C_function, "gamma_param"))
                    
                            elif np.ndim(gamma_value) == 1:
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "out_vec_f_x"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(gamma_value) == 2:
                                gamma_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="gamma_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(gamma_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "value"), end=mdl.term(C_function, "gamma_param"))
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "out_vec_f_xy"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for gamma value.")
                    ENDCODE
                }
            }
            [
                position = 7672, 7944
                size = 128, 160
            ]

            component sys_signal_switch "Signal switch1" {
            }
            [
                position = 8096, 8368
            ]

            component src_scada_input "Vcell Value Set" {
                execution_rate = "Ts"
                min = "0"
                unit = ""
            }
            [
                position = 8016, 8304
            ]

            component src_scada_input "Vcell Override" {
                execution_rate = "Ts"
                format = "int"
                max = "1"
                min = "0"
                signal_type = "int"
                unit = ""
            }
            [
                position = 8016, 8248
            ]

            component gen_probe SOC {
            }
            [
                position = 8488, 7824
            ]

            port P {
                position = top center
                kind = pe
            }
            [
                position = 8528, 8336
                rotation = down
                hide_name = True
            ]

            port N {
                position = bottom center
                kind = pe
            }
            [
                position = 8528, 8424
                rotation = down
                hide_name = True
            ]

            port T {
                position = -16.0, -8.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7128, 7904
                hide_name = True
            ]

            tag From1 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8056
                hide_name = True
                size = 60, 20
            ]

            tag Goto3 {
                value = "T"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7368, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From6 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From7 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From10 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8216
                hide_name = True
                size = 60, 20
            ]

            tag From11 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7856, 8360
                hide_name = True
                size = 60, 20
            ]

            tag Goto6 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8200
                hide_name = True
                size = 60, 20
            ]

            tag From12 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7840, 8392
                hide_name = True
                size = 60, 20
            ]

            tag From13 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8408
                hide_name = True
                size = 60, 20
            ]

            tag Goto19 {
                value = "Q"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7816
                hide_name = True
                size = 60, 20
            ]

            tag From32 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From16 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8184
                hide_name = True
                size = 60, 20
            ]

            tag Goto10 {
                value = "R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7896
                hide_name = True
                size = 60, 20
            ]

            tag Goto11 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8376
                hide_name = True
                size = 60, 20
            ]

            tag Goto12 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7944
                hide_name = True
                size = 60, 20
            ]

            tag Goto13 {
                value = "OCV"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7816
                hide_name = True
                size = 60, 20
            ]

            tag Goto14 {
                value = "I_t"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8496, 8288
                hide_name = True
                size = 60, 20
            ]

            tag Goto16 {
                value = "V_term"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8176, 8368
                hide_name = True
                size = 60, 20
            ]

            tag From20 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8256, 8384
                hide_name = True
                size = 60, 20
            ]

            tag From22 {
                value = "I_t"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7344, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto2 {
                value = "SOH"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7344, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From34 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From35 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7888
                hide_name = True
                size = 60, 20
            ]

            tag Goto20 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7984
                hide_name = True
                size = 60, 20
            ]

            tag From36 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From37 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7976
                hide_name = True
                size = 60, 20
            ]

            tag From38 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8088
                hide_name = True
                size = 60, 20
            ]

            tag From39 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7488, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From40 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From15 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto9 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto21 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto22 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8376
                hide_name = True
                size = 60, 20
            ]

            tag From33 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From23 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From24 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From25 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From26 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From27 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From28 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From29 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From30 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From43 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From5 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7944
                hide_name = True
                size = 60, 20
            ]

            tag From42 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7920
                hide_name = True
                size = 60, 20
            ]

            tag From44 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From45 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7896
                hide_name = True
                size = 60, 20
            ]

            tag From46 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7968
                hide_name = True
                size = 60, 20
            ]

            junction Junction12 sp
            [
                position = 8632, 8032
            ]

            comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Measurements *****</p></body></html> ENDCOMMENT 
            [
                position = 8440, 7704
            ]

            comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Battery Effects *****  </p></body></html> ENDCOMMENT 
            [
                position = 7752, 7720
            ]

            comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** ECM and Passive Balancing *****  </p></body></html> ENDCOMMENT 
            [
                position = 7848, 8192
            ]

            connect From1 "SOC Model.I" as Connection1062
            connect Vt.p_node It.p_node as Connection42
            connect It.n_node P as Connection1129
            connect Vt.n_node N as Connection1130
            connect From32 "SOC Model.Q" as Connection1135
            connect From11 Sum3.in as Connection1091
            connect From18 Sum3.in1 as Connection1095
            connect Goto14 It.out as Connection1102
            connect From20 Vt.in as Connection1109
            connect Goto11 "SOC Model.SOC_pu" as Connection1119
            connect Goto2 SOH_set.out as Connection1063
            connect Capacity.SOH From6 as Connection1144
            connect Capacity.T From7 as Connection1145
            connect From35 "Internal Resistance.T" as Connection1147
            connect From34 "Internal Resistance.SOH" as Connection1148
            connect Goto10 "Internal Resistance.R" as Connection1149
            connect From37 "Coulombic efficiency.T" as Connection1150
            connect From36 "Coulombic efficiency.SOH" as Connection1151
            connect Goto20 "Coulombic efficiency.eta" as Connection1152
            connect From38 "SOC Model.eta" as Connection1153
            connect "Open Circuit Voltage.SOC" From39 as Connection1154
            connect "Open Circuit Voltage.T" From40 as Connection1155
            connect Goto13 "Open Circuit Voltage.OCV" as Connection1162
            connect Goto9 "Parallel RC.V" as Connection1141
            connect From15 "Parallel RC.I" as Connection1077
            connect Goto6 "Series voltage drop.V_R0" as Connection1169
            connect From10 "Series voltage drop.R0" as Connection1168
            connect From16 "Series voltage drop.I" as Connection1167
            connect Sum3.in3 From13 as Connection1175
            connect From12 Sum3.in2 as Connection1179
            connect Goto21 "Passive Balancing.I_bal" as Connection1173
            connect Capacity.Q Goto19 as Connection1181
            connect From22 Cell_NO.in as Connection1182
            connect Cell_NO.out "Passive Balancing.I_t" as Connection1183
            connect Goto22 "Passive Balancing.I_cell" as Connection1184
            connect From25 Junction12 as Connection1212
            connect Junction12 "Cell voltage.in" as Connection1213
            connect Termination10.in Junction12 as Connection1214
            connect From26 Termination5.in as Connection1222
            connect From28 Termination6.in as Connection1220
            connect Termination4.in From24 as Connection1221
            connect Termination8.in From29 as Connection1218
            connect Termination2.in From27 as Connection1223
            connect From23 Termination3.in as Connection1215
            connect Termination7.in From33 as Connection1219
            connect Termination9.in From43 as Connection1216
            connect Termination1.in From30 as Connection1217
            connect Hysteresis.T From5 as Connection1158
            connect Hysteresis.I From42 as Connection1159
            connect From44 Hysteresis.Q as Connection1233
            connect From45 Hysteresis.eta as Connection1234
            connect Goto12 Hysteresis.V_hyst as Connection1235
            connect From46 Hysteresis.SOC as Connection1245
            connect T Goto3 as Connection1131
            connect "Signal switch1.in1" Sum3.out as Connection1246
            connect Goto16 "Signal switch1.out" as Connection1247
            connect "Vcell Value Set.out" "Signal switch1.in" as Connection1248
            connect "Vcell Override.out" "Signal switch1.in2" as Connection1249
            connect SOC.in Termination3.in as Connection1251

            Q_total = "total_Q"
            Ts = "Ts"
            meas_Ibal = "False"
            meas_Icell = "False"
            meas_OCV = "False"
            meas_Q = "False"
            meas_Rint = "False"
            meas_SOH = "False"
            meas_T = "False"
            meas_hyst = "False"

            mask {
                description = "This component represents the \"Enhanced self correcting\" battery cell model. It is a state-of-the-art electrical representation of the physical processes naturally ocurring inside the battery cell. Many parameters can be set as either constants or functions of temperature, state of charge, or state of health. Parallel cells are modelled simply by distributing the input current across the number of cells entered in the parameter input. <br></br>This component is simulated at the signal processing time step, entered in this component as the Execution rate parameter.<br></br><br></br>For more information regarding implementation and parametrization, please refer to the documentation."
                help_file = "battery_cell.html"

                SOC_vector {
                    label = "State of charge vector"
                    widget = edit
                    type = generic
                    default_value = "[0.00000, 0.00500, 0.01000, 0.01500, 0.02000, 0.02500, 0.03000, 0.03500, 0.04000, 0.04500, 0.05000, 0.05500, 0.06000, 0.06500, 0.07000, 0.07500, 0.08000, 0.08500, 0.09000, 0.09500, 0.10000, 0.10500, 0.11000, 0.11500, 0.12000, 0.12500, 0.13000, 0.13500, 0.14000, 0.14500, 0.15000, 0.15500, 0.16000, 0.16500, 0.17000, 0.17500, 0.18000, 0.18500, 0.19000, 0.19500, 0.20000, 0.20500, 0.21000, 0.21500, 0.22000, 0.22500, 0.23000, 0.23500, 0.24000, 0.24500, 0.25000, 0.25500, 0.26000, 0.26500, 0.27000, 0.27500, 0.28000, 0.28500, 0.29000, 0.29500, 0.30000, 0.30500, 0.31000, 0.31500, 0.32000, 0.32500, 0.33000, 0.33500, 0.34000, 0.34500, 0.35000, 0.35500, 0.36000, 0.36500, 0.37000, 0.37500, 0.38000, 0.38500, 0.39000, 0.39500, 0.40000, 0.40500, 0.41000, 0.41500, 0.42000, 0.42500, 0.43000, 0.43500, 0.44000, 0.44500, 0.45000, 0.45500, 0.46000, 0.46500, 0.47000, 0.47500, 0.48000, 0.48500, 0.49000, 0.49500, 0.50000, 0.50500, 0.51000, 0.51500, 0.52000, 0.52500, 0.53000, 0.53500, 0.54000, 0.54500, 0.55000, 0.55500, 0.56000, 0.56500, 0.57000, 0.57500, 0.58000, 0.58500, 0.59000, 0.59500, 0.60000, 0.60500, 0.61000, 0.61500, 0.62000, 0.62500, 0.63000, 0.63500, 0.64000, 0.64500, 0.65000, 0.65500, 0.66000, 0.66500, 0.67000, 0.67500, 0.68000, 0.68500, 0.69000, 0.69500, 0.70000, 0.70500, 0.71000, 0.71500, 0.72000, 0.72500, 0.73000, 0.73500, 0.74000, 0.74500, 0.75000, 0.75500, 0.76000, 0.76500, 0.77000, 0.77500, 0.78000, 0.78500, 0.79000, 0.79500, 0.80000, 0.80500, 0.81000, 0.81500, 0.82000, 0.82500, 0.83000, 0.83500, 0.84000, 0.84500, 0.85000, 0.85500, 0.86000, 0.86500, 0.87000, 0.87500, 0.88000, 0.88500, 0.89000, 0.89500, 0.90000, 0.90500, 0.91000, 0.91500, 0.92000, 0.92500, 0.93000, 0.93500, 0.94000, 0.94500, 0.95000, 0.95500, 0.96000, 0.96500, 0.97000, 0.97500, 0.98000, 0.98500, 0.99000, 0.99500, 1.00000]"
                    unit = "p.u."
                    group = "Basic parameters:1"
                }

                Init_SOC {
                    label = "Initial state of charge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                    group = "Basic parameters"
                }

                SOH_vector {
                    label = "State of health vector"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Basic parameters"
                }

                T_vector {
                    label = "Temperatures vector"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    group = "Basic parameters"
                }

                OCV {
                    label = "Open circuit voltage"
                    widget = edit
                    type = generic
                    default_value = "[[ 2.81376455, 2.934249, 3.01131295, 3.0707406, 3.12232055, 3.1679386999999997, 3.20864785, 3.2450991, 3.27819715, 3.30856405, 3.3362725999999996, 3.3618633499999997, 3.38570235, 3.40775795, 3.42830425, 3.4476403500000004, 3.4655972, 3.48235125, 3.4982734000000004, 3.5123286499999997, 3.52428065, 3.5322503000000003, 3.536190725, 3.538614355, 3.5410027349999997, 3.543410505, 3.54570155, 3.548176695, 3.55074616, 3.55332738, 3.5560948150000002, 3.5590690300000003, 3.5622155269999998, 3.5656399850000002, 3.569116135, 3.5732180099999997, 3.57727722, 3.5820934199999996, 3.58702369, 3.5923769, 3.5981162299999996, 3.60387865, 3.6098619999999997, 3.61578425, 3.6219618000000002, 3.6279250050000003, 3.633843695, 3.6400532699999997, 3.646100845, 3.6525218749999997, 3.659006475, 3.6658932699999998, 3.6723717, 3.67845187, 3.6843657899999998, 3.690319095, 3.696598375, 3.70317101, 3.7103087649999997, 3.71751191, 3.72478503, 3.7312556949999998, 3.737126875, 3.7421215, 3.746753425, 3.7512470799999997, 3.7557191, 3.759948005, 3.7641692570000003, 3.7683243400000004, 3.77226982, 3.776130865, 3.77996065, 3.7834905, 3.78724775, 3.79068595, 3.79405435, 3.79739885, 3.8008169, 3.8037784, 3.80672915, 3.80976375, 3.81294495, 3.8155956, 3.81841755, 3.8211345, 3.82375915, 3.826463, 3.8289732, 3.83148675, 3.8339139, 3.8364958500000004, 3.8389766, 3.84130125, 3.8436186, 3.84593155, 3.8484112, 3.8508698999999997, 3.853017, 3.8553768, 3.8575925, 3.8597776, 3.8618757, 3.8639596, 3.8662289, 3.8684966, 3.8704239, 3.8727584, 3.8746679, 3.8767636000000003, 3.8789283, 3.88108645, 3.88336145, 3.88554035, 3.8876272999999997, 3.88979185, 3.8919731499999997, 3.89423455, 3.89660415, 3.89878675, 3.9010609, 3.9034554999999997, 3.9058273, 3.9083077999999998, 3.9107870499999997, 3.9134431, 3.91605185, 3.9188395000000003, 3.92173155, 3.9245562, 3.9278719, 3.93123635, 3.93501795, 3.9392118, 3.9434215, 3.9476625, 3.9522793, 3.956863, 3.9614228, 3.9661213500000003, 3.97056845, 3.97496085, 3.97923145, 3.98304985, 3.9867527999999997, 3.990355, 3.9938599000000004, 3.997107, 4.0001812, 4.0032136000000005, 4.0059932, 4.0087594499999994, 4.011432500000001, 4.0139152, 4.0163138, 4.0185217, 4.02070895, 4.022900900000001, 4.0249913, 4.0268188, 4.02872455, 4.03070295, 4.0323274, 4.0341031, 4.03572435, 4.0374238, 4.03904715, 4.0406617, 4.0421721999999995, 4.04385255, 4.04555215, 4.0469809, 4.048781399999999, 4.05039585, 4.052104, 4.05390415, 4.0557043, 4.057513849999999, 4.0593374, 4.0614338, 4.0635322, 4.0657283, 4.0680112, 4.0704244, 4.07274935, 4.075507399999999, 4.0782211, 4.0812930000000005, 4.08431865, 4.08759685, 4.0910807, 4.0947777499999995, 4.0989474, 4.10329865, 4.10799, 4.1129271, 4.1185746, 4.1244995, 4.1311105999999995, 4.138731625, 4.14890576], [2.8100227500000003, 2.916445, 2.99576475, 3.057303, 3.11000275, 3.1564935, 3.19803925, 3.2350955, 3.26858575, 3.2992202500000003, 3.3273629999999996, 3.35331675, 3.37731175, 3.39958975, 3.4203212499999998, 3.4398017500000004, 3.457986, 3.47495625, 3.4909670000000004, 3.50564325, 3.51860325, 3.5288515, 3.535353625, 3.539071775, 3.5418136749999998, 3.544252525, 3.54650775, 3.5488834750000002, 3.5513308, 3.5538369, 3.556474075, 3.55934515, 3.5622776349999996, 3.565399925, 3.5687806749999997, 3.57249005, 3.5763861, 3.5808671, 3.5855184500000004, 3.5906845, 3.5961811499999996, 3.60179325, 3.60771, 3.6137212499999998, 3.619809, 3.626025025, 3.632018475, 3.63826635, 3.644504225, 3.6510093749999997, 3.657832375, 3.66466635, 3.6710585, 3.67705935, 3.6830289499999997, 3.689195475, 3.6957918750000003, 3.70265505, 3.709943825, 3.71715955, 3.72392515, 3.729878475, 3.735234375, 3.7402075, 3.744967125, 3.7498354, 3.7545954999999998, 3.759340025, 3.764046285, 3.7688217, 3.7733491, 3.777854325, 3.78220325, 3.7862525, 3.7902387500000003, 3.79382975, 3.79747175, 3.80099425, 3.8044845, 3.807692, 3.81084575, 3.81401875, 3.81712475, 3.819978, 3.82288775, 3.8256725, 3.82839575, 3.831115, 3.833666, 3.83623375, 3.8387695, 3.8412792500000004, 3.843683, 3.84610625, 3.848493, 3.85085775, 3.853256, 3.8555495, 3.857885, 3.860084, 3.8623624999999997, 3.864488, 3.8665785, 3.868598, 3.8707445, 3.872883, 3.8749195, 3.876992, 3.8789395, 3.881018, 3.8830415, 3.88503225, 3.88720725, 3.88930175, 3.8913365, 3.89335925, 3.8954657499999996, 3.89757275, 3.89982075, 3.90193375, 3.9041045000000003, 3.9064775, 3.9087365, 3.911139, 3.91353525, 3.9160155, 3.91865925, 3.9213975000000003, 3.92425775, 3.927181, 3.9305595, 3.93418175, 3.93828975, 3.942859, 3.9479075, 3.9531125, 3.9585965, 3.9639149999999996, 3.968714, 3.97340675, 3.9776422499999997, 3.98160425, 3.98535725, 3.98884925, 3.992164, 3.995375, 3.9984995000000003, 4.001535, 4.004506, 4.007268, 4.0099659999999995, 4.01259725, 4.015162500000001, 4.017576, 4.019969, 4.0222085, 4.02434475, 4.026504500000001, 4.0285565, 4.030494, 4.03242275, 4.03431475, 4.036036999999999, 4.0377155, 4.03942175, 4.041119, 4.04283575, 4.0445085, 4.046061, 4.047662750000001, 4.04936075, 4.050904500000001, 4.052707, 4.05437925, 4.05612, 4.05792075, 4.0597215, 4.06156925, 4.063487, 4.065569, 4.067661, 4.0698415, 4.072056, 4.074522, 4.07694675, 4.079536999999999, 4.0823055, 4.085265000000001, 4.08839325, 4.0915842499999995, 4.0950035, 4.09868875, 4.102737, 4.106893250000001, 4.11155, 4.1162355, 4.1216729999999995, 4.1272975, 4.133553, 4.140458125, 4.149328799999999], [2.80628095, 2.898641, 2.98021655, 3.0438654, 3.09768495, 3.1450483, 3.18743065, 3.2250919, 3.2589743500000004, 3.2898764500000004, 3.3184533999999997, 3.34477015, 3.36892115, 3.39142155, 3.41233825, 3.43196315, 3.4503747999999996, 3.46756125, 3.4836606000000003, 3.4989578499999996, 3.5129258500000002, 3.5254527, 3.534516525, 3.539529195, 3.542624615, 3.545094545, 3.54731395, 3.549590255, 3.55191544, 3.55434642, 3.556853335, 3.55962127, 3.562339743, 3.565159865, 3.568445215, 3.57176209, 3.57549498, 3.5796407799999996, 3.58401321, 3.5889921, 3.5942460699999996, 3.59970785, 3.605558, 3.6116582499999996, 3.6176562, 3.624125045, 3.630193255, 3.63647943, 3.642907605, 3.6494968749999996, 3.656658275, 3.66343943, 3.6697452999999998, 3.67566683, 3.6816921099999997, 3.688071855, 3.694985375, 3.70213909, 3.709578885, 3.71680719, 3.72306527, 3.728501255, 3.7333418750000003, 3.7382934999999997, 3.743180825, 3.74842372, 3.7534718999999996, 3.758732045, 3.7639233130000003, 3.7693190600000004, 3.77442838, 3.779577785, 3.78444585, 3.7890145, 3.79322975, 3.7969735499999997, 3.80088915, 3.80458965, 3.8081521, 3.8116056, 3.81496235, 3.81827375, 3.8213045500000002, 3.8243603999999998, 3.82735795, 3.8302104999999997, 3.83303235, 3.8357669999999997, 3.8383588, 3.84098075, 3.8436251, 3.8460626500000004, 3.8483894000000003, 3.8509112500000002, 3.8533674, 3.85578395, 3.8581008, 3.8602290999999997, 3.862753, 3.8647912, 3.8671325, 3.8691984, 3.8712813, 3.8732364, 3.8752600999999998, 3.8772694, 3.8794151, 3.8812256, 3.8832111, 3.8852724000000003, 3.8871547, 3.88897805, 3.89105305, 3.8930631499999997, 3.8950457, 3.89692665, 3.8989583499999996, 3.90091095, 3.90303735, 3.90508075, 3.9071481, 3.9094995, 3.9116457000000002, 3.9139702, 3.91628345, 3.9185879, 3.92126665, 3.9239555, 3.92678395, 3.9298058, 3.9332471, 3.93712715, 3.9415615500000003, 3.9465062, 3.9523935, 3.9585624999999998, 3.9649137, 3.970967, 3.9760052, 3.9806921500000003, 3.98471605, 3.98824765, 3.99148305, 3.99464865, 3.9975752, 4.000395, 4.0031391, 4.005963, 4.0088308, 4.0113224, 4.0139388, 4.016435049999999, 4.018892500000001, 4.0212368, 4.0236241999999995, 4.0258953, 4.02798055, 4.0301081000000005, 4.032121699999999, 4.0341692, 4.03612095, 4.03792655, 4.0397466, 4.0413279, 4.04311915, 4.0448142, 4.04662435, 4.0483553, 4.0499498, 4.05147295, 4.05316935, 4.0548281, 4.0566325999999995, 4.05836265, 4.060136, 4.06193735, 4.0637387, 4.06562465, 4.0676366, 4.069704199999999, 4.0717898, 4.0739547, 4.0761008, 4.0786196, 4.08114415, 4.083566599999999, 4.0863899, 4.089237000000001, 4.09246785, 4.09557165, 4.0989263, 4.1025997499999995, 4.1065266, 4.11048785, 4.11511, 4.1195439, 4.1247714, 4.1300955, 4.1359954, 4.1421846250000005, 4.1497518399999995]]"
                    unit = "V"
                    group = "Basic parameters"
                }

                R0 {
                    label = "Internal resistance"
                    widget = edit
                    type = generic
                    default_value = "[4.6198e-3, 1.7810e-3, 1.1351e-3]"
                    unit = "Ω"
                    group = "Basic parameters"
                }

                eta {
                    label = "Coulombic efficiency"
                    widget = edit
                    type = generic
                    default_value = "[0.98174, 0.99102, 0.98965]"
                    group = "Basic parameters"
                }

                cell_NO {
                    label = "Number of cells in parallel"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Basic parameters"
                }

                nom_Q_combo {
                    label = "Nominal capacity"
                    widget = combo
                    combo_values = "Total capacity", "Discharge capacity"
                    type = string
                    default_value = "Total capacity"
                    group = "Basic parameters"
                    no_evaluate

                    CODE property_value_edited
                        if new_value=="Total capacity":
                            mdl.enable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.disable_property(mdl.prop(container_handle, "V_min"))
                            mdl.disable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_discharge"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.enable_property(mdl.prop(container_handle, "V_min"))
                            mdl.enable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_discharge"))
                    ENDCODE
                }

                Q_discharge {
                    label = "Discharge capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                    disabled
                }

                V_min {
                    label = "Minimum/cut-off voltage"
                    widget = edit
                    type = generic
                    default_value = "2.81"
                    unit = "V"
                    group = "Basic parameters"
                    disabled
                }

                I_dis {
                    label = "Discharge rate"
                    widget = edit
                    type = generic
                    default_value = "15"
                    unit = "A"
                    group = "Basic parameters"
                    disabled
                }

                Q_total {
                    label = "Total capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                }

                Ts {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "s"
                    group = "Basic parameters"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Basic parameters"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "basic_parameters")
                    ENDCODE
                }

                RC_NO {
                    label = "Model order"
                    widget = combo
                    combo_values = "None", "1", "2", "3"
                    type = string
                    default_value = "1"
                    group = "Diffusion process:3"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        parallel_rc = mdl.get_item("Parallel RC", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        mdl.set_property_value(mdl.prop(parallel_rc, "RC_number"), new_value)
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.disable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="1":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="2":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="3":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.enable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.enable_property(mdl.prop(container_handle, "C3"))
                    ENDCODE
                }

                R1 {
                    label = "Resistor 1"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                }

                C1 {
                    label = "Capacitor 1"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                }

                R2 {
                    label = "Resistor 2"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C2 {
                    label = "Capacitor 2"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                R3 {
                    label = "Resistor 3"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C3 {
                    label = "Capacitor 3"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                H_type {
                    label = "Hysteresis model"
                    widget = combo
                    combo_values = "None", "One state"
                    type = string
                    default_value = "One state"
                    group = "Voltage hysteresis:4"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        Hysteresis = mdl.get_item("Hysteresis", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if new_value=="None":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "None")
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        if new_value=="One state":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "One state")
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    ENDCODE
                }

                T_vector_h {
                    label = "Temperatures vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    unit = "celsius"
                    group = "Voltage hysteresis"
                }

                SOC_vector_h {
                    label = "State of charge vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Voltage hysteresis"
                }

                M0 {
                    label = "M0 parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.0031315, 0.0023535, 0.0011502]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                M {
                    label = "M parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.039929, 0.020018, 0.020545]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                gamma {
                    label = "Gamma parameter"
                    widget = edit
                    type = generic
                    default_value = "[67.207e-3, 92.645e-3, 67.840e-3]"
                    group = "Voltage hysteresis"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Voltage hysteresis"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "voltage_hysteresis")
                    
                    ENDCODE
                }

                balancing {
                    label = "Balancing circuit"
                    widget = combo
                    combo_values = "None", "Passive", "Direct current input"
                    type = string
                    default_value = "None"
                    group = "Balancing circuit:5"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION, ITEM_TAG
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        passive_balancing_subsystem = mdl.get_item("Passive Balancing", parent=sub_handle, item_type=ITEM_COMPONENT)
                        Sum3 = mdl.get_item("Sum3", parent=sub_handle, item_type=ITEM_COMPONENT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        Goto3 = mdl.get_item("Goto3", parent=sub_handle, item_type=ITEM_TAG)
                    
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            try:
                                mdl.delete_item(mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT))
                            except:
                                pass
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "None")
                            try:
                                mdl.create_connection(start=port_T, end=Goto3, name = "Connection1131")
                            except:
                                pass
                        elif new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Passive balancing")
                            if old_value=="Direct current input":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:  #elif old_value=="None":
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                    
                            mdl.create_connection(start=mdl.term(passive_balancing_subsystem, "BL_SW"), end=mdl.term(bus_split, "out1"))
                            mdl.create_connection(start=mdl.term(Sum3, "out"), end=mdl.term(passive_balancing_subsystem, "V_term"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Direct current input")
                            if old_value=="Passive":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                            mdl.create_connection(start=mdl.term(bus_split, "out1"), end=mdl.term(passive_balancing_subsystem, "I_in"))
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                    ENDCODE
                }

                R_balance {
                    label = "Balancing parallel resistor"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "Ω"
                    group = "Balancing circuit"
                    disabled
                }

                meas_SOH {
                    label = "State of health"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements:6"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOH = mdl.create_component("core/Probe",
                                                        name="SOH",
                                                        parent=sub_handle,
                                                        position=(8488, 7760),)
                            Termination1 = mdl.get_item("Termination1", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOH, "in"), end=mdl.term(Termination1, "in"))
                    
                        else:
                            if mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_SOC {
                    label = "State of charge"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOC = mdl.create_component("core/Probe",
                                                        name="SOC",
                                                        parent=sub_handle,
                                                        position=(8488, 7824),)
                            Termination3 = mdl.get_item("Termination3", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOC, "in"), end=mdl.term(Termination3, "in"))
                    
                        else:
                            if mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_OCV {
                    label = "Open circuit voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            OCV = mdl.create_component("core/Probe",
                                                        name="OCV",
                                                        parent=sub_handle,
                                                        position=(8488, 7888),)
                            Termination4 = mdl.get_item("Termination4", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(OCV, "in"), end=mdl.term(Termination4, "in"))
                    
                        else:
                            if mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Rint {
                    label = "Internal resistance"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Internal_resistance = mdl.create_component("core/Probe",
                                                        name="Internal resistance",
                                                        parent=sub_handle,
                                                        position=(8488, 7952),)
                            Termination5 = mdl.get_item("Termination5", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Internal_resistance, "in"), end=mdl.term(Termination5, "in"))
                    
                        else:
                            if mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Q {
                    label = "Total capacity"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Total_capacity = mdl.create_component("core/Probe",
                                                        name="Total capacity",
                                                        parent=sub_handle,
                                                        position=(8488, 8016),)
                            Termination6 = mdl.get_item("Termination6", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Total_capacity, "in"), end=mdl.term(Termination6, "in"))
                    
                        else:
                            if mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Ibal {
                    label = "Balancing current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            current = mdl.create_component("core/Probe",
                                                        name="Balancing current",
                                                        parent=sub_handle,
                                                        position=(8688, 7760),)
                            Termination2 = mdl.get_item("Termination2", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(current, "in"), end=mdl.term(Termination2, "in"))
                    
                        else:
                            if mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Icell {
                    label = "Cell current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Cell_current = mdl.create_component("core/Probe",
                                                        name="Cell current",
                                                        parent=sub_handle,
                                                        position=(8688, 7824),)
                            Termination7 = mdl.get_item("Termination7", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Cell_current, "in"), end=mdl.term(Termination7, "in"))
                    
                        else:
                            if mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_T {
                    label = "Temperature"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Temperature = mdl.create_component("core/Probe",
                                                        name="Temperature",
                                                        parent=sub_handle,
                                                        position=(8688, 7888),)
                            Termination8 = mdl.get_item("Termination8", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Temperature, "in"), end=mdl.term(Termination8, "in"))
                    
                        else:
                            if mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_hyst {
                    label = "Hysteresis voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            voltage = mdl.create_component("core/Probe",
                                                        name="Hysteresis voltage",
                                                        parent=sub_handle,
                                                        position=(8688, 7952),)
                            Termination9 = mdl.get_item("Termination9", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(voltage, "in"), end=mdl.term(Termination9, "in"))
                    
                        else:
                            if mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    Init_SOC = mdl.get_property_value(mdl.prop(item_handle, "Init_SOC"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                    cell_NO = mdl.get_property_value(mdl.prop(item_handle, "cell_NO"))
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                    C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                    R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                    C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                    R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                    C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    T_vector_h = mdl.get_property_value(mdl.prop(item_handle, "T_vector_h"))
                    SOC_vector_h = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector_h"))
                    M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                    M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                    gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                    balancing = mdl.get_property_value(mdl.prop(item_handle, "balancing"))
                    R_balance = mdl.get_property_value(mdl.prop(item_handle, "R_balance"))
                    meas_SOH = mdl.get_property_value(mdl.prop(item_handle, "meas_SOH"))
                    meas_SOC = mdl.get_property_value(mdl.prop(item_handle, "meas_SOC"))
                    meas_OCV = mdl.get_property_value(mdl.prop(item_handle, "meas_OCV"))
                    meas_Rint = mdl.get_property_value(mdl.prop(item_handle, "meas_Rint"))
                    meas_Q = mdl.get_property_value(mdl.prop(item_handle, "meas_Q"))
                    meas_Ibal = mdl.get_property_value(mdl.prop(item_handle, "meas_Ibal"))
                    meas_Icell = mdl.get_property_value(mdl.prop(item_handle, "meas_Icell"))
                    meas_T = mdl.get_property_value(mdl.prop(item_handle, "meas_T"))
                    meas_hyst = mdl.get_property_value(mdl.prop(item_handle, "meas_hyst"))
                    # HEADER STOP
                    # Entire code here is for calculating Q_total from Q_discharge
                    from typhoon.api.schematic_editor.exception import SchApiException
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    import scipy.interpolate as interpolate
                
                    sub_handle = mdl.get_sub_level_handle(item_handle)
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    capacity_module = mdl.get_item("Capacity", parent=sub_handle, item_type=ITEM_COMPONENT)
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                
                    if nom_Q_combo == "Total capacity":
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_total)
                
                    elif nom_Q_combo == "Discharge capacity":
                        # Finding the voltage drops: V_RC_max
                        if RC_NO == "None":
                            RC_drop = 0
                        elif RC_NO == "1":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            RC_drop = R1*I_dis
                        elif RC_NO == "2":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            RC_drop = (R1+R2)*I_dis
                        elif RC_NO == "3":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                            RC_drop = (R1+R2+R3)*I_dis
                
                        # Finding the voltage drops: V_hyst_max
                        if H_type == "None":
                            H_drop = 0
                        elif H_type == "One state":
                            M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                            M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                            H_drop = np.mean(M) + np.mean(M0)
                
                        if np.ndim(Q_discharge) == 0:
                            if np.ndim(R0) == 0:
                                OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    # This is a bad cornercase where OCV is a function of temperature,
                                    # but neither R0 nor Q_discharge are. We take last temperature dependant OCV
                                    SOC_from_OCV = interpolate.interp1d(OCV[-1], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 1:
                                Q_max = [0]*len(R0)
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 2:
                                Q_max = [0]*len(R0[-1])
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 1:
                            Q_max = Q_discharge.copy()
                            for index, temp in enumerate(T_vector):
                                if np.ndim(R0) == 0:
                                    OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 1:
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 2:
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    # [-1] index is used to find the last of the SOH vector
                
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max[index] = Q_discharge[index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 2:
                            Q_max = Q_discharge.copy()
                            for health_index in range(len(SOH_vector)):
                                for index, temp in enumerate(T_vector):
                                    if np.ndim(R0) == 0:
                                        OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 1:
                                        OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 2:
                                        OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                        # [-1] index is used to find the last of the SOH vector
                
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[health_index][index] = Q_discharge[health_index][index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_max)
                        if np.min(np.min(Q_max))<0:
                            info(f"{Q_max=}")
                            raise SchApiException("Provided discharge data is not valid")
                ENDCODE

                CODE define_icon
                    image('battery_cell.svg')
                ENDCODE
            }
        }
        [
            position = 9536, 8344
            size = 32, 64
        ]

        component src_scada_input "battery temp 3" {
            def_value = "5"
            execution_rate = "Ts"
            unit = ""
        }
        [
            position = 7216, 8688
        ]

        component "core/Current Measurement" current_3 {
            execution_rate = "Ts"
            sig_output = "True"
        }
        [
            position = 9616, 8296
            rotation = down
            scale = 1, -1
            size = 64, 32
        ]

        component gen_integrator Integrator5 {
        }
        [
            position = 9792, 8112
            hide_name = True
        ]

        component gen_probe chgAh_3 {
        }
        [
            position = 9888, 8112
        ]

        component gen_integrator Integrator6 {
        }
        [
            position = 9792, 8176
            hide_name = True
        ]

        component gen_probe disAh_3 {
        }
        [
            position = 9888, 8176
        ]

        component gen_c_function "C function6" {
            input_terminals = "real current;"
            input_terminals_dimensions = "inherit"
            input_terminals_feedthrough = "True"
            input_terminals_show_labels = "False"
            output_fnc = "/*Begin code section*/
if (current>0) {
    out = current;
    out2 = 0;
}
else if (current<0) {
    out2 = current;
    out = 0;
}
/*End code section*/"
            output_terminals = "real out;inherit out2;"
            output_terminals_dimensions = "inherit;inherit"
            output_terminals_feedthrough = "True;True"
            output_terminals_show_labels = "False;False"
        }
        [
            position = 9696, 8144
            hide_name = True
            size = 48, 48
        ]

        component gen_probe temperature_3 {
        }
        [
            position = 9856, 7808
        ]

        component gen_probe sw_select_1 {
        }
        [
            position = 8144, 7720
        ]

        component Subsystem "Dyn Battery Cell_25" {
            layout = static
            component Subsystem "SOC Model" {
                layout = dynamic
                component gen_gain Gain2 {
                    gain = "1/numeric_scale"
                }
                [
                    position = 7944, 8152
                    hide_name = True
                ]

                component gen_integrator Integrator {
                    limit_lower = "-0.1e6"
                    limit_output = "True"
                    limit_upper = "1.1e6"
                    show_init_condition = "external"
                    show_reset = "rising"
                }
                [
                    position = 7840, 8152
                ]

                component gen_gain Gain1 {
                    execution_rate = "Ts"
                    gain = "1/3600.0"
                }
                [
                    position = 7688, 8128
                    hide_name = True
                ]

                component gen_c_function Coulombic_Eff {
                    input_terminals = "real i;real eta;"
                    input_terminals_dimensions = "inherit;inherit"
                    input_terminals_feedthrough = "True;True"
                    input_terminals_show_labels = "True;True"
                    output_fnc = "/*Begin code section*/
// If the battery is being discharged, efficiency is 1
// If battery is being charged, efficiency eta is used
if(i>0)
    i_out = i;
else
    i_out = eta*i;
/*End code section*/"
                    output_terminals = "real i_out;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "False"
                }
                [
                    position = 7496, 8120
                    size = 48, 48
                ]

                component gen_gain Gain3 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7752, 8128
                    hide_name = True
                ]

                component gen_product Product1 {
                    signs = "*/"
                }
                [
                    position = 7608, 8128
                    hide_name = True
                ]

                component gen_sum Sum1 {
                    signs = "+-"
                }
                [
                    position = 8072, 8088
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                }
                [
                    position = 7976, 8080
                ]

                component src_scada_input "SOC Override" {
                    def_value = "Init_SOC/100.0"
                    execution_rate = "Ts"
                    max = "1"
                    min = "0"
                    unit = ""
                }
                [
                    position = 7472, 8432
                ]

                component gen_sum Sum2 {
                    signs = "+-"
                }
                [
                    position = 7600, 8424
                    hide_name = True
                ]

                component src_constant Constant2 {
                    execution_rate = "Ts"
                }
                [
                    position = 7520, 8392
                    hide_name = True
                ]

                component "core/Edge Detection" "Edge Detection1" {
                }
                [
                    position = 7712, 8168
                    hide_name = True
                    size = 32, 32
                ]

                component gen_gain Gain4 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7720, 8424
                    hide_name = True
                ]

                component gen_limiter Limit1 {
                    lower_limit = "-0.1"
                }
                [
                    position = 8160, 8088
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8112
                ]

                port SOC_pu {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8240, 8088
                ]

                port Q {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8256
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8192
                ]

                junction Junction1 sp
                [
                    position = 7656, 8424
                ]

                comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Ah-As</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling  </span></p></body></html> ENDCOMMENT 
                [
                    position = 7664, 8056
                ]

                comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Taking into account</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">the Coulombic Efficiency</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">during charge </span></p></body></html> ENDCOMMENT 
                [
                    position = 7424, 8024
                ]

                comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7736, 8056
                ]

                comment Comment4 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling Inversion</span></p></body></html> ENDCOMMENT 
                [
                    position = 7896, 8176
                ]

                comment Comment6 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">pu</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling </span> </p></body></html> ENDCOMMENT 
                [
                    position = 7584, 8056
                ]

                comment Comment7 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Initial SOC and</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">SOC Override</span></p></body></html> ENDCOMMENT 
                [
                    position = 7512, 8328
                ]

                comment Comment8 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7696, 8448
                ]

                connect I Coulombic_Eff.i as Connection1019
                connect Integrator.in Gain3.out as Connection1024
                connect Gain3.in Gain1.out as Connection1025
                connect Gain2.in Integrator.out as Connection1026
                connect Product1.in Coulombic_Eff.i_out as Connection1027
                connect Product1.out Gain1.in as Connection1028
                connect Constant1.out Sum1.in as Connection1030
                connect Sum1.in1 Gain2.out as Connection1031
                [
                    position = 0, 0
                    breakpoints = 8024, 8096; 8024, 8152
                ]
                connect Q Product1.in1 as Connection1033
                connect Constant2.out Sum2.in as Connection1034
                connect Sum2.in1 "SOC Override.out" as Connection1035
                connect Integrator.reset "Edge Detection1.Out1" as Connection1042
                connect "Edge Detection1.In1" Junction1 as Connection1043
                connect Junction1 Sum2.out as Connection1044
                [
                    position = 0, 0
                ]
                connect Integrator.init_condition_port Gain4.out as Connection1045
                connect Gain4.in Junction1 as Connection1046
                connect eta Coulombic_Eff.eta as Connection1047
                [
                    position = 0, 0
                    breakpoints = 7440, 8192; 7440, 8128
                ]
                connect Sum1.out Limit1.in as Connection1048
                connect Limit1.out SOC_pu as Connection1049

                Init_SOC = "Init_SOC"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">SOC Model models the state of charge of the battery by applying ideal Coulomb Counting.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Following options are supported:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Coulombic Efficiency</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Available capacity as signal input Q</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Inital SOC supported</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- SOC can be overridden during the simulation (reset to any value)</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Full numerical range of the integrator is used </p></body></html>"

                    Init_SOC {
                        label = "Initial SOC"
                        widget = edit
                        type = generic
                        default_value = "80"
                        unit = "%"
                    }

                    Ts {
                        label = "execution_rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE init
                        numeric_scale = 1e6
                    ENDCODE
                }
            }
            [
                position = 8072, 8072
                size = 128, 64
            ]

            component "core/Signal Controlled Voltage Source" Vt {
            }
            [
                position = 8352, 8384
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component "core/Current Measurement" It {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8448, 8336
                size = 64, 32
            ]

            component gen_sum Sum3 {
                signs = "++--"
            }
            [
                position = 8016, 8384
                hide_name = True
            ]

            component src_scada_input SOH_set {
                def_value = "1"
                execution_rate = "Ts"
                max = "1"
                min = "0"
                unit = ""
            }
            [
                position = 7224, 8032
            ]

            component Subsystem Capacity {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Qnom {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port Q {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Qnom.out Q as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Capacity can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Qnom {
                        label = "Nominal Capacity"
                        widget = edit
                        type = generic
                        default_value = "Q_discharge"
                        unit = "Ah"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Qnom = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Qnom_value = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Qnom_value)) < 0:
                            raise SchApiException("Cell total capacity cannot be smaller than 0. Please check the data again")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Qnom_value) == 0:
                            Qnom = mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Qnom, "value"), Qnom_value)
                            mdl.set_property_value(mdl.prop(Qnom, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Q)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Q)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7816
                size = 128, 56
            ]

            component Subsystem "Internal Resistance" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Rint {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port R {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Rint.out R as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Resistance can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Rint {
                        label = "Series Resistance"
                        widget = edit
                        type = generic
                        default_value = "R0"
                        unit = "Ω"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Rint = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Rint_prop_value = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Rint_prop_value)) < 0:
                            raise SchApiException("Provided Internal resistance cannot be smaller than 0")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Rint = mdl.get_item("R", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Rint_prop_value) == 0:
                            Rint = mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Rint, "value"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(Rint, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Rint)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Rint)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Internal resistance is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7896
                size = 128, 56
            ]

            component Subsystem "Coulombic efficiency" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Efficiency_constant {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port eta {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Efficiency_constant.out eta as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Coulombic efficiency can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    eta {
                        label = "Coulombic efficiency"
                        widget = edit
                        type = generic
                        default_value = "eta"
                        unit = "ohm"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        eta_prop_value = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(eta_prop_value)) < 0:
                            raise SchApiException("Cell coulombic efficiency cannot be smaller than 0.")
                        if np.max(np.max(eta_prop_value)) > 1:
                            raise SchApiException("Cell coulombic efficiency cannot be larger than 1.")
                    
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(eta_prop_value) == 0:
                            Efficiency_constant = mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "value"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_eta)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_eta)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7984
                size = 128, 56
            ]

            component Subsystem "Open Circuit Voltage" {
                layout = dynamic
                component lut_1d LUT_1D {
                    ext_mode = "Linear"
                }
                [
                    position = 8432, 8200
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8416, 8096
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port OCV {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOC {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOC</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect LUT_1D.addr SOC as Connection1
                connect LUT_1D.value OCV as Connection2
                connect termination_T.in T as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage is always a function of State of Charge.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage can be a function of temperature but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a list, then it\'s dependace is of SOC, regardless of what is written inside temperature vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a nested list, then it\'s dependance is first of SOC and then of temperature.</p></body></html>"

                    OCV {
                        label = "Open circuit voltage vector (table)"
                        widget = edit
                        type = generic
                        default_value = "OCV"
                        unit = "V"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        OCV_value = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    
                        if not np.all(np.diff(SOC_vector) >= 0):
                            raise SchApiException("Provided SOC data is not monotonically nondecreasing, please check the documentation")
                    
                        if np.min(np.min(OCV_value)) < 0:
                            raise SchApiException("Open circuit voltage cannot be negative for any point.")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_OCV = mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(OCV_value) == 1:
                            LUT_1D = mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), execution_rate)
                            if not np.all(np.diff(OCV_value) >= 0):
                                raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                        elif np.ndim(OCV_value) == 2:
                            for OCV_1D in OCV_value:  # checks for non decaying OCV for each Temp
                                if not np.all(np.diff(OCV_value) >= 0):
                                    raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_SOC)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_OCV)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), execution_rate)
                    
                        else:
                            raise SchApiException("Provided discharge data is not valid")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7672, 7816
                size = 128, 56
            ]

            component Subsystem "Parallel RC" {
                layout = dynamic
                component gen_terminator termination_I {
                }
                [
                    position = 7832, 8048
                ]

                component gen_product Product_1a {
                }
                [
                    position = 7952, 8256
                ]

                component gen_product Product_1b {
                    signs = "*/"
                }
                [
                    position = 8064, 8112
                ]

                component gen_product Product_1c {
                    signs = "/*"
                }
                [
                    position = 8176, 8216
                    rotation = down
                ]

                component gen_sum Sum_1 {
                    signs = "+-"
                }
                [
                    position = 8176, 8120
                ]

                component gen_integrator Integrator_1 {
                }
                [
                    position = 8304, 8120
                ]

                component src_constant Constant_C1 {
                    execution_rate = "Ts"
                    value = "C1"
                }
                [
                    position = 7832, 8208
                ]

                component src_constant Constant_R1 {
                    execution_rate = "Ts"
                    value = "R1"
                }
                [
                    position = 7832, 8264
                ]

                component gen_sum Sum {
                    signs = "+"
                }
                [
                    position = 8448, 8128
                ]

                port V {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8544, 8136
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7736, 8120
                ]

                junction Junction1 sp
                [
                    position = 8344, 8520
                ]

                connect I termination_I.in as Connection127
                [
                    position = 0, 0
                ]
                connect Product_1a.in Constant_C1.out as Connection128
                connect Product_1a.in1 Constant_R1.out as Connection129
                connect Product_1b.in I as Connection131
                connect Product_1b.in1 Constant_C1.out as Connection132
                connect Product_1a.out Product_1c.in as Connection133
                connect Sum_1.in1 Product_1c.out as Connection134
                connect Product_1b.out Sum_1.in as Connection135
                connect Integrator_1.in Sum_1.out as Connection136
                connect Integrator_1.out Product_1c.in1 as Connection137
                connect Integrator_1.out Sum.in as Connection138
                connect Sum.out V as Connection139

                mask {
                    description = "The parallel RC subsystem emulates cell voltage drop due to the physical proccess diffusion of lithium ions.
                                   This is a standard method of implementing a cell in electrical circuits. The fidelity of the cell response can be modeled by increasing the order of the system. If the selected Model Order is less than 3, then the values for unused resistors and capacitors are not propagated. All the RC circuits are implemented using signal processing. If None is selected than the output voltage drop is a constant 0."

                    RC_number {
                        label = "Model order"
                        widget = combo
                        combo_values = "None", "1", "2", "3"
                        type = string
                        default_value = "1"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            port_V = mdl.get_item("V", parent=sub_handle, item_type=ITEM_PORT)
                            port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        
                            def delete_constant():
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                        
                            def delete_1():
                                mdl.delete_item(mdl.get_item("Constant_C1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_2():
                                mdl.delete_item(mdl.get_item("Constant_C2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_3():
                                mdl.delete_item(mdl.get_item("Constant_C3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def create_constant():
                                Constant_0 = mdl.create_component("core/Constant",
                                                            name="Constant_0",
                                                            parent=sub_handle,)
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V)
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                            def create_1():
                                Product_1a = mdl.create_component("core/Product",
                                                                name="Product_1a",
                                                                parent=sub_handle,
                                                                position=(7952, 8256),)
                                Product_1b = mdl.create_component("core/Product",
                                                                name="Product_1b",
                                                                parent=sub_handle,
                                                                position=(8064, 8112))
                                Product_1c = mdl.create_component("core/Product",
                                                                name="Product_1c",
                                                                parent=sub_handle,
                                                                position=(8176, 8216),
                                                                rotation="down")
                                Sum_1 = mdl.create_component("core/Sum",
                                                                name="Sum_1",
                                                                parent=sub_handle,
                                                                position=(8176, 8120),)
                                Integrator_1 = mdl.create_component("core/Integrator",
                                                                name="Integrator_1",
                                                                parent=sub_handle,
                                                                position=(8304, 8120),)
                                Constant_C1 = mdl.create_component("core/Constant",
                                                                name="Constant_C1",
                                                                parent=sub_handle,
                                                                position=(7832, 8208))
                                Constant_R1 = mdl.create_component("core/Constant",
                                                                name="Constant_R1",
                                                                parent=sub_handle,
                                                                position=(7832, 8264))
                        
                                mdl.set_property_value(mdl.prop(Sum_1, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_1b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_1c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R1, "value"), "R1")
                                mdl.set_property_value(mdl.prop(Constant_C1, "value"), "C1")
                        
                                mdl.create_connection(start=mdl.term(Product_1a, "in"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "in1"), end=mdl.term(Constant_R1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_1b, "in1"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "out"), end=mdl.term(Product_1c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_1, "in1"), end=mdl.term(Product_1c, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "out"), end=mdl.term(Sum_1, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "in"), end=mdl.term(Sum_1, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Product_1c, "in1"))
                        
                            def create_2():
                                Product_2a = mdl.create_component("core/Product",
                                                            name="Product_2a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+400),)
                                Product_2b = mdl.create_component("core/Product",
                                                            name="Product_2b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+400))
                                Product_2c = mdl.create_component("core/Product",
                                                            name="Product_2c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+400),
                                                            rotation="down")
                                Sum_2 = mdl.create_component("core/Sum",
                                                            name="Sum_2",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+400),)
                                Integrator_2 = mdl.create_component("core/Integrator",
                                                            name="Integrator_2",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+400),)
                                Constant_C2 = mdl.create_component("core/Constant",
                                                            name="Constant_C2",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+400))
                                Constant_R2 = mdl.create_component("core/Constant",
                                                            name="Constant_R2",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+400))
                        
                                mdl.set_property_value(mdl.prop(Sum_2, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_2b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_2c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R2, "value"), "R2")
                                mdl.set_property_value(mdl.prop(Constant_C2, "value"), "C2")
                        
                                mdl.create_connection(start=mdl.term(Product_2a, "in"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "in1"), end=mdl.term(Constant_R2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_2b, "in1"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "out"), end=mdl.term(Product_2c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_2, "in1"), end=mdl.term(Product_2c, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "out"), end=mdl.term(Sum_2, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "in"), end=mdl.term(Sum_2, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Product_2c, "in1"))
                        
                            def create_3():
                                Product_3a = mdl.create_component("core/Product",
                                                            name="Product_3a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+200),)
                                Product_3b = mdl.create_component("core/Product",
                                                            name="Product_3b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+200))
                                Product_3c = mdl.create_component("core/Product",
                                                            name="Product_3c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+200),
                                                            rotation="down")
                                Sum_3 = mdl.create_component("core/Sum",
                                                            name="Sum_3",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+200),)
                                Integrator_3 = mdl.create_component("core/Integrator",
                                                            name="Integrator_3",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+200),)
                                Constant_C3 = mdl.create_component("core/Constant",
                                                            name="Constant_C3",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+200))
                                Constant_R3 = mdl.create_component("core/Constant",
                                                            name="Constant_R3",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+200))
                        
                                mdl.set_property_value(mdl.prop(Sum_3, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_3b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_3c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R3, "value"), "R3")
                                mdl.set_property_value(mdl.prop(Constant_C3, "value"), "C3")
                        
                                mdl.create_connection(start=mdl.term(Product_3a, "in"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "in1"), end=mdl.term(Constant_R3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_3b, "in1"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "out"), end=mdl.term(Product_3c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_3, "in1"), end=mdl.term(Product_3c, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "out"), end=mdl.term(Sum_3, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "in"), end=mdl.term(Sum_3, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Product_3c, "in1"))
                        
                            #####################################################
                        
                            if new_value == "None":
                                delete_1()
                        
                                if old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                        
                                create_constant()
                        
                            elif new_value == "1":
                                if old_value == "None":
                                    delete_constant()
                                    create_1()
                                elif old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                                if old_value == "1":
                                    pass
                                else:
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Sum = mdl.create_component("core/Sum",
                                                                name="Sum",
                                                                parent=sub_handle,
                                                                position=(8450, 8130))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "+")
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                        
                            elif new_value == "2":
                                if old_value == "None" or old_value == "1":
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                    create_2()
                                elif old_value == "3":
                                    delete_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                        
                            elif new_value == "3":
                                if old_value == "None" or old_value == "1":
                                    create_2()
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                create_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "+++")
                        
                                try:
                                    Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                                except:
                                    pass
                                Integrator_3 = mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Sum, "in2"))
                        ENDCODE
                    }

                    R1 {
                        label = "Resistance 1"
                        widget = edit
                        type = generic
                        default_value = "R1"
                        unit = "Ω"
                    }

                    C1 {
                        label = "Capacitance 1"
                        widget = edit
                        type = generic
                        default_value = "C1"
                        unit = "F"
                    }

                    R2 {
                        label = "Resistance 2"
                        widget = edit
                        type = generic
                        default_value = "R2"
                        unit = "Ω"
                    }

                    C2 {
                        label = "Capacitance 2"
                        widget = edit
                        type = generic
                        default_value = "C2"
                        unit = "F"
                    }

                    R3 {
                        label = "Resistance 3"
                        widget = edit
                        type = generic
                        default_value = "R3"
                        unit = "Ω"
                    }

                    C3 {
                        label = "Capacitance 3"
                        widget = edit
                        type = generic
                        default_value = "C3"
                        unit = "F"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        RC_number = mdl.get_property_value(mdl.prop(item_handle, "RC_number"))
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.exception import SchApiException
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    
                        if R1 < 0:
                            raise SchApiException("R1 cannot be negative.")
                        if R2 < 0:
                            raise SchApiException("R2 cannot be negative.")
                        if R3 < 0:
                            raise SchApiException("R3 cannot be negative.")
                        if C1 < 0:
                            raise SchApiException("C1 cannot be negative.")
                        if C2 < 0:
                            raise SchApiException("C2 cannot be negative.")
                        if C3 < 0:
                            raise SchApiException("C3 cannot be negative.")
                    ENDCODE
                }
            }
            [
                position = 7672, 8096
                size = 128, 80
            ]

            component Subsystem "Series voltage drop" {
                layout = dynamic
                component gen_product Product {
                }
                [
                    position = 8224, 8176
                    hide_name = True
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8168
                ]

                port R0 {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8208
                ]

                port V_R0 {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8296, 8176
                ]

                connect Product.out V_R0 as Connection1170
                connect Product.in I as Connection1168
                connect Product.in1 R0 as Connection1169
            }
            [
                position = 7672, 8200
                size = 128, 64
            ]

            component Subsystem "Passive Balancing" {
                layout = dynamic
                component src_constant Constant_0 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8136, 8280
                ]

                port I_bal {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8208
                ]

                port I_t {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7992, 7936
                ]

                port I_cell {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8072
                ]

                connect I_t I_cell as direct_connection
                connect Constant_0.out I_bal as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Passive balancing subsystem is dynamically changed by changing the type of balancing:<br></br>1. \"None\" mode simply propagates the total input current as the cell current and 0 value for balance current.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. \"Passive balancing\" introduces a current flowing through the resistor parallel to the cell. Value of resistance is specified as a parameter and an input for terminal voltage and balancing switch is created. Balancing switch opens and closes the ideal switch connecting cell terminals to the resistor.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. \"Direct current input\" option simply subtracts the signal out of the I_in terminal from the I_t and outputs in the I_cell signal output. I_bal is therefore the signal that enters I_in terminal.</p></body></html>"

                    balancing_combo {
                        label = "Balancing mode"
                        widget = combo
                        combo_values = "None", "Passive balancing", "Direct current input"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            I_t = mdl.get_item("I_t", parent=sub_handle, item_type=ITEM_PORT)
                            I_cell = mdl.get_item("I_cell", parent=sub_handle, item_type=ITEM_PORT)
                            I_bal = mdl.get_item("I_bal", parent=sub_handle, item_type=ITEM_PORT)
                        
                            if new_value==old_value:
                                pass
                            elif new_value=="None":
                                if old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                                mdl.create_connection(start=I_t, end=I_cell, name="direct_connection")
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=I_bal, name="Connection1")
                        
                            elif new_value=="Passive balancing":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    try:
                                        mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                        mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    except:
                                        pass
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                BL_SW = mdl.create_port(name="BL_SW",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                V_term = mdl.create_port(name="V_term",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8220),)
                                R_balance_gain = mdl.create_component("core/Gain",
                                                        name="R_balance_gain",
                                                        parent=sub_handle,
                                                        position=(8135, 8200))
                                signal_switch = mdl.create_component("core/Signal switch",
                                                        name="signal_switch",
                                                        parent=sub_handle,
                                                        position=(8262, 8240))
                                unit_delay = mdl.create_component("core/Unit Delay",
                                                        name="unit_delay",
                                                        parent=sub_handle,
                                                        position=(8325, 8216))
                        
                                mdl.set_property_value(mdl.prop(signal_switch, "threshold"), 0.5)
                                mdl.set_property_value(mdl.prop(R_balance_gain, "gain"), "1/R_balance")
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                                mdl.create_connection(start=BL_SW, end=mdl.term(signal_switch, "in2"))
                                mdl.create_connection(start=V_term, end=mdl.term(R_balance_gain, "in"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in"), end=mdl.term(R_balance_gain, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in1"), end=mdl.term(Constant_0, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "out"), end=mdl.term(unit_delay, "in"))
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=mdl.term(unit_delay, "out"))
                                mdl.create_connection(start=I_bal, end=mdl.term(unit_delay, "out"))
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        
                            elif new_value=="Direct current input":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                    mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                elif old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                                I_in = mdl.create_port(name="I_in",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=I_in)
                                mdl.create_connection(start=I_bal, end=I_in)
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        ENDCODE
                    }

                    R_balance {
                        label = "Balancing Resistance"
                        widget = edit
                        type = generic
                        default_value = "R_balance"
                        unit = "Ω"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE
                }
            }
            [
                position = 7520, 8344
                size = 128, 112
            ]

            component gen_gain Cell_NO {
                gain = "1/cell_NO"
            }
            [
                position = 7408, 8312
                hide_name = True
            ]

            component gen_probe "Cell voltage" {
            }
            [
                position = 8688, 8064
            ]

            component gen_terminator Termination1 {
            }
            [
                position = 8400, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination2 {
            }
            [
                position = 8576, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination3 {
            }
            [
                position = 8400, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination4 {
            }
            [
                position = 8400, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination5 {
            }
            [
                position = 8400, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination6 {
            }
            [
                position = 8400, 8064
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination7 {
            }
            [
                position = 8576, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination8 {
            }
            [
                position = 8576, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination9 {
            }
            [
                position = 8576, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination10 {
            }
            [
                position = 8576, 8064
                rotation = down
                hide_name = True
            ]

            component Subsystem Hysteresis {
                layout = dynamic
                component gen_terminator termination_T {
                }
                [
                    position = 7968, 8280
                ]

                component gen_terminator termination_I {
                }
                [
                    position = 8080, 8440
                ]

                component gen_terminator termination_eta {
                }
                [
                    position = 7976, 8056
                ]

                component gen_c_function C_function {
                    global_variables = "real h;real h_mem;real h1;real h2;real current_sign;real efficiency;"
                    init_fnc = "/*Begin code section*/
current_sign = 1;
h_mem = 0;
efficiency = 1;
/*End code section*/"
                    input_terminals = "real current;inherit M0;inherit M;inherit gamma_param;inherit eta;inherit Q;inherit Ts;"
                    input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
if (current<0){
    current_sign = -1;
    efficiency = eta;
}
else if (current>0){
    current_sign = 1;
    efficiency = 1;
}

h = exp(-fabs(current*efficiency*gamma_param/Q*Ts))*h_mem - (1-exp(-fabs(current*efficiency*gamma_param/Q*Ts)))*current_sign;
h_mem = h;
V_h = M0*current_sign + M*h;
/*End code section*/"
                    output_terminals = "inherit V_h;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "True"
                }
                [
                    position = 8320, 8160
                    scale = 1, -1
                    size = 144, 320
                ]

                component lut_1d M0_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8072, 8240
                ]

                component lut_1d M_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 7992, 8200
                ]

                component lut_1d gamma_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8080, 8160
                ]

                component gen_terminator termination_Q {
                }
                [
                    position = 8016, 7952
                ]

                component gen_terminator termination_Ts {
                }
                [
                    position = 8248, 7952
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                    value = "Ts"
                }
                [
                    position = 8160, 8040
                ]

                component gen_terminator termination_SOC {
                }
                [
                    position = 7976, 8336
                ]

                port I {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7984, 8392
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8104
                ]

                port T {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8216
                ]

                port V_hyst {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8504, 8160
                ]

                port Q {
                    position = left:4
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7896, 8008
                ]

                port SOC {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7856, 8336
                ]

                junction Junction1 sp
                [
                    position = 7936, 8216
                ]

                junction Junction2 sp
                [
                    position = 7936, 8216
                ]

                junction Junction3 sp
                [
                    position = 7904, 8216
                ]

                junction Junction4 sp
                [
                    position = 8040, 8392
                ]

                junction Junction7 sp
                [
                    position = 8208, 8240
                ]

                junction Junction12 sp
                [
                    position = 8192, 8040
                ]

                junction Junction8 sp
                [
                    position = 8032, 8200
                ]

                junction Junction10 sp
                [
                    position = 7904, 8104
                ]

                junction Junction11 sp
                [
                    position = 7936, 8008
                ]

                connect C_function.V_h V_hyst as Connection1164
                connect M_LUT_1D.addr Junction1 as Connection1165
                connect M0_LUT_1D.addr Junction2 as Connection1168
                connect Junction2 Junction1 as Connection1169
                connect gamma_LUT_1D.addr Junction2 as Connection1170
                connect Junction1 Junction3 as Connection1171
                connect Junction3 T as Connection1172
                connect termination_T.in Junction3 as Connection1173
                connect C_function.current Junction4 as Connection1174
                [
                    position = 0, 0
                    breakpoints = 8184, 8280; 8184, 8392
                ]
                connect Junction4 I as Connection1175
                connect termination_I.in Junction4 as Connection1176
                connect gamma_LUT_1D.value C_function.gamma_param as Connection1211
                connect C_function.M0 Junction7 as Connection1192
                connect Constant1.out Junction12 as Connection1212
                connect Junction7 M0_LUT_1D.value as Connection1193
                [
                    position = 0, 0
                ]
                connect Junction12 C_function.Ts as Connection1213
                connect termination_Ts.in Junction12 as Connection1214
                connect M_LUT_1D.value Junction8 as Connection1196
                connect Junction8 C_function.M as Connection1197
                connect termination_eta.in Junction10 as Connection1203
                connect Junction10 eta as Connection1204
                [
                    position = 0, 0
                ]
                connect C_function.eta Junction10 as Connection1205
                connect Q Junction11 as Connection1207
                connect Junction11 termination_Q.in as Connection1208
                [
                    position = 0, 0
                ]
                connect C_function.Q Junction11 as Connection1209
                [
                    position = 0, 0
                    breakpoints = 8024, 8080; 8024, 8008
                ]
                connect SOC termination_SOC.in as Connection1215

                hysteresis_model = "One state"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If hysteresis implementation is \"None\", then the output is a constant 0.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For the \"One state\" implementation, output is a multivariable function referenced from: https://ieeexplore.ieee.org/document/7049363<br></br>This C-function is a function of multiple parameters, including the temperature and SOC dependant M, M0 and gamma.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For each of these parameters, if their value is entered as a constant, they are not functions of temperature and SOC.<br></br>If their value is a list, they are a function of temperature and if it is a nested list, they are a function first of temperature and then of SOC.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"Preisach model\" implementation is also a popular method of representing hysteresis, but is not currently available.<br></br></p></body></html>"

                    hysteresis_model {
                        label = "Hysteresis model"
                        widget = combo
                        combo_values = "None", "One state"
                        type = string
                        default_value = "None"
                        no_evaluate
                    }

                    T_vector {
                        label = "Temperature vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector_h"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector_h"
                    }

                    M0 {
                        label = "M0 parameter"
                        widget = edit
                        type = generic
                        default_value = "M0"
                    }

                    M {
                        label = "M parameter"
                        widget = edit
                        type = generic
                        default_value = "M"
                    }

                    gamma {
                        label = "Gamma parameter"
                        widget = edit
                        type = generic
                        default_value = "gamma"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        M0_value = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M_value = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma_value = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                    
                        if np.min(np.min(M0_value)) < 0:
                            raise SchApiException("M0 parameter cannot be negative for any point.")
                        if np.min(np.min(M_value)) < 0:
                            raise SchApiException("M parameter cannot be negative for any point.")
                        if np.min(np.min(gamma_value)) < 0:
                            raise SchApiException("Gamma parameter cannot be negative for any point.")
                    
                        port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                        port_V_hyst = mdl.get_item("V_hyst", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        C_function = mdl.get_item("C_function", parent=sub_handle, item_type=ITEM_COMPONENT)
                        gamma_LUT_1D = mdl.get_item("gamma_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M_LUT_1D = mdl.get_item("M_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M0_LUT_1D = mdl.get_item("M0_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if hysteresis_model == "None":
                            mdl.delete_item(mdl.get_item("Connection1164", parent=sub_handle, item_type=ITEM_CONNECTION))
                            Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                            # replace output voltage with 0
                            mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V_hyst)
                            mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), execution_rate)
                            mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        else:
                            # M_value
                            if np.ndim(M_value) == 0:
                                mdl.delete_item(M_LUT_1D)
                                Constant_M = mdl.create_component("core/Constant",
                                                        name="Constant_M",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M, "value"), M_value)
                                mdl.set_property_value(mdl.prop(Constant_M, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M, "out"), end=mdl.term(C_function, "M"))
                    
                            elif np.ndim(M_value) == 1:
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "out_vec_f_x"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M_value) == 2:
                                M_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "value"), end=mdl.term(C_function, "M"))
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "out_vec_f_xy"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M_value.")
                    
                            # M0_value
                            if np.ndim(M0_value) == 0:
                                mdl.delete_item(M0_LUT_1D)
                                Constant_M0 = mdl.create_component("core/Constant",
                                                        name="Constant_M0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M0, "value"), M0_value)
                                mdl.set_property_value(mdl.prop(Constant_M0, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M0, "out"), end=mdl.term(C_function, "M0"))
                    
                            elif np.ndim(M0_value) == 1:
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "out_vec_f_x"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M0_value) == 2:
                                M0_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M0_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M0_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "value"), end=mdl.term(C_function, "M0"))
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "out_vec_f_xy"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M0_value.")
                    
                            # gamma_value
                            if np.ndim(gamma_value) == 0:
                                mdl.delete_item(gamma_LUT_1D)
                                Constant_gamma = mdl.create_component("core/Constant",
                                                        name="Constant_gamma",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_gamma, "value"), gamma_value)
                                mdl.set_property_value(mdl.prop(Constant_gamma, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_gamma, "out"), end=mdl.term(C_function, "gamma_param"))
                    
                            elif np.ndim(gamma_value) == 1:
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "out_vec_f_x"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(gamma_value) == 2:
                                gamma_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="gamma_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(gamma_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "value"), end=mdl.term(C_function, "gamma_param"))
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "out_vec_f_xy"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for gamma value.")
                    ENDCODE
                }
            }
            [
                position = 7672, 7944
                size = 128, 160
            ]

            component sys_signal_switch "Signal switch1" {
            }
            [
                position = 8096, 8368
            ]

            component src_scada_input "Vcell Value Set" {
                execution_rate = "Ts"
                min = "0"
                unit = ""
            }
            [
                position = 8016, 8304
            ]

            component src_scada_input "Vcell Override" {
                execution_rate = "Ts"
                format = "int"
                max = "1"
                min = "0"
                signal_type = "int"
                unit = ""
            }
            [
                position = 8016, 8248
            ]

            component gen_probe SOC {
            }
            [
                position = 8488, 7824
            ]

            port P {
                position = top center
                kind = pe
            }
            [
                position = 8528, 8336
                rotation = down
                hide_name = True
            ]

            port N {
                position = bottom center
                kind = pe
            }
            [
                position = 8528, 8424
                rotation = down
                hide_name = True
            ]

            port T {
                position = -16.0, -8.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7128, 7904
                hide_name = True
            ]

            tag From1 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8056
                hide_name = True
                size = 60, 20
            ]

            tag Goto3 {
                value = "T"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7368, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From6 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From7 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From10 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8216
                hide_name = True
                size = 60, 20
            ]

            tag From11 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7856, 8360
                hide_name = True
                size = 60, 20
            ]

            tag Goto6 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8200
                hide_name = True
                size = 60, 20
            ]

            tag From12 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7840, 8392
                hide_name = True
                size = 60, 20
            ]

            tag From13 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8408
                hide_name = True
                size = 60, 20
            ]

            tag Goto19 {
                value = "Q"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7816
                hide_name = True
                size = 60, 20
            ]

            tag From32 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From16 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8184
                hide_name = True
                size = 60, 20
            ]

            tag Goto10 {
                value = "R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7896
                hide_name = True
                size = 60, 20
            ]

            tag Goto11 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8376
                hide_name = True
                size = 60, 20
            ]

            tag Goto12 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7944
                hide_name = True
                size = 60, 20
            ]

            tag Goto13 {
                value = "OCV"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7816
                hide_name = True
                size = 60, 20
            ]

            tag Goto14 {
                value = "I_t"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8496, 8288
                hide_name = True
                size = 60, 20
            ]

            tag Goto16 {
                value = "V_term"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8176, 8368
                hide_name = True
                size = 60, 20
            ]

            tag From20 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8256, 8384
                hide_name = True
                size = 60, 20
            ]

            tag From22 {
                value = "I_t"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7344, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto2 {
                value = "SOH"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7344, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From34 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From35 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7888
                hide_name = True
                size = 60, 20
            ]

            tag Goto20 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7984
                hide_name = True
                size = 60, 20
            ]

            tag From36 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From37 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7976
                hide_name = True
                size = 60, 20
            ]

            tag From38 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8088
                hide_name = True
                size = 60, 20
            ]

            tag From39 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7488, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From40 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From15 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto9 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto21 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto22 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8376
                hide_name = True
                size = 60, 20
            ]

            tag From33 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From23 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From24 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From25 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From26 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From27 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From28 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From29 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From30 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From43 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From5 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7944
                hide_name = True
                size = 60, 20
            ]

            tag From42 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7920
                hide_name = True
                size = 60, 20
            ]

            tag From44 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From45 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7896
                hide_name = True
                size = 60, 20
            ]

            tag From46 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7968
                hide_name = True
                size = 60, 20
            ]

            junction Junction12 sp
            [
                position = 8632, 8032
            ]

            comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Measurements *****</p></body></html> ENDCOMMENT 
            [
                position = 8440, 7704
            ]

            comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Battery Effects *****  </p></body></html> ENDCOMMENT 
            [
                position = 7752, 7720
            ]

            comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** ECM and Passive Balancing *****  </p></body></html> ENDCOMMENT 
            [
                position = 7848, 8192
            ]

            connect From1 "SOC Model.I" as Connection1062
            connect Vt.p_node It.p_node as Connection42
            connect It.n_node P as Connection1129
            connect Vt.n_node N as Connection1130
            connect From32 "SOC Model.Q" as Connection1135
            connect From11 Sum3.in as Connection1091
            connect From18 Sum3.in1 as Connection1095
            connect Goto14 It.out as Connection1102
            connect From20 Vt.in as Connection1109
            connect Goto11 "SOC Model.SOC_pu" as Connection1119
            connect Goto2 SOH_set.out as Connection1063
            connect Capacity.SOH From6 as Connection1144
            connect Capacity.T From7 as Connection1145
            connect From35 "Internal Resistance.T" as Connection1147
            connect From34 "Internal Resistance.SOH" as Connection1148
            connect Goto10 "Internal Resistance.R" as Connection1149
            connect From37 "Coulombic efficiency.T" as Connection1150
            connect From36 "Coulombic efficiency.SOH" as Connection1151
            connect Goto20 "Coulombic efficiency.eta" as Connection1152
            connect From38 "SOC Model.eta" as Connection1153
            connect "Open Circuit Voltage.SOC" From39 as Connection1154
            connect "Open Circuit Voltage.T" From40 as Connection1155
            connect Goto13 "Open Circuit Voltage.OCV" as Connection1162
            connect Goto9 "Parallel RC.V" as Connection1141
            connect From15 "Parallel RC.I" as Connection1077
            connect Goto6 "Series voltage drop.V_R0" as Connection1169
            connect From10 "Series voltage drop.R0" as Connection1168
            connect From16 "Series voltage drop.I" as Connection1167
            connect Sum3.in3 From13 as Connection1175
            connect From12 Sum3.in2 as Connection1179
            connect Goto21 "Passive Balancing.I_bal" as Connection1173
            connect Capacity.Q Goto19 as Connection1181
            connect From22 Cell_NO.in as Connection1182
            connect Cell_NO.out "Passive Balancing.I_t" as Connection1183
            connect Goto22 "Passive Balancing.I_cell" as Connection1184
            connect From25 Junction12 as Connection1212
            connect Junction12 "Cell voltage.in" as Connection1213
            connect Termination10.in Junction12 as Connection1214
            connect From26 Termination5.in as Connection1222
            connect From28 Termination6.in as Connection1220
            connect Termination4.in From24 as Connection1221
            connect Termination8.in From29 as Connection1218
            connect Termination2.in From27 as Connection1223
            connect From23 Termination3.in as Connection1215
            connect Termination7.in From33 as Connection1219
            connect Termination9.in From43 as Connection1216
            connect Termination1.in From30 as Connection1217
            connect Hysteresis.T From5 as Connection1158
            connect Hysteresis.I From42 as Connection1159
            connect From44 Hysteresis.Q as Connection1233
            connect From45 Hysteresis.eta as Connection1234
            connect Goto12 Hysteresis.V_hyst as Connection1235
            connect From46 Hysteresis.SOC as Connection1245
            connect T Goto3 as Connection1131
            connect "Signal switch1.in1" Sum3.out as Connection1246
            connect Goto16 "Signal switch1.out" as Connection1247
            connect "Vcell Value Set.out" "Signal switch1.in" as Connection1248
            connect "Vcell Override.out" "Signal switch1.in2" as Connection1249
            connect SOC.in Termination3.in as Connection1251

            Init_SOC = "init_dynamic"
            Q_total = "total_Q"
            Ts = "Ts"
            meas_Ibal = "False"
            meas_Icell = "False"
            meas_OCV = "False"
            meas_Q = "False"
            meas_Rint = "False"
            meas_SOH = "False"
            meas_T = "False"
            meas_hyst = "False"

            mask {
                description = "This component represents the \"Enhanced self correcting\" battery cell model. It is a state-of-the-art electrical representation of the physical processes naturally ocurring inside the battery cell. Many parameters can be set as either constants or functions of temperature, state of charge, or state of health. Parallel cells are modelled simply by distributing the input current across the number of cells entered in the parameter input. <br></br>This component is simulated at the signal processing time step, entered in this component as the Execution rate parameter.<br></br><br></br>For more information regarding implementation and parametrization, please refer to the documentation."
                help_file = "battery_cell.html"

                SOC_vector {
                    label = "State of charge vector"
                    widget = edit
                    type = generic
                    default_value = "[0.00000, 0.00500, 0.01000, 0.01500, 0.02000, 0.02500, 0.03000, 0.03500, 0.04000, 0.04500, 0.05000, 0.05500, 0.06000, 0.06500, 0.07000, 0.07500, 0.08000, 0.08500, 0.09000, 0.09500, 0.10000, 0.10500, 0.11000, 0.11500, 0.12000, 0.12500, 0.13000, 0.13500, 0.14000, 0.14500, 0.15000, 0.15500, 0.16000, 0.16500, 0.17000, 0.17500, 0.18000, 0.18500, 0.19000, 0.19500, 0.20000, 0.20500, 0.21000, 0.21500, 0.22000, 0.22500, 0.23000, 0.23500, 0.24000, 0.24500, 0.25000, 0.25500, 0.26000, 0.26500, 0.27000, 0.27500, 0.28000, 0.28500, 0.29000, 0.29500, 0.30000, 0.30500, 0.31000, 0.31500, 0.32000, 0.32500, 0.33000, 0.33500, 0.34000, 0.34500, 0.35000, 0.35500, 0.36000, 0.36500, 0.37000, 0.37500, 0.38000, 0.38500, 0.39000, 0.39500, 0.40000, 0.40500, 0.41000, 0.41500, 0.42000, 0.42500, 0.43000, 0.43500, 0.44000, 0.44500, 0.45000, 0.45500, 0.46000, 0.46500, 0.47000, 0.47500, 0.48000, 0.48500, 0.49000, 0.49500, 0.50000, 0.50500, 0.51000, 0.51500, 0.52000, 0.52500, 0.53000, 0.53500, 0.54000, 0.54500, 0.55000, 0.55500, 0.56000, 0.56500, 0.57000, 0.57500, 0.58000, 0.58500, 0.59000, 0.59500, 0.60000, 0.60500, 0.61000, 0.61500, 0.62000, 0.62500, 0.63000, 0.63500, 0.64000, 0.64500, 0.65000, 0.65500, 0.66000, 0.66500, 0.67000, 0.67500, 0.68000, 0.68500, 0.69000, 0.69500, 0.70000, 0.70500, 0.71000, 0.71500, 0.72000, 0.72500, 0.73000, 0.73500, 0.74000, 0.74500, 0.75000, 0.75500, 0.76000, 0.76500, 0.77000, 0.77500, 0.78000, 0.78500, 0.79000, 0.79500, 0.80000, 0.80500, 0.81000, 0.81500, 0.82000, 0.82500, 0.83000, 0.83500, 0.84000, 0.84500, 0.85000, 0.85500, 0.86000, 0.86500, 0.87000, 0.87500, 0.88000, 0.88500, 0.89000, 0.89500, 0.90000, 0.90500, 0.91000, 0.91500, 0.92000, 0.92500, 0.93000, 0.93500, 0.94000, 0.94500, 0.95000, 0.95500, 0.96000, 0.96500, 0.97000, 0.97500, 0.98000, 0.98500, 0.99000, 0.99500, 1.00000]"
                    unit = "p.u."
                    group = "Basic parameters:1"
                }

                Init_SOC {
                    label = "Initial state of charge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                    group = "Basic parameters"
                }

                SOH_vector {
                    label = "State of health vector"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Basic parameters"
                }

                T_vector {
                    label = "Temperatures vector"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    group = "Basic parameters"
                }

                OCV {
                    label = "Open circuit voltage"
                    widget = edit
                    type = generic
                    default_value = "[[ 2.81376455, 2.934249, 3.01131295, 3.0707406, 3.12232055, 3.1679386999999997, 3.20864785, 3.2450991, 3.27819715, 3.30856405, 3.3362725999999996, 3.3618633499999997, 3.38570235, 3.40775795, 3.42830425, 3.4476403500000004, 3.4655972, 3.48235125, 3.4982734000000004, 3.5123286499999997, 3.52428065, 3.5322503000000003, 3.536190725, 3.538614355, 3.5410027349999997, 3.543410505, 3.54570155, 3.548176695, 3.55074616, 3.55332738, 3.5560948150000002, 3.5590690300000003, 3.5622155269999998, 3.5656399850000002, 3.569116135, 3.5732180099999997, 3.57727722, 3.5820934199999996, 3.58702369, 3.5923769, 3.5981162299999996, 3.60387865, 3.6098619999999997, 3.61578425, 3.6219618000000002, 3.6279250050000003, 3.633843695, 3.6400532699999997, 3.646100845, 3.6525218749999997, 3.659006475, 3.6658932699999998, 3.6723717, 3.67845187, 3.6843657899999998, 3.690319095, 3.696598375, 3.70317101, 3.7103087649999997, 3.71751191, 3.72478503, 3.7312556949999998, 3.737126875, 3.7421215, 3.746753425, 3.7512470799999997, 3.7557191, 3.759948005, 3.7641692570000003, 3.7683243400000004, 3.77226982, 3.776130865, 3.77996065, 3.7834905, 3.78724775, 3.79068595, 3.79405435, 3.79739885, 3.8008169, 3.8037784, 3.80672915, 3.80976375, 3.81294495, 3.8155956, 3.81841755, 3.8211345, 3.82375915, 3.826463, 3.8289732, 3.83148675, 3.8339139, 3.8364958500000004, 3.8389766, 3.84130125, 3.8436186, 3.84593155, 3.8484112, 3.8508698999999997, 3.853017, 3.8553768, 3.8575925, 3.8597776, 3.8618757, 3.8639596, 3.8662289, 3.8684966, 3.8704239, 3.8727584, 3.8746679, 3.8767636000000003, 3.8789283, 3.88108645, 3.88336145, 3.88554035, 3.8876272999999997, 3.88979185, 3.8919731499999997, 3.89423455, 3.89660415, 3.89878675, 3.9010609, 3.9034554999999997, 3.9058273, 3.9083077999999998, 3.9107870499999997, 3.9134431, 3.91605185, 3.9188395000000003, 3.92173155, 3.9245562, 3.9278719, 3.93123635, 3.93501795, 3.9392118, 3.9434215, 3.9476625, 3.9522793, 3.956863, 3.9614228, 3.9661213500000003, 3.97056845, 3.97496085, 3.97923145, 3.98304985, 3.9867527999999997, 3.990355, 3.9938599000000004, 3.997107, 4.0001812, 4.0032136000000005, 4.0059932, 4.0087594499999994, 4.011432500000001, 4.0139152, 4.0163138, 4.0185217, 4.02070895, 4.022900900000001, 4.0249913, 4.0268188, 4.02872455, 4.03070295, 4.0323274, 4.0341031, 4.03572435, 4.0374238, 4.03904715, 4.0406617, 4.0421721999999995, 4.04385255, 4.04555215, 4.0469809, 4.048781399999999, 4.05039585, 4.052104, 4.05390415, 4.0557043, 4.057513849999999, 4.0593374, 4.0614338, 4.0635322, 4.0657283, 4.0680112, 4.0704244, 4.07274935, 4.075507399999999, 4.0782211, 4.0812930000000005, 4.08431865, 4.08759685, 4.0910807, 4.0947777499999995, 4.0989474, 4.10329865, 4.10799, 4.1129271, 4.1185746, 4.1244995, 4.1311105999999995, 4.138731625, 4.14890576], [2.8100227500000003, 2.916445, 2.99576475, 3.057303, 3.11000275, 3.1564935, 3.19803925, 3.2350955, 3.26858575, 3.2992202500000003, 3.3273629999999996, 3.35331675, 3.37731175, 3.39958975, 3.4203212499999998, 3.4398017500000004, 3.457986, 3.47495625, 3.4909670000000004, 3.50564325, 3.51860325, 3.5288515, 3.535353625, 3.539071775, 3.5418136749999998, 3.544252525, 3.54650775, 3.5488834750000002, 3.5513308, 3.5538369, 3.556474075, 3.55934515, 3.5622776349999996, 3.565399925, 3.5687806749999997, 3.57249005, 3.5763861, 3.5808671, 3.5855184500000004, 3.5906845, 3.5961811499999996, 3.60179325, 3.60771, 3.6137212499999998, 3.619809, 3.626025025, 3.632018475, 3.63826635, 3.644504225, 3.6510093749999997, 3.657832375, 3.66466635, 3.6710585, 3.67705935, 3.6830289499999997, 3.689195475, 3.6957918750000003, 3.70265505, 3.709943825, 3.71715955, 3.72392515, 3.729878475, 3.735234375, 3.7402075, 3.744967125, 3.7498354, 3.7545954999999998, 3.759340025, 3.764046285, 3.7688217, 3.7733491, 3.777854325, 3.78220325, 3.7862525, 3.7902387500000003, 3.79382975, 3.79747175, 3.80099425, 3.8044845, 3.807692, 3.81084575, 3.81401875, 3.81712475, 3.819978, 3.82288775, 3.8256725, 3.82839575, 3.831115, 3.833666, 3.83623375, 3.8387695, 3.8412792500000004, 3.843683, 3.84610625, 3.848493, 3.85085775, 3.853256, 3.8555495, 3.857885, 3.860084, 3.8623624999999997, 3.864488, 3.8665785, 3.868598, 3.8707445, 3.872883, 3.8749195, 3.876992, 3.8789395, 3.881018, 3.8830415, 3.88503225, 3.88720725, 3.88930175, 3.8913365, 3.89335925, 3.8954657499999996, 3.89757275, 3.89982075, 3.90193375, 3.9041045000000003, 3.9064775, 3.9087365, 3.911139, 3.91353525, 3.9160155, 3.91865925, 3.9213975000000003, 3.92425775, 3.927181, 3.9305595, 3.93418175, 3.93828975, 3.942859, 3.9479075, 3.9531125, 3.9585965, 3.9639149999999996, 3.968714, 3.97340675, 3.9776422499999997, 3.98160425, 3.98535725, 3.98884925, 3.992164, 3.995375, 3.9984995000000003, 4.001535, 4.004506, 4.007268, 4.0099659999999995, 4.01259725, 4.015162500000001, 4.017576, 4.019969, 4.0222085, 4.02434475, 4.026504500000001, 4.0285565, 4.030494, 4.03242275, 4.03431475, 4.036036999999999, 4.0377155, 4.03942175, 4.041119, 4.04283575, 4.0445085, 4.046061, 4.047662750000001, 4.04936075, 4.050904500000001, 4.052707, 4.05437925, 4.05612, 4.05792075, 4.0597215, 4.06156925, 4.063487, 4.065569, 4.067661, 4.0698415, 4.072056, 4.074522, 4.07694675, 4.079536999999999, 4.0823055, 4.085265000000001, 4.08839325, 4.0915842499999995, 4.0950035, 4.09868875, 4.102737, 4.106893250000001, 4.11155, 4.1162355, 4.1216729999999995, 4.1272975, 4.133553, 4.140458125, 4.149328799999999], [2.80628095, 2.898641, 2.98021655, 3.0438654, 3.09768495, 3.1450483, 3.18743065, 3.2250919, 3.2589743500000004, 3.2898764500000004, 3.3184533999999997, 3.34477015, 3.36892115, 3.39142155, 3.41233825, 3.43196315, 3.4503747999999996, 3.46756125, 3.4836606000000003, 3.4989578499999996, 3.5129258500000002, 3.5254527, 3.534516525, 3.539529195, 3.542624615, 3.545094545, 3.54731395, 3.549590255, 3.55191544, 3.55434642, 3.556853335, 3.55962127, 3.562339743, 3.565159865, 3.568445215, 3.57176209, 3.57549498, 3.5796407799999996, 3.58401321, 3.5889921, 3.5942460699999996, 3.59970785, 3.605558, 3.6116582499999996, 3.6176562, 3.624125045, 3.630193255, 3.63647943, 3.642907605, 3.6494968749999996, 3.656658275, 3.66343943, 3.6697452999999998, 3.67566683, 3.6816921099999997, 3.688071855, 3.694985375, 3.70213909, 3.709578885, 3.71680719, 3.72306527, 3.728501255, 3.7333418750000003, 3.7382934999999997, 3.743180825, 3.74842372, 3.7534718999999996, 3.758732045, 3.7639233130000003, 3.7693190600000004, 3.77442838, 3.779577785, 3.78444585, 3.7890145, 3.79322975, 3.7969735499999997, 3.80088915, 3.80458965, 3.8081521, 3.8116056, 3.81496235, 3.81827375, 3.8213045500000002, 3.8243603999999998, 3.82735795, 3.8302104999999997, 3.83303235, 3.8357669999999997, 3.8383588, 3.84098075, 3.8436251, 3.8460626500000004, 3.8483894000000003, 3.8509112500000002, 3.8533674, 3.85578395, 3.8581008, 3.8602290999999997, 3.862753, 3.8647912, 3.8671325, 3.8691984, 3.8712813, 3.8732364, 3.8752600999999998, 3.8772694, 3.8794151, 3.8812256, 3.8832111, 3.8852724000000003, 3.8871547, 3.88897805, 3.89105305, 3.8930631499999997, 3.8950457, 3.89692665, 3.8989583499999996, 3.90091095, 3.90303735, 3.90508075, 3.9071481, 3.9094995, 3.9116457000000002, 3.9139702, 3.91628345, 3.9185879, 3.92126665, 3.9239555, 3.92678395, 3.9298058, 3.9332471, 3.93712715, 3.9415615500000003, 3.9465062, 3.9523935, 3.9585624999999998, 3.9649137, 3.970967, 3.9760052, 3.9806921500000003, 3.98471605, 3.98824765, 3.99148305, 3.99464865, 3.9975752, 4.000395, 4.0031391, 4.005963, 4.0088308, 4.0113224, 4.0139388, 4.016435049999999, 4.018892500000001, 4.0212368, 4.0236241999999995, 4.0258953, 4.02798055, 4.0301081000000005, 4.032121699999999, 4.0341692, 4.03612095, 4.03792655, 4.0397466, 4.0413279, 4.04311915, 4.0448142, 4.04662435, 4.0483553, 4.0499498, 4.05147295, 4.05316935, 4.0548281, 4.0566325999999995, 4.05836265, 4.060136, 4.06193735, 4.0637387, 4.06562465, 4.0676366, 4.069704199999999, 4.0717898, 4.0739547, 4.0761008, 4.0786196, 4.08114415, 4.083566599999999, 4.0863899, 4.089237000000001, 4.09246785, 4.09557165, 4.0989263, 4.1025997499999995, 4.1065266, 4.11048785, 4.11511, 4.1195439, 4.1247714, 4.1300955, 4.1359954, 4.1421846250000005, 4.1497518399999995]]"
                    unit = "V"
                    group = "Basic parameters"
                }

                R0 {
                    label = "Internal resistance"
                    widget = edit
                    type = generic
                    default_value = "[4.6198e-3, 1.7810e-3, 1.1351e-3]"
                    unit = "Ω"
                    group = "Basic parameters"
                }

                eta {
                    label = "Coulombic efficiency"
                    widget = edit
                    type = generic
                    default_value = "[0.98174, 0.99102, 0.98965]"
                    group = "Basic parameters"
                }

                cell_NO {
                    label = "Number of cells in parallel"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Basic parameters"
                }

                nom_Q_combo {
                    label = "Nominal capacity"
                    widget = combo
                    combo_values = "Total capacity", "Discharge capacity"
                    type = string
                    default_value = "Total capacity"
                    group = "Basic parameters"
                    no_evaluate

                    CODE property_value_edited
                        if new_value=="Total capacity":
                            mdl.enable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.disable_property(mdl.prop(container_handle, "V_min"))
                            mdl.disable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_discharge"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.enable_property(mdl.prop(container_handle, "V_min"))
                            mdl.enable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_discharge"))
                    ENDCODE
                }

                Q_discharge {
                    label = "Discharge capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                    disabled
                }

                V_min {
                    label = "Minimum/cut-off voltage"
                    widget = edit
                    type = generic
                    default_value = "2.81"
                    unit = "V"
                    group = "Basic parameters"
                    disabled
                }

                I_dis {
                    label = "Discharge rate"
                    widget = edit
                    type = generic
                    default_value = "15"
                    unit = "A"
                    group = "Basic parameters"
                    disabled
                }

                Q_total {
                    label = "Total capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                }

                Ts {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "s"
                    group = "Basic parameters"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Basic parameters"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "basic_parameters")
                    ENDCODE
                }

                RC_NO {
                    label = "Model order"
                    widget = combo
                    combo_values = "None", "1", "2", "3"
                    type = string
                    default_value = "1"
                    group = "Diffusion process:3"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        parallel_rc = mdl.get_item("Parallel RC", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        mdl.set_property_value(mdl.prop(parallel_rc, "RC_number"), new_value)
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.disable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="1":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="2":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="3":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.enable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.enable_property(mdl.prop(container_handle, "C3"))
                    ENDCODE
                }

                R1 {
                    label = "Resistor 1"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                }

                C1 {
                    label = "Capacitor 1"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                }

                R2 {
                    label = "Resistor 2"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C2 {
                    label = "Capacitor 2"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                R3 {
                    label = "Resistor 3"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C3 {
                    label = "Capacitor 3"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                H_type {
                    label = "Hysteresis model"
                    widget = combo
                    combo_values = "None", "One state"
                    type = string
                    default_value = "One state"
                    group = "Voltage hysteresis:4"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        Hysteresis = mdl.get_item("Hysteresis", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if new_value=="None":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "None")
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        if new_value=="One state":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "One state")
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    ENDCODE
                }

                T_vector_h {
                    label = "Temperatures vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    unit = "celsius"
                    group = "Voltage hysteresis"
                }

                SOC_vector_h {
                    label = "State of charge vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Voltage hysteresis"
                }

                M0 {
                    label = "M0 parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.0031315, 0.0023535, 0.0011502]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                M {
                    label = "M parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.039929, 0.020018, 0.020545]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                gamma {
                    label = "Gamma parameter"
                    widget = edit
                    type = generic
                    default_value = "[67.207e-3, 92.645e-3, 67.840e-3]"
                    group = "Voltage hysteresis"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Voltage hysteresis"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "voltage_hysteresis")
                    
                    ENDCODE
                }

                balancing {
                    label = "Balancing circuit"
                    widget = combo
                    combo_values = "None", "Passive", "Direct current input"
                    type = string
                    default_value = "None"
                    group = "Balancing circuit:5"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION, ITEM_TAG
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        passive_balancing_subsystem = mdl.get_item("Passive Balancing", parent=sub_handle, item_type=ITEM_COMPONENT)
                        Sum3 = mdl.get_item("Sum3", parent=sub_handle, item_type=ITEM_COMPONENT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        Goto3 = mdl.get_item("Goto3", parent=sub_handle, item_type=ITEM_TAG)
                    
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            try:
                                mdl.delete_item(mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT))
                            except:
                                pass
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "None")
                            try:
                                mdl.create_connection(start=port_T, end=Goto3, name = "Connection1131")
                            except:
                                pass
                        elif new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Passive balancing")
                            if old_value=="Direct current input":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:  #elif old_value=="None":
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                    
                            mdl.create_connection(start=mdl.term(passive_balancing_subsystem, "BL_SW"), end=mdl.term(bus_split, "out1"))
                            mdl.create_connection(start=mdl.term(Sum3, "out"), end=mdl.term(passive_balancing_subsystem, "V_term"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Direct current input")
                            if old_value=="Passive":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                            mdl.create_connection(start=mdl.term(bus_split, "out1"), end=mdl.term(passive_balancing_subsystem, "I_in"))
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                    ENDCODE
                }

                R_balance {
                    label = "Balancing parallel resistor"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "Ω"
                    group = "Balancing circuit"
                    disabled
                }

                meas_SOH {
                    label = "State of health"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements:6"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOH = mdl.create_component("core/Probe",
                                                        name="SOH",
                                                        parent=sub_handle,
                                                        position=(8488, 7760),)
                            Termination1 = mdl.get_item("Termination1", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOH, "in"), end=mdl.term(Termination1, "in"))
                    
                        else:
                            if mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_SOC {
                    label = "State of charge"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOC = mdl.create_component("core/Probe",
                                                        name="SOC",
                                                        parent=sub_handle,
                                                        position=(8488, 7824),)
                            Termination3 = mdl.get_item("Termination3", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOC, "in"), end=mdl.term(Termination3, "in"))
                    
                        else:
                            if mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_OCV {
                    label = "Open circuit voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            OCV = mdl.create_component("core/Probe",
                                                        name="OCV",
                                                        parent=sub_handle,
                                                        position=(8488, 7888),)
                            Termination4 = mdl.get_item("Termination4", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(OCV, "in"), end=mdl.term(Termination4, "in"))
                    
                        else:
                            if mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Rint {
                    label = "Internal resistance"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Internal_resistance = mdl.create_component("core/Probe",
                                                        name="Internal resistance",
                                                        parent=sub_handle,
                                                        position=(8488, 7952),)
                            Termination5 = mdl.get_item("Termination5", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Internal_resistance, "in"), end=mdl.term(Termination5, "in"))
                    
                        else:
                            if mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Q {
                    label = "Total capacity"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Total_capacity = mdl.create_component("core/Probe",
                                                        name="Total capacity",
                                                        parent=sub_handle,
                                                        position=(8488, 8016),)
                            Termination6 = mdl.get_item("Termination6", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Total_capacity, "in"), end=mdl.term(Termination6, "in"))
                    
                        else:
                            if mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Ibal {
                    label = "Balancing current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            current = mdl.create_component("core/Probe",
                                                        name="Balancing current",
                                                        parent=sub_handle,
                                                        position=(8688, 7760),)
                            Termination2 = mdl.get_item("Termination2", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(current, "in"), end=mdl.term(Termination2, "in"))
                    
                        else:
                            if mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Icell {
                    label = "Cell current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Cell_current = mdl.create_component("core/Probe",
                                                        name="Cell current",
                                                        parent=sub_handle,
                                                        position=(8688, 7824),)
                            Termination7 = mdl.get_item("Termination7", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Cell_current, "in"), end=mdl.term(Termination7, "in"))
                    
                        else:
                            if mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_T {
                    label = "Temperature"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Temperature = mdl.create_component("core/Probe",
                                                        name="Temperature",
                                                        parent=sub_handle,
                                                        position=(8688, 7888),)
                            Termination8 = mdl.get_item("Termination8", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Temperature, "in"), end=mdl.term(Termination8, "in"))
                    
                        else:
                            if mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_hyst {
                    label = "Hysteresis voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            voltage = mdl.create_component("core/Probe",
                                                        name="Hysteresis voltage",
                                                        parent=sub_handle,
                                                        position=(8688, 7952),)
                            Termination9 = mdl.get_item("Termination9", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(voltage, "in"), end=mdl.term(Termination9, "in"))
                    
                        else:
                            if mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    Init_SOC = mdl.get_property_value(mdl.prop(item_handle, "Init_SOC"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                    cell_NO = mdl.get_property_value(mdl.prop(item_handle, "cell_NO"))
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                    C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                    R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                    C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                    R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                    C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    T_vector_h = mdl.get_property_value(mdl.prop(item_handle, "T_vector_h"))
                    SOC_vector_h = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector_h"))
                    M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                    M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                    gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                    balancing = mdl.get_property_value(mdl.prop(item_handle, "balancing"))
                    R_balance = mdl.get_property_value(mdl.prop(item_handle, "R_balance"))
                    meas_SOH = mdl.get_property_value(mdl.prop(item_handle, "meas_SOH"))
                    meas_SOC = mdl.get_property_value(mdl.prop(item_handle, "meas_SOC"))
                    meas_OCV = mdl.get_property_value(mdl.prop(item_handle, "meas_OCV"))
                    meas_Rint = mdl.get_property_value(mdl.prop(item_handle, "meas_Rint"))
                    meas_Q = mdl.get_property_value(mdl.prop(item_handle, "meas_Q"))
                    meas_Ibal = mdl.get_property_value(mdl.prop(item_handle, "meas_Ibal"))
                    meas_Icell = mdl.get_property_value(mdl.prop(item_handle, "meas_Icell"))
                    meas_T = mdl.get_property_value(mdl.prop(item_handle, "meas_T"))
                    meas_hyst = mdl.get_property_value(mdl.prop(item_handle, "meas_hyst"))
                    # HEADER STOP
                    # Entire code here is for calculating Q_total from Q_discharge
                    from typhoon.api.schematic_editor.exception import SchApiException
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    import scipy.interpolate as interpolate
                
                    sub_handle = mdl.get_sub_level_handle(item_handle)
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    capacity_module = mdl.get_item("Capacity", parent=sub_handle, item_type=ITEM_COMPONENT)
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                
                    if nom_Q_combo == "Total capacity":
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_total)
                
                    elif nom_Q_combo == "Discharge capacity":
                        # Finding the voltage drops: V_RC_max
                        if RC_NO == "None":
                            RC_drop = 0
                        elif RC_NO == "1":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            RC_drop = R1*I_dis
                        elif RC_NO == "2":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            RC_drop = (R1+R2)*I_dis
                        elif RC_NO == "3":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                            RC_drop = (R1+R2+R3)*I_dis
                
                        # Finding the voltage drops: V_hyst_max
                        if H_type == "None":
                            H_drop = 0
                        elif H_type == "One state":
                            M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                            M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                            H_drop = np.mean(M) + np.mean(M0)
                
                        if np.ndim(Q_discharge) == 0:
                            if np.ndim(R0) == 0:
                                OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    # This is a bad cornercase where OCV is a function of temperature,
                                    # but neither R0 nor Q_discharge are. We take last temperature dependant OCV
                                    SOC_from_OCV = interpolate.interp1d(OCV[-1], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 1:
                                Q_max = [0]*len(R0)
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 2:
                                Q_max = [0]*len(R0[-1])
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 1:
                            Q_max = Q_discharge.copy()
                            for index, temp in enumerate(T_vector):
                                if np.ndim(R0) == 0:
                                    OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 1:
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 2:
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    # [-1] index is used to find the last of the SOH vector
                
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max[index] = Q_discharge[index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 2:
                            Q_max = Q_discharge.copy()
                            for health_index in range(len(SOH_vector)):
                                for index, temp in enumerate(T_vector):
                                    if np.ndim(R0) == 0:
                                        OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 1:
                                        OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 2:
                                        OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                        # [-1] index is used to find the last of the SOH vector
                
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[health_index][index] = Q_discharge[health_index][index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_max)
                        if np.min(np.min(Q_max))<0:
                            info(f"{Q_max=}")
                            raise SchApiException("Provided discharge data is not valid")
                ENDCODE

                CODE define_icon
                    image('battery_cell.svg')
                ENDCODE
            }
        }
        [
            position = 7856, 9056
            size = 32, 64
        ]

        component "core/Voltage Measurement" dyn_voltage_1 {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 7696, 9048
            rotation = right
            scale = -1, 1
            size = 64, 32
        ]

        component sys_mp_signal_switch "Multiport signal switch4" {
            number_of_input_terminals = "5"
        }
        [
            position = 7832, 8912
            hide_name = True
        ]

        component lut_1d "1D look-up table30" {
            in_vec_x = "DYN_25_SCRIPT_1_TIME"
            out_vec_f_x = "DYN_25_SCRIPT_1_CURRENT"
            table_impl = "Non-equidistant"
        }
        [
            position = 7688, 8888
            hide_name = True
        ]

        component "core/Signal Controlled Current Source" Isp25 {
        }
        [
            position = 8000, 9048
            rotation = left
            hide_name = True
            scale = -1, 1
            size = 64, 32
        ]

        component "core/Current Measurement" dyn_current_1 {
            execution_rate = "Ts"
            sig_output = "True"
        }
        [
            position = 7936, 9008
            rotation = down
            scale = 1, -1
            size = 64, 32
        ]

        component gen_integrator Integrator7 {
        }
        [
            position = 8168, 8824
            hide_name = True
        ]

        component gen_probe dyn_chgAh_1 {
        }
        [
            position = 8264, 8808
        ]

        component gen_integrator Integrator8 {
        }
        [
            position = 8168, 8888
            hide_name = True
        ]

        component gen_probe dyn_disAh_1 {
        }
        [
            position = 8264, 8888
        ]

        component gen_c_function "C function7" {
            input_terminals = "real current;"
            input_terminals_dimensions = "inherit"
            input_terminals_feedthrough = "True"
            input_terminals_show_labels = "False"
            output_fnc = "/*Begin code section*/
if (current>0) {
    out = current;
    out2 = 0;
}
else if (current<0) {
    out2 = current;
    out = 0;
}
/*End code section*/"
            output_terminals = "real out;inherit out2;"
            output_terminals_dimensions = "inherit;inherit"
            output_terminals_feedthrough = "True;True"
            output_terminals_show_labels = "False;False"
        }
        [
            position = 8072, 8856
            hide_name = True
            size = 48, 48
        ]

        component src_clock Clock1 {
            execution_rate = "Ts"
        }
        [
            position = 7216, 8512
            hide_name = True
        ]

        component gen_probe Time {
        }
        [
            position = 7376, 8512
        ]

        component gen_c_function "C function10" {
            global_variables = "real next_sw;real first_time_step_flag;real counter_cooldown;"
            init_fnc = "/*Begin code section*/
script_no = 1;  // start with the first script
sw_select = 1;  // start with first sw permutation (1st script)
timer = 0;
counter_cooldown = counter_cooldown_max;
 // wait an \"hour\" for the
// battery to go back to its original temperature [instant with typhoon] 
// and to discharge the RC capacitors
first_time_step_flag = 1;  // This flag exists because vcell measurement
// will always start with 0. We need to prevent even looking at that false vcell.
temperature = input_temp;
/*End code section*/"
            input_terminals = "real input_temp;real Vcell;"
            input_terminals_dimensions = "inherit;inherit"
            input_terminals_feedthrough = "True;True"
            input_terminals_show_labels = "True;True"
            output_fnc = "/*Begin code section*/
if (sw_select == 0) {  // Resting the battery cell
    counter_cooldown--;
    if (counter_cooldown <= 0) {
        sw_select = next_sw;
        counter_cooldown = counter_cooldown_max;
    }
}
else {  //  (sw_select != 0) 
    timer += Ts;
    if (timer >= DYN_SCRIPT_1_STOP_TIME && sw_select == 1){
        // This part triggers when the LUT attached to sw_select finishes with its dynamic profile
        // Consequently, the profile starts again by resetting the timer to 0
        timer = 0;
        if (Vcell < V_end_script_1 && first_time_step_flag != 1){
            // If battery cell reached less than roughly 10% of SOC, stop the dynamic profile injection
            // This is to prevent possible undervoltage with high current peaks
            sw_select = 0;
            next_sw = 2;
            temperature = 25;  // And remains so for the rest of the scripts
            script_no = 2;
        }
    }
    else if (Vcell <= Vmin && sw_select == 2){
        sw_select = 3;  // Tither profiles
        timer = 0;  // Refresh timer
    }
    else if (timer >= DYN_DIS_CHG_TITHER_STOP_TIME && sw_select == 3){
        timer = 0;
        if (Vcell < Vmin) {
            // If battery cell reached less than Vmin, stop the tither profile injection
            sw_select = 4;
            script_no = 3;
            // No need to rest the battery cell
            // Constant current charging of the battery cell with C/1
        }
    }
    else if (sw_select == 4 && Vcell > Vmax){  // Constant current charge reached Vmax
        sw_select = 5;  // Tither profiles
        timer = 0;  // Refresh timer
    }
    else if (sw_select == 5 && timer >= DYN_CHG_TITHER_STOP_TIME){
        timer = 0;  // Refresh timer
        if (Vcell > Vmax){
            sw_select = 0;
            script_no = 4;
            next_sw = 0;
        }
    }
}

first_time_step_flag = 0;
/*End code section*/"
            output_terminals = "real sw_select;inherit temperature;inherit timer;inherit script_no;"
            output_terminals_dimensions = "inherit;inherit;inherit;inherit"
            output_terminals_feedthrough = "True;True;True;True"
            output_terminals_show_labels = "True;True;True;True"
            parameters = "real Vmin;real Vmax;real V_end_script_1;real counter_cooldown_max;real DYN_SCRIPT_1_STOP_TIME;real DYN_CHG_TITHER_STOP_TIME;real DYN_DIS_CHG_TITHER_STOP_TIME;real Ts;"
        }
        [
            position = 7824, 8656
            hide_name = True
            size = 176, 160
        ]

        component src_scada_input "battery temp 2" {
            def_value = "45"
            execution_rate = "Ts"
            unit = ""
        }
        [
            position = 7216, 8624
        ]

        component gen_probe dyn_script_no_1 {
        }
        [
            position = 7992, 8720
        ]

        component src_constant DYN_DIS_CHG {
            execution_rate = "Ts"
            value = "DYN_DIS_CHG"
        }
        [
            position = 7240, 8976
        ]

        component lut_1d "1D look-up table31" {
            in_vec_x = "OCV_25_SCRIPT_2_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_2_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 7688, 8920
            hide_name = True
        ]

        component lut_1d "1D look-up table32" {
            in_vec_x = "OCV_25_SCRIPT_4_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_4_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 7688, 8952
            hide_name = True
        ]

        component src_constant DYN_CHG {
            execution_rate = "Ts"
            value = "DYN_CHG"
        }
        [
            position = 7240, 9040
        ]

        component Subsystem "Dyn Battery Cell_45" {
            layout = static
            component Subsystem "SOC Model" {
                layout = dynamic
                component gen_gain Gain2 {
                    gain = "1/numeric_scale"
                }
                [
                    position = 7944, 8152
                    hide_name = True
                ]

                component gen_integrator Integrator {
                    limit_lower = "-0.1e6"
                    limit_output = "True"
                    limit_upper = "1.1e6"
                    show_init_condition = "external"
                    show_reset = "rising"
                }
                [
                    position = 7840, 8152
                ]

                component gen_gain Gain1 {
                    execution_rate = "Ts"
                    gain = "1/3600.0"
                }
                [
                    position = 7688, 8128
                    hide_name = True
                ]

                component gen_c_function Coulombic_Eff {
                    input_terminals = "real i;real eta;"
                    input_terminals_dimensions = "inherit;inherit"
                    input_terminals_feedthrough = "True;True"
                    input_terminals_show_labels = "True;True"
                    output_fnc = "/*Begin code section*/
// If the battery is being discharged, efficiency is 1
// If battery is being charged, efficiency eta is used
if(i>0)
    i_out = i;
else
    i_out = eta*i;
/*End code section*/"
                    output_terminals = "real i_out;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "False"
                }
                [
                    position = 7496, 8120
                    size = 48, 48
                ]

                component gen_gain Gain3 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7752, 8128
                    hide_name = True
                ]

                component gen_product Product1 {
                    signs = "*/"
                }
                [
                    position = 7608, 8128
                    hide_name = True
                ]

                component gen_sum Sum1 {
                    signs = "+-"
                }
                [
                    position = 8072, 8088
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                }
                [
                    position = 7976, 8080
                ]

                component src_scada_input "SOC Override" {
                    def_value = "Init_SOC/100.0"
                    execution_rate = "Ts"
                    max = "1"
                    min = "0"
                    unit = ""
                }
                [
                    position = 7472, 8432
                ]

                component gen_sum Sum2 {
                    signs = "+-"
                }
                [
                    position = 7600, 8424
                    hide_name = True
                ]

                component src_constant Constant2 {
                    execution_rate = "Ts"
                }
                [
                    position = 7520, 8392
                    hide_name = True
                ]

                component "core/Edge Detection" "Edge Detection1" {
                }
                [
                    position = 7712, 8168
                    hide_name = True
                    size = 32, 32
                ]

                component gen_gain Gain4 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7720, 8424
                    hide_name = True
                ]

                component gen_limiter Limit1 {
                    lower_limit = "-0.1"
                }
                [
                    position = 8160, 8088
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8112
                ]

                port SOC_pu {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8240, 8088
                ]

                port Q {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8256
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8192
                ]

                junction Junction1 sp
                [
                    position = 7656, 8424
                ]

                comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Ah-As</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling  </span></p></body></html> ENDCOMMENT 
                [
                    position = 7664, 8056
                ]

                comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Taking into account</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">the Coulombic Efficiency</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">during charge </span></p></body></html> ENDCOMMENT 
                [
                    position = 7424, 8024
                ]

                comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7736, 8056
                ]

                comment Comment4 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling Inversion</span></p></body></html> ENDCOMMENT 
                [
                    position = 7896, 8176
                ]

                comment Comment6 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">pu</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling </span> </p></body></html> ENDCOMMENT 
                [
                    position = 7584, 8056
                ]

                comment Comment7 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Initial SOC and</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">SOC Override</span></p></body></html> ENDCOMMENT 
                [
                    position = 7512, 8328
                ]

                comment Comment8 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7696, 8448
                ]

                connect I Coulombic_Eff.i as Connection1019
                connect Integrator.in Gain3.out as Connection1024
                connect Gain3.in Gain1.out as Connection1025
                connect Gain2.in Integrator.out as Connection1026
                connect Product1.in Coulombic_Eff.i_out as Connection1027
                connect Product1.out Gain1.in as Connection1028
                connect Constant1.out Sum1.in as Connection1030
                connect Sum1.in1 Gain2.out as Connection1031
                [
                    position = 0, 0
                    breakpoints = 8024, 8096; 8024, 8152
                ]
                connect Q Product1.in1 as Connection1033
                connect Constant2.out Sum2.in as Connection1034
                connect Sum2.in1 "SOC Override.out" as Connection1035
                connect Integrator.reset "Edge Detection1.Out1" as Connection1042
                connect "Edge Detection1.In1" Junction1 as Connection1043
                connect Junction1 Sum2.out as Connection1044
                [
                    position = 0, 0
                ]
                connect Integrator.init_condition_port Gain4.out as Connection1045
                connect Gain4.in Junction1 as Connection1046
                connect eta Coulombic_Eff.eta as Connection1047
                [
                    position = 0, 0
                    breakpoints = 7440, 8192; 7440, 8128
                ]
                connect Sum1.out Limit1.in as Connection1048
                connect Limit1.out SOC_pu as Connection1049

                Init_SOC = "Init_SOC"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">SOC Model models the state of charge of the battery by applying ideal Coulomb Counting.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Following options are supported:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Coulombic Efficiency</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Available capacity as signal input Q</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Inital SOC supported</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- SOC can be overridden during the simulation (reset to any value)</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Full numerical range of the integrator is used </p></body></html>"

                    Init_SOC {
                        label = "Initial SOC"
                        widget = edit
                        type = generic
                        default_value = "80"
                        unit = "%"
                    }

                    Ts {
                        label = "execution_rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE init
                        numeric_scale = 1e6
                    ENDCODE
                }
            }
            [
                position = 8072, 8072
                size = 128, 64
            ]

            component "core/Signal Controlled Voltage Source" Vt {
            }
            [
                position = 8352, 8384
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component "core/Current Measurement" It {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8448, 8336
                size = 64, 32
            ]

            component gen_sum Sum3 {
                signs = "++--"
            }
            [
                position = 8016, 8384
                hide_name = True
            ]

            component src_scada_input SOH_set {
                def_value = "1"
                execution_rate = "Ts"
                max = "1"
                min = "0"
                unit = ""
            }
            [
                position = 7224, 8032
            ]

            component Subsystem Capacity {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Qnom {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port Q {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Qnom.out Q as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Capacity can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Qnom {
                        label = "Nominal Capacity"
                        widget = edit
                        type = generic
                        default_value = "Q_discharge"
                        unit = "Ah"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Qnom = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Qnom_value = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Qnom_value)) < 0:
                            raise SchApiException("Cell total capacity cannot be smaller than 0. Please check the data again")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Qnom_value) == 0:
                            Qnom = mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Qnom, "value"), Qnom_value)
                            mdl.set_property_value(mdl.prop(Qnom, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Q)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Q)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7816
                size = 128, 56
            ]

            component Subsystem "Internal Resistance" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Rint {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port R {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Rint.out R as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Resistance can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Rint {
                        label = "Series Resistance"
                        widget = edit
                        type = generic
                        default_value = "R0"
                        unit = "Ω"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Rint = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Rint_prop_value = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Rint_prop_value)) < 0:
                            raise SchApiException("Provided Internal resistance cannot be smaller than 0")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Rint = mdl.get_item("R", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Rint_prop_value) == 0:
                            Rint = mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Rint, "value"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(Rint, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Rint)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Rint)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Internal resistance is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7896
                size = 128, 56
            ]

            component Subsystem "Coulombic efficiency" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Efficiency_constant {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port eta {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Efficiency_constant.out eta as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Coulombic efficiency can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    eta {
                        label = "Coulombic efficiency"
                        widget = edit
                        type = generic
                        default_value = "eta"
                        unit = "ohm"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        eta_prop_value = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(eta_prop_value)) < 0:
                            raise SchApiException("Cell coulombic efficiency cannot be smaller than 0.")
                        if np.max(np.max(eta_prop_value)) > 1:
                            raise SchApiException("Cell coulombic efficiency cannot be larger than 1.")
                    
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(eta_prop_value) == 0:
                            Efficiency_constant = mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "value"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_eta)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_eta)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7984
                size = 128, 56
            ]

            component Subsystem "Open Circuit Voltage" {
                layout = dynamic
                component lut_1d LUT_1D {
                    ext_mode = "Linear"
                }
                [
                    position = 8432, 8200
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8416, 8096
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port OCV {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOC {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOC</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect LUT_1D.addr SOC as Connection1
                connect LUT_1D.value OCV as Connection2
                connect termination_T.in T as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage is always a function of State of Charge.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage can be a function of temperature but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a list, then it\'s dependace is of SOC, regardless of what is written inside temperature vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a nested list, then it\'s dependance is first of SOC and then of temperature.</p></body></html>"

                    OCV {
                        label = "Open circuit voltage vector (table)"
                        widget = edit
                        type = generic
                        default_value = "OCV"
                        unit = "V"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        OCV_value = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    
                        if not np.all(np.diff(SOC_vector) >= 0):
                            raise SchApiException("Provided SOC data is not monotonically nondecreasing, please check the documentation")
                    
                        if np.min(np.min(OCV_value)) < 0:
                            raise SchApiException("Open circuit voltage cannot be negative for any point.")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_OCV = mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(OCV_value) == 1:
                            LUT_1D = mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), execution_rate)
                            if not np.all(np.diff(OCV_value) >= 0):
                                raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                        elif np.ndim(OCV_value) == 2:
                            for OCV_1D in OCV_value:  # checks for non decaying OCV for each Temp
                                if not np.all(np.diff(OCV_value) >= 0):
                                    raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_SOC)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_OCV)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), execution_rate)
                    
                        else:
                            raise SchApiException("Provided discharge data is not valid")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7672, 7816
                size = 128, 56
            ]

            component Subsystem "Parallel RC" {
                layout = dynamic
                component gen_terminator termination_I {
                }
                [
                    position = 7832, 8048
                ]

                component gen_product Product_1a {
                }
                [
                    position = 7952, 8256
                ]

                component gen_product Product_1b {
                    signs = "*/"
                }
                [
                    position = 8064, 8112
                ]

                component gen_product Product_1c {
                    signs = "/*"
                }
                [
                    position = 8176, 8216
                    rotation = down
                ]

                component gen_sum Sum_1 {
                    signs = "+-"
                }
                [
                    position = 8176, 8120
                ]

                component gen_integrator Integrator_1 {
                }
                [
                    position = 8304, 8120
                ]

                component src_constant Constant_C1 {
                    execution_rate = "Ts"
                    value = "C1"
                }
                [
                    position = 7832, 8208
                ]

                component src_constant Constant_R1 {
                    execution_rate = "Ts"
                    value = "R1"
                }
                [
                    position = 7832, 8264
                ]

                component gen_sum Sum {
                    signs = "+"
                }
                [
                    position = 8448, 8128
                ]

                port V {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8544, 8136
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7736, 8120
                ]

                junction Junction1 sp
                [
                    position = 8344, 8520
                ]

                connect I termination_I.in as Connection127
                [
                    position = 0, 0
                ]
                connect Product_1a.in Constant_C1.out as Connection128
                connect Product_1a.in1 Constant_R1.out as Connection129
                connect Product_1b.in I as Connection131
                connect Product_1b.in1 Constant_C1.out as Connection132
                connect Product_1a.out Product_1c.in as Connection133
                connect Sum_1.in1 Product_1c.out as Connection134
                connect Product_1b.out Sum_1.in as Connection135
                connect Integrator_1.in Sum_1.out as Connection136
                connect Integrator_1.out Product_1c.in1 as Connection137
                connect Integrator_1.out Sum.in as Connection138
                connect Sum.out V as Connection139

                mask {
                    description = "The parallel RC subsystem emulates cell voltage drop due to the physical proccess diffusion of lithium ions.
                                   This is a standard method of implementing a cell in electrical circuits. The fidelity of the cell response can be modeled by increasing the order of the system. If the selected Model Order is less than 3, then the values for unused resistors and capacitors are not propagated. All the RC circuits are implemented using signal processing. If None is selected than the output voltage drop is a constant 0."

                    RC_number {
                        label = "Model order"
                        widget = combo
                        combo_values = "None", "1", "2", "3"
                        type = string
                        default_value = "1"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            port_V = mdl.get_item("V", parent=sub_handle, item_type=ITEM_PORT)
                            port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        
                            def delete_constant():
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                        
                            def delete_1():
                                mdl.delete_item(mdl.get_item("Constant_C1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_2():
                                mdl.delete_item(mdl.get_item("Constant_C2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_3():
                                mdl.delete_item(mdl.get_item("Constant_C3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def create_constant():
                                Constant_0 = mdl.create_component("core/Constant",
                                                            name="Constant_0",
                                                            parent=sub_handle,)
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V)
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                            def create_1():
                                Product_1a = mdl.create_component("core/Product",
                                                                name="Product_1a",
                                                                parent=sub_handle,
                                                                position=(7952, 8256),)
                                Product_1b = mdl.create_component("core/Product",
                                                                name="Product_1b",
                                                                parent=sub_handle,
                                                                position=(8064, 8112))
                                Product_1c = mdl.create_component("core/Product",
                                                                name="Product_1c",
                                                                parent=sub_handle,
                                                                position=(8176, 8216),
                                                                rotation="down")
                                Sum_1 = mdl.create_component("core/Sum",
                                                                name="Sum_1",
                                                                parent=sub_handle,
                                                                position=(8176, 8120),)
                                Integrator_1 = mdl.create_component("core/Integrator",
                                                                name="Integrator_1",
                                                                parent=sub_handle,
                                                                position=(8304, 8120),)
                                Constant_C1 = mdl.create_component("core/Constant",
                                                                name="Constant_C1",
                                                                parent=sub_handle,
                                                                position=(7832, 8208))
                                Constant_R1 = mdl.create_component("core/Constant",
                                                                name="Constant_R1",
                                                                parent=sub_handle,
                                                                position=(7832, 8264))
                        
                                mdl.set_property_value(mdl.prop(Sum_1, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_1b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_1c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R1, "value"), "R1")
                                mdl.set_property_value(mdl.prop(Constant_C1, "value"), "C1")
                        
                                mdl.create_connection(start=mdl.term(Product_1a, "in"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "in1"), end=mdl.term(Constant_R1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_1b, "in1"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "out"), end=mdl.term(Product_1c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_1, "in1"), end=mdl.term(Product_1c, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "out"), end=mdl.term(Sum_1, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "in"), end=mdl.term(Sum_1, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Product_1c, "in1"))
                        
                            def create_2():
                                Product_2a = mdl.create_component("core/Product",
                                                            name="Product_2a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+400),)
                                Product_2b = mdl.create_component("core/Product",
                                                            name="Product_2b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+400))
                                Product_2c = mdl.create_component("core/Product",
                                                            name="Product_2c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+400),
                                                            rotation="down")
                                Sum_2 = mdl.create_component("core/Sum",
                                                            name="Sum_2",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+400),)
                                Integrator_2 = mdl.create_component("core/Integrator",
                                                            name="Integrator_2",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+400),)
                                Constant_C2 = mdl.create_component("core/Constant",
                                                            name="Constant_C2",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+400))
                                Constant_R2 = mdl.create_component("core/Constant",
                                                            name="Constant_R2",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+400))
                        
                                mdl.set_property_value(mdl.prop(Sum_2, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_2b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_2c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R2, "value"), "R2")
                                mdl.set_property_value(mdl.prop(Constant_C2, "value"), "C2")
                        
                                mdl.create_connection(start=mdl.term(Product_2a, "in"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "in1"), end=mdl.term(Constant_R2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_2b, "in1"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "out"), end=mdl.term(Product_2c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_2, "in1"), end=mdl.term(Product_2c, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "out"), end=mdl.term(Sum_2, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "in"), end=mdl.term(Sum_2, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Product_2c, "in1"))
                        
                            def create_3():
                                Product_3a = mdl.create_component("core/Product",
                                                            name="Product_3a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+200),)
                                Product_3b = mdl.create_component("core/Product",
                                                            name="Product_3b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+200))
                                Product_3c = mdl.create_component("core/Product",
                                                            name="Product_3c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+200),
                                                            rotation="down")
                                Sum_3 = mdl.create_component("core/Sum",
                                                            name="Sum_3",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+200),)
                                Integrator_3 = mdl.create_component("core/Integrator",
                                                            name="Integrator_3",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+200),)
                                Constant_C3 = mdl.create_component("core/Constant",
                                                            name="Constant_C3",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+200))
                                Constant_R3 = mdl.create_component("core/Constant",
                                                            name="Constant_R3",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+200))
                        
                                mdl.set_property_value(mdl.prop(Sum_3, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_3b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_3c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R3, "value"), "R3")
                                mdl.set_property_value(mdl.prop(Constant_C3, "value"), "C3")
                        
                                mdl.create_connection(start=mdl.term(Product_3a, "in"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "in1"), end=mdl.term(Constant_R3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_3b, "in1"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "out"), end=mdl.term(Product_3c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_3, "in1"), end=mdl.term(Product_3c, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "out"), end=mdl.term(Sum_3, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "in"), end=mdl.term(Sum_3, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Product_3c, "in1"))
                        
                            #####################################################
                        
                            if new_value == "None":
                                delete_1()
                        
                                if old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                        
                                create_constant()
                        
                            elif new_value == "1":
                                if old_value == "None":
                                    delete_constant()
                                    create_1()
                                elif old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                                if old_value == "1":
                                    pass
                                else:
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Sum = mdl.create_component("core/Sum",
                                                                name="Sum",
                                                                parent=sub_handle,
                                                                position=(8450, 8130))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "+")
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                        
                            elif new_value == "2":
                                if old_value == "None" or old_value == "1":
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                    create_2()
                                elif old_value == "3":
                                    delete_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                        
                            elif new_value == "3":
                                if old_value == "None" or old_value == "1":
                                    create_2()
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                create_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "+++")
                        
                                try:
                                    Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                                except:
                                    pass
                                Integrator_3 = mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Sum, "in2"))
                        ENDCODE
                    }

                    R1 {
                        label = "Resistance 1"
                        widget = edit
                        type = generic
                        default_value = "R1"
                        unit = "Ω"
                    }

                    C1 {
                        label = "Capacitance 1"
                        widget = edit
                        type = generic
                        default_value = "C1"
                        unit = "F"
                    }

                    R2 {
                        label = "Resistance 2"
                        widget = edit
                        type = generic
                        default_value = "R2"
                        unit = "Ω"
                    }

                    C2 {
                        label = "Capacitance 2"
                        widget = edit
                        type = generic
                        default_value = "C2"
                        unit = "F"
                    }

                    R3 {
                        label = "Resistance 3"
                        widget = edit
                        type = generic
                        default_value = "R3"
                        unit = "Ω"
                    }

                    C3 {
                        label = "Capacitance 3"
                        widget = edit
                        type = generic
                        default_value = "C3"
                        unit = "F"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        RC_number = mdl.get_property_value(mdl.prop(item_handle, "RC_number"))
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.exception import SchApiException
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    
                        if R1 < 0:
                            raise SchApiException("R1 cannot be negative.")
                        if R2 < 0:
                            raise SchApiException("R2 cannot be negative.")
                        if R3 < 0:
                            raise SchApiException("R3 cannot be negative.")
                        if C1 < 0:
                            raise SchApiException("C1 cannot be negative.")
                        if C2 < 0:
                            raise SchApiException("C2 cannot be negative.")
                        if C3 < 0:
                            raise SchApiException("C3 cannot be negative.")
                    ENDCODE
                }
            }
            [
                position = 7672, 8096
                size = 128, 80
            ]

            component Subsystem "Series voltage drop" {
                layout = dynamic
                component gen_product Product {
                }
                [
                    position = 8224, 8176
                    hide_name = True
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8168
                ]

                port R0 {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8208
                ]

                port V_R0 {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8296, 8176
                ]

                connect Product.out V_R0 as Connection1170
                connect Product.in I as Connection1168
                connect Product.in1 R0 as Connection1169
            }
            [
                position = 7672, 8200
                size = 128, 64
            ]

            component Subsystem "Passive Balancing" {
                layout = dynamic
                component src_constant Constant_0 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8136, 8280
                ]

                port I_bal {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8208
                ]

                port I_t {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7992, 7936
                ]

                port I_cell {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8072
                ]

                connect I_t I_cell as direct_connection
                connect Constant_0.out I_bal as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Passive balancing subsystem is dynamically changed by changing the type of balancing:<br></br>1. \"None\" mode simply propagates the total input current as the cell current and 0 value for balance current.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. \"Passive balancing\" introduces a current flowing through the resistor parallel to the cell. Value of resistance is specified as a parameter and an input for terminal voltage and balancing switch is created. Balancing switch opens and closes the ideal switch connecting cell terminals to the resistor.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. \"Direct current input\" option simply subtracts the signal out of the I_in terminal from the I_t and outputs in the I_cell signal output. I_bal is therefore the signal that enters I_in terminal.</p></body></html>"

                    balancing_combo {
                        label = "Balancing mode"
                        widget = combo
                        combo_values = "None", "Passive balancing", "Direct current input"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            I_t = mdl.get_item("I_t", parent=sub_handle, item_type=ITEM_PORT)
                            I_cell = mdl.get_item("I_cell", parent=sub_handle, item_type=ITEM_PORT)
                            I_bal = mdl.get_item("I_bal", parent=sub_handle, item_type=ITEM_PORT)
                        
                            if new_value==old_value:
                                pass
                            elif new_value=="None":
                                if old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                                mdl.create_connection(start=I_t, end=I_cell, name="direct_connection")
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=I_bal, name="Connection1")
                        
                            elif new_value=="Passive balancing":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    try:
                                        mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                        mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    except:
                                        pass
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                BL_SW = mdl.create_port(name="BL_SW",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                V_term = mdl.create_port(name="V_term",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8220),)
                                R_balance_gain = mdl.create_component("core/Gain",
                                                        name="R_balance_gain",
                                                        parent=sub_handle,
                                                        position=(8135, 8200))
                                signal_switch = mdl.create_component("core/Signal switch",
                                                        name="signal_switch",
                                                        parent=sub_handle,
                                                        position=(8262, 8240))
                                unit_delay = mdl.create_component("core/Unit Delay",
                                                        name="unit_delay",
                                                        parent=sub_handle,
                                                        position=(8325, 8216))
                        
                                mdl.set_property_value(mdl.prop(signal_switch, "threshold"), 0.5)
                                mdl.set_property_value(mdl.prop(R_balance_gain, "gain"), "1/R_balance")
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                                mdl.create_connection(start=BL_SW, end=mdl.term(signal_switch, "in2"))
                                mdl.create_connection(start=V_term, end=mdl.term(R_balance_gain, "in"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in"), end=mdl.term(R_balance_gain, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in1"), end=mdl.term(Constant_0, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "out"), end=mdl.term(unit_delay, "in"))
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=mdl.term(unit_delay, "out"))
                                mdl.create_connection(start=I_bal, end=mdl.term(unit_delay, "out"))
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        
                            elif new_value=="Direct current input":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                    mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                elif old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                                I_in = mdl.create_port(name="I_in",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=I_in)
                                mdl.create_connection(start=I_bal, end=I_in)
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        ENDCODE
                    }

                    R_balance {
                        label = "Balancing Resistance"
                        widget = edit
                        type = generic
                        default_value = "R_balance"
                        unit = "Ω"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE
                }
            }
            [
                position = 7520, 8344
                size = 128, 112
            ]

            component gen_gain Cell_NO {
                gain = "1/cell_NO"
            }
            [
                position = 7408, 8312
                hide_name = True
            ]

            component gen_probe "Cell voltage" {
            }
            [
                position = 8688, 8064
            ]

            component gen_terminator Termination1 {
            }
            [
                position = 8400, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination2 {
            }
            [
                position = 8576, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination3 {
            }
            [
                position = 8400, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination4 {
            }
            [
                position = 8400, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination5 {
            }
            [
                position = 8400, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination6 {
            }
            [
                position = 8400, 8064
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination7 {
            }
            [
                position = 8576, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination8 {
            }
            [
                position = 8576, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination9 {
            }
            [
                position = 8576, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination10 {
            }
            [
                position = 8576, 8064
                rotation = down
                hide_name = True
            ]

            component Subsystem Hysteresis {
                layout = dynamic
                component gen_terminator termination_T {
                }
                [
                    position = 7968, 8280
                ]

                component gen_terminator termination_I {
                }
                [
                    position = 8080, 8440
                ]

                component gen_terminator termination_eta {
                }
                [
                    position = 7976, 8056
                ]

                component gen_c_function C_function {
                    global_variables = "real h;real h_mem;real h1;real h2;real current_sign;real efficiency;"
                    init_fnc = "/*Begin code section*/
current_sign = 1;
h_mem = 0;
efficiency = 1;
/*End code section*/"
                    input_terminals = "real current;inherit M0;inherit M;inherit gamma_param;inherit eta;inherit Q;inherit Ts;"
                    input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
if (current<0){
    current_sign = -1;
    efficiency = eta;
}
else if (current>0){
    current_sign = 1;
    efficiency = 1;
}

h = exp(-fabs(current*efficiency*gamma_param/Q*Ts))*h_mem - (1-exp(-fabs(current*efficiency*gamma_param/Q*Ts)))*current_sign;
h_mem = h;
V_h = M0*current_sign + M*h;
/*End code section*/"
                    output_terminals = "inherit V_h;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "True"
                }
                [
                    position = 8320, 8160
                    scale = 1, -1
                    size = 144, 320
                ]

                component lut_1d M0_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8072, 8240
                ]

                component lut_1d M_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 7992, 8200
                ]

                component lut_1d gamma_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8080, 8160
                ]

                component gen_terminator termination_Q {
                }
                [
                    position = 8016, 7952
                ]

                component gen_terminator termination_Ts {
                }
                [
                    position = 8248, 7952
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                    value = "Ts"
                }
                [
                    position = 8160, 8040
                ]

                component gen_terminator termination_SOC {
                }
                [
                    position = 7976, 8336
                ]

                port I {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7984, 8392
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8104
                ]

                port T {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8216
                ]

                port V_hyst {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8504, 8160
                ]

                port Q {
                    position = left:4
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7896, 8008
                ]

                port SOC {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7856, 8336
                ]

                junction Junction1 sp
                [
                    position = 7936, 8216
                ]

                junction Junction2 sp
                [
                    position = 7936, 8216
                ]

                junction Junction3 sp
                [
                    position = 7904, 8216
                ]

                junction Junction4 sp
                [
                    position = 8040, 8392
                ]

                junction Junction7 sp
                [
                    position = 8208, 8240
                ]

                junction Junction12 sp
                [
                    position = 8192, 8040
                ]

                junction Junction8 sp
                [
                    position = 8032, 8200
                ]

                junction Junction10 sp
                [
                    position = 7904, 8104
                ]

                junction Junction11 sp
                [
                    position = 7936, 8008
                ]

                connect C_function.V_h V_hyst as Connection1164
                connect M_LUT_1D.addr Junction1 as Connection1165
                connect M0_LUT_1D.addr Junction2 as Connection1168
                connect Junction2 Junction1 as Connection1169
                connect gamma_LUT_1D.addr Junction2 as Connection1170
                connect Junction1 Junction3 as Connection1171
                connect Junction3 T as Connection1172
                connect termination_T.in Junction3 as Connection1173
                connect C_function.current Junction4 as Connection1174
                [
                    position = 0, 0
                    breakpoints = 8184, 8280; 8184, 8392
                ]
                connect Junction4 I as Connection1175
                connect termination_I.in Junction4 as Connection1176
                connect gamma_LUT_1D.value C_function.gamma_param as Connection1211
                connect C_function.M0 Junction7 as Connection1192
                connect Constant1.out Junction12 as Connection1212
                connect Junction7 M0_LUT_1D.value as Connection1193
                [
                    position = 0, 0
                ]
                connect Junction12 C_function.Ts as Connection1213
                connect termination_Ts.in Junction12 as Connection1214
                connect M_LUT_1D.value Junction8 as Connection1196
                connect Junction8 C_function.M as Connection1197
                connect termination_eta.in Junction10 as Connection1203
                connect Junction10 eta as Connection1204
                [
                    position = 0, 0
                ]
                connect C_function.eta Junction10 as Connection1205
                connect Q Junction11 as Connection1207
                connect Junction11 termination_Q.in as Connection1208
                [
                    position = 0, 0
                ]
                connect C_function.Q Junction11 as Connection1209
                [
                    position = 0, 0
                    breakpoints = 8024, 8080; 8024, 8008
                ]
                connect SOC termination_SOC.in as Connection1215

                hysteresis_model = "One state"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If hysteresis implementation is \"None\", then the output is a constant 0.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For the \"One state\" implementation, output is a multivariable function referenced from: https://ieeexplore.ieee.org/document/7049363<br></br>This C-function is a function of multiple parameters, including the temperature and SOC dependant M, M0 and gamma.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For each of these parameters, if their value is entered as a constant, they are not functions of temperature and SOC.<br></br>If their value is a list, they are a function of temperature and if it is a nested list, they are a function first of temperature and then of SOC.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"Preisach model\" implementation is also a popular method of representing hysteresis, but is not currently available.<br></br></p></body></html>"

                    hysteresis_model {
                        label = "Hysteresis model"
                        widget = combo
                        combo_values = "None", "One state"
                        type = string
                        default_value = "None"
                        no_evaluate
                    }

                    T_vector {
                        label = "Temperature vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector_h"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector_h"
                    }

                    M0 {
                        label = "M0 parameter"
                        widget = edit
                        type = generic
                        default_value = "M0"
                    }

                    M {
                        label = "M parameter"
                        widget = edit
                        type = generic
                        default_value = "M"
                    }

                    gamma {
                        label = "Gamma parameter"
                        widget = edit
                        type = generic
                        default_value = "gamma"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        M0_value = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M_value = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma_value = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                    
                        if np.min(np.min(M0_value)) < 0:
                            raise SchApiException("M0 parameter cannot be negative for any point.")
                        if np.min(np.min(M_value)) < 0:
                            raise SchApiException("M parameter cannot be negative for any point.")
                        if np.min(np.min(gamma_value)) < 0:
                            raise SchApiException("Gamma parameter cannot be negative for any point.")
                    
                        port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                        port_V_hyst = mdl.get_item("V_hyst", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        C_function = mdl.get_item("C_function", parent=sub_handle, item_type=ITEM_COMPONENT)
                        gamma_LUT_1D = mdl.get_item("gamma_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M_LUT_1D = mdl.get_item("M_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M0_LUT_1D = mdl.get_item("M0_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if hysteresis_model == "None":
                            mdl.delete_item(mdl.get_item("Connection1164", parent=sub_handle, item_type=ITEM_CONNECTION))
                            Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                            # replace output voltage with 0
                            mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V_hyst)
                            mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), execution_rate)
                            mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        else:
                            # M_value
                            if np.ndim(M_value) == 0:
                                mdl.delete_item(M_LUT_1D)
                                Constant_M = mdl.create_component("core/Constant",
                                                        name="Constant_M",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M, "value"), M_value)
                                mdl.set_property_value(mdl.prop(Constant_M, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M, "out"), end=mdl.term(C_function, "M"))
                    
                            elif np.ndim(M_value) == 1:
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "out_vec_f_x"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M_value) == 2:
                                M_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "value"), end=mdl.term(C_function, "M"))
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "out_vec_f_xy"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M_value.")
                    
                            # M0_value
                            if np.ndim(M0_value) == 0:
                                mdl.delete_item(M0_LUT_1D)
                                Constant_M0 = mdl.create_component("core/Constant",
                                                        name="Constant_M0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M0, "value"), M0_value)
                                mdl.set_property_value(mdl.prop(Constant_M0, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M0, "out"), end=mdl.term(C_function, "M0"))
                    
                            elif np.ndim(M0_value) == 1:
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "out_vec_f_x"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M0_value) == 2:
                                M0_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M0_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M0_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "value"), end=mdl.term(C_function, "M0"))
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "out_vec_f_xy"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M0_value.")
                    
                            # gamma_value
                            if np.ndim(gamma_value) == 0:
                                mdl.delete_item(gamma_LUT_1D)
                                Constant_gamma = mdl.create_component("core/Constant",
                                                        name="Constant_gamma",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_gamma, "value"), gamma_value)
                                mdl.set_property_value(mdl.prop(Constant_gamma, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_gamma, "out"), end=mdl.term(C_function, "gamma_param"))
                    
                            elif np.ndim(gamma_value) == 1:
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "out_vec_f_x"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(gamma_value) == 2:
                                gamma_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="gamma_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(gamma_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "value"), end=mdl.term(C_function, "gamma_param"))
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "out_vec_f_xy"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for gamma value.")
                    ENDCODE
                }
            }
            [
                position = 7672, 7944
                size = 128, 160
            ]

            component sys_signal_switch "Signal switch1" {
            }
            [
                position = 8096, 8368
            ]

            component src_scada_input "Vcell Value Set" {
                execution_rate = "Ts"
                min = "0"
                unit = ""
            }
            [
                position = 8016, 8304
            ]

            component src_scada_input "Vcell Override" {
                execution_rate = "Ts"
                format = "int"
                max = "1"
                min = "0"
                signal_type = "int"
                unit = ""
            }
            [
                position = 8016, 8248
            ]

            component gen_probe SOC {
            }
            [
                position = 8488, 7824
            ]

            port P {
                position = top center
                kind = pe
            }
            [
                position = 8528, 8336
                rotation = down
                hide_name = True
            ]

            port N {
                position = bottom center
                kind = pe
            }
            [
                position = 8528, 8424
                rotation = down
                hide_name = True
            ]

            port T {
                position = -16.0, -8.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7128, 7904
                hide_name = True
            ]

            tag From1 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8056
                hide_name = True
                size = 60, 20
            ]

            tag Goto3 {
                value = "T"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7368, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From6 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From7 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From10 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8216
                hide_name = True
                size = 60, 20
            ]

            tag From11 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7856, 8360
                hide_name = True
                size = 60, 20
            ]

            tag Goto6 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8200
                hide_name = True
                size = 60, 20
            ]

            tag From12 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7840, 8392
                hide_name = True
                size = 60, 20
            ]

            tag From13 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8408
                hide_name = True
                size = 60, 20
            ]

            tag Goto19 {
                value = "Q"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7816
                hide_name = True
                size = 60, 20
            ]

            tag From32 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From16 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8184
                hide_name = True
                size = 60, 20
            ]

            tag Goto10 {
                value = "R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7896
                hide_name = True
                size = 60, 20
            ]

            tag Goto11 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8376
                hide_name = True
                size = 60, 20
            ]

            tag Goto12 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7944
                hide_name = True
                size = 60, 20
            ]

            tag Goto13 {
                value = "OCV"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7816
                hide_name = True
                size = 60, 20
            ]

            tag Goto14 {
                value = "I_t"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8496, 8288
                hide_name = True
                size = 60, 20
            ]

            tag Goto16 {
                value = "V_term"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8176, 8368
                hide_name = True
                size = 60, 20
            ]

            tag From20 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8256, 8384
                hide_name = True
                size = 60, 20
            ]

            tag From22 {
                value = "I_t"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7344, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto2 {
                value = "SOH"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7344, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From34 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From35 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7888
                hide_name = True
                size = 60, 20
            ]

            tag Goto20 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7984
                hide_name = True
                size = 60, 20
            ]

            tag From36 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From37 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7976
                hide_name = True
                size = 60, 20
            ]

            tag From38 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8088
                hide_name = True
                size = 60, 20
            ]

            tag From39 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7488, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From40 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From15 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto9 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto21 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto22 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8376
                hide_name = True
                size = 60, 20
            ]

            tag From33 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From23 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From24 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From25 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From26 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From27 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From28 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From29 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From30 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From43 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From5 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7944
                hide_name = True
                size = 60, 20
            ]

            tag From42 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7920
                hide_name = True
                size = 60, 20
            ]

            tag From44 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From45 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7896
                hide_name = True
                size = 60, 20
            ]

            tag From46 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7968
                hide_name = True
                size = 60, 20
            ]

            junction Junction12 sp
            [
                position = 8632, 8032
            ]

            comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Measurements *****</p></body></html> ENDCOMMENT 
            [
                position = 8440, 7704
            ]

            comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Battery Effects *****  </p></body></html> ENDCOMMENT 
            [
                position = 7752, 7720
            ]

            comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** ECM and Passive Balancing *****  </p></body></html> ENDCOMMENT 
            [
                position = 7848, 8192
            ]

            connect From1 "SOC Model.I" as Connection1062
            connect Vt.p_node It.p_node as Connection42
            connect It.n_node P as Connection1129
            connect Vt.n_node N as Connection1130
            connect From32 "SOC Model.Q" as Connection1135
            connect From11 Sum3.in as Connection1091
            connect From18 Sum3.in1 as Connection1095
            connect Goto14 It.out as Connection1102
            connect From20 Vt.in as Connection1109
            connect Goto11 "SOC Model.SOC_pu" as Connection1119
            connect Goto2 SOH_set.out as Connection1063
            connect Capacity.SOH From6 as Connection1144
            connect Capacity.T From7 as Connection1145
            connect From35 "Internal Resistance.T" as Connection1147
            connect From34 "Internal Resistance.SOH" as Connection1148
            connect Goto10 "Internal Resistance.R" as Connection1149
            connect From37 "Coulombic efficiency.T" as Connection1150
            connect From36 "Coulombic efficiency.SOH" as Connection1151
            connect Goto20 "Coulombic efficiency.eta" as Connection1152
            connect From38 "SOC Model.eta" as Connection1153
            connect "Open Circuit Voltage.SOC" From39 as Connection1154
            connect "Open Circuit Voltage.T" From40 as Connection1155
            connect Goto13 "Open Circuit Voltage.OCV" as Connection1162
            connect Goto9 "Parallel RC.V" as Connection1141
            connect From15 "Parallel RC.I" as Connection1077
            connect Goto6 "Series voltage drop.V_R0" as Connection1169
            connect From10 "Series voltage drop.R0" as Connection1168
            connect From16 "Series voltage drop.I" as Connection1167
            connect Sum3.in3 From13 as Connection1175
            connect From12 Sum3.in2 as Connection1179
            connect Goto21 "Passive Balancing.I_bal" as Connection1173
            connect Capacity.Q Goto19 as Connection1181
            connect From22 Cell_NO.in as Connection1182
            connect Cell_NO.out "Passive Balancing.I_t" as Connection1183
            connect Goto22 "Passive Balancing.I_cell" as Connection1184
            connect From25 Junction12 as Connection1212
            connect Junction12 "Cell voltage.in" as Connection1213
            connect Termination10.in Junction12 as Connection1214
            connect From26 Termination5.in as Connection1222
            connect From28 Termination6.in as Connection1220
            connect Termination4.in From24 as Connection1221
            connect Termination8.in From29 as Connection1218
            connect Termination2.in From27 as Connection1223
            connect From23 Termination3.in as Connection1215
            connect Termination7.in From33 as Connection1219
            connect Termination9.in From43 as Connection1216
            connect Termination1.in From30 as Connection1217
            connect Hysteresis.T From5 as Connection1158
            connect Hysteresis.I From42 as Connection1159
            connect From44 Hysteresis.Q as Connection1233
            connect From45 Hysteresis.eta as Connection1234
            connect Goto12 Hysteresis.V_hyst as Connection1235
            connect From46 Hysteresis.SOC as Connection1245
            connect T Goto3 as Connection1131
            connect "Signal switch1.in1" Sum3.out as Connection1246
            connect Goto16 "Signal switch1.out" as Connection1247
            connect "Vcell Value Set.out" "Signal switch1.in" as Connection1248
            connect "Vcell Override.out" "Signal switch1.in2" as Connection1249
            connect SOC.in Termination3.in as Connection1251

            Init_SOC = "init_dynamic"
            Q_total = "total_Q"
            Ts = "Ts"
            meas_Ibal = "False"
            meas_Icell = "False"
            meas_OCV = "False"
            meas_Q = "False"
            meas_Rint = "False"
            meas_SOH = "False"
            meas_T = "False"
            meas_hyst = "False"

            mask {
                description = "This component represents the \"Enhanced self correcting\" battery cell model. It is a state-of-the-art electrical representation of the physical processes naturally ocurring inside the battery cell. Many parameters can be set as either constants or functions of temperature, state of charge, or state of health. Parallel cells are modelled simply by distributing the input current across the number of cells entered in the parameter input. <br></br>This component is simulated at the signal processing time step, entered in this component as the Execution rate parameter.<br></br><br></br>For more information regarding implementation and parametrization, please refer to the documentation."
                help_file = "battery_cell.html"

                SOC_vector {
                    label = "State of charge vector"
                    widget = edit
                    type = generic
                    default_value = "[0.00000, 0.00500, 0.01000, 0.01500, 0.02000, 0.02500, 0.03000, 0.03500, 0.04000, 0.04500, 0.05000, 0.05500, 0.06000, 0.06500, 0.07000, 0.07500, 0.08000, 0.08500, 0.09000, 0.09500, 0.10000, 0.10500, 0.11000, 0.11500, 0.12000, 0.12500, 0.13000, 0.13500, 0.14000, 0.14500, 0.15000, 0.15500, 0.16000, 0.16500, 0.17000, 0.17500, 0.18000, 0.18500, 0.19000, 0.19500, 0.20000, 0.20500, 0.21000, 0.21500, 0.22000, 0.22500, 0.23000, 0.23500, 0.24000, 0.24500, 0.25000, 0.25500, 0.26000, 0.26500, 0.27000, 0.27500, 0.28000, 0.28500, 0.29000, 0.29500, 0.30000, 0.30500, 0.31000, 0.31500, 0.32000, 0.32500, 0.33000, 0.33500, 0.34000, 0.34500, 0.35000, 0.35500, 0.36000, 0.36500, 0.37000, 0.37500, 0.38000, 0.38500, 0.39000, 0.39500, 0.40000, 0.40500, 0.41000, 0.41500, 0.42000, 0.42500, 0.43000, 0.43500, 0.44000, 0.44500, 0.45000, 0.45500, 0.46000, 0.46500, 0.47000, 0.47500, 0.48000, 0.48500, 0.49000, 0.49500, 0.50000, 0.50500, 0.51000, 0.51500, 0.52000, 0.52500, 0.53000, 0.53500, 0.54000, 0.54500, 0.55000, 0.55500, 0.56000, 0.56500, 0.57000, 0.57500, 0.58000, 0.58500, 0.59000, 0.59500, 0.60000, 0.60500, 0.61000, 0.61500, 0.62000, 0.62500, 0.63000, 0.63500, 0.64000, 0.64500, 0.65000, 0.65500, 0.66000, 0.66500, 0.67000, 0.67500, 0.68000, 0.68500, 0.69000, 0.69500, 0.70000, 0.70500, 0.71000, 0.71500, 0.72000, 0.72500, 0.73000, 0.73500, 0.74000, 0.74500, 0.75000, 0.75500, 0.76000, 0.76500, 0.77000, 0.77500, 0.78000, 0.78500, 0.79000, 0.79500, 0.80000, 0.80500, 0.81000, 0.81500, 0.82000, 0.82500, 0.83000, 0.83500, 0.84000, 0.84500, 0.85000, 0.85500, 0.86000, 0.86500, 0.87000, 0.87500, 0.88000, 0.88500, 0.89000, 0.89500, 0.90000, 0.90500, 0.91000, 0.91500, 0.92000, 0.92500, 0.93000, 0.93500, 0.94000, 0.94500, 0.95000, 0.95500, 0.96000, 0.96500, 0.97000, 0.97500, 0.98000, 0.98500, 0.99000, 0.99500, 1.00000]"
                    unit = "p.u."
                    group = "Basic parameters:1"
                }

                Init_SOC {
                    label = "Initial state of charge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                    group = "Basic parameters"
                }

                SOH_vector {
                    label = "State of health vector"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Basic parameters"
                }

                T_vector {
                    label = "Temperatures vector"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    group = "Basic parameters"
                }

                OCV {
                    label = "Open circuit voltage"
                    widget = edit
                    type = generic
                    default_value = "[[ 2.81376455, 2.934249, 3.01131295, 3.0707406, 3.12232055, 3.1679386999999997, 3.20864785, 3.2450991, 3.27819715, 3.30856405, 3.3362725999999996, 3.3618633499999997, 3.38570235, 3.40775795, 3.42830425, 3.4476403500000004, 3.4655972, 3.48235125, 3.4982734000000004, 3.5123286499999997, 3.52428065, 3.5322503000000003, 3.536190725, 3.538614355, 3.5410027349999997, 3.543410505, 3.54570155, 3.548176695, 3.55074616, 3.55332738, 3.5560948150000002, 3.5590690300000003, 3.5622155269999998, 3.5656399850000002, 3.569116135, 3.5732180099999997, 3.57727722, 3.5820934199999996, 3.58702369, 3.5923769, 3.5981162299999996, 3.60387865, 3.6098619999999997, 3.61578425, 3.6219618000000002, 3.6279250050000003, 3.633843695, 3.6400532699999997, 3.646100845, 3.6525218749999997, 3.659006475, 3.6658932699999998, 3.6723717, 3.67845187, 3.6843657899999998, 3.690319095, 3.696598375, 3.70317101, 3.7103087649999997, 3.71751191, 3.72478503, 3.7312556949999998, 3.737126875, 3.7421215, 3.746753425, 3.7512470799999997, 3.7557191, 3.759948005, 3.7641692570000003, 3.7683243400000004, 3.77226982, 3.776130865, 3.77996065, 3.7834905, 3.78724775, 3.79068595, 3.79405435, 3.79739885, 3.8008169, 3.8037784, 3.80672915, 3.80976375, 3.81294495, 3.8155956, 3.81841755, 3.8211345, 3.82375915, 3.826463, 3.8289732, 3.83148675, 3.8339139, 3.8364958500000004, 3.8389766, 3.84130125, 3.8436186, 3.84593155, 3.8484112, 3.8508698999999997, 3.853017, 3.8553768, 3.8575925, 3.8597776, 3.8618757, 3.8639596, 3.8662289, 3.8684966, 3.8704239, 3.8727584, 3.8746679, 3.8767636000000003, 3.8789283, 3.88108645, 3.88336145, 3.88554035, 3.8876272999999997, 3.88979185, 3.8919731499999997, 3.89423455, 3.89660415, 3.89878675, 3.9010609, 3.9034554999999997, 3.9058273, 3.9083077999999998, 3.9107870499999997, 3.9134431, 3.91605185, 3.9188395000000003, 3.92173155, 3.9245562, 3.9278719, 3.93123635, 3.93501795, 3.9392118, 3.9434215, 3.9476625, 3.9522793, 3.956863, 3.9614228, 3.9661213500000003, 3.97056845, 3.97496085, 3.97923145, 3.98304985, 3.9867527999999997, 3.990355, 3.9938599000000004, 3.997107, 4.0001812, 4.0032136000000005, 4.0059932, 4.0087594499999994, 4.011432500000001, 4.0139152, 4.0163138, 4.0185217, 4.02070895, 4.022900900000001, 4.0249913, 4.0268188, 4.02872455, 4.03070295, 4.0323274, 4.0341031, 4.03572435, 4.0374238, 4.03904715, 4.0406617, 4.0421721999999995, 4.04385255, 4.04555215, 4.0469809, 4.048781399999999, 4.05039585, 4.052104, 4.05390415, 4.0557043, 4.057513849999999, 4.0593374, 4.0614338, 4.0635322, 4.0657283, 4.0680112, 4.0704244, 4.07274935, 4.075507399999999, 4.0782211, 4.0812930000000005, 4.08431865, 4.08759685, 4.0910807, 4.0947777499999995, 4.0989474, 4.10329865, 4.10799, 4.1129271, 4.1185746, 4.1244995, 4.1311105999999995, 4.138731625, 4.14890576], [2.8100227500000003, 2.916445, 2.99576475, 3.057303, 3.11000275, 3.1564935, 3.19803925, 3.2350955, 3.26858575, 3.2992202500000003, 3.3273629999999996, 3.35331675, 3.37731175, 3.39958975, 3.4203212499999998, 3.4398017500000004, 3.457986, 3.47495625, 3.4909670000000004, 3.50564325, 3.51860325, 3.5288515, 3.535353625, 3.539071775, 3.5418136749999998, 3.544252525, 3.54650775, 3.5488834750000002, 3.5513308, 3.5538369, 3.556474075, 3.55934515, 3.5622776349999996, 3.565399925, 3.5687806749999997, 3.57249005, 3.5763861, 3.5808671, 3.5855184500000004, 3.5906845, 3.5961811499999996, 3.60179325, 3.60771, 3.6137212499999998, 3.619809, 3.626025025, 3.632018475, 3.63826635, 3.644504225, 3.6510093749999997, 3.657832375, 3.66466635, 3.6710585, 3.67705935, 3.6830289499999997, 3.689195475, 3.6957918750000003, 3.70265505, 3.709943825, 3.71715955, 3.72392515, 3.729878475, 3.735234375, 3.7402075, 3.744967125, 3.7498354, 3.7545954999999998, 3.759340025, 3.764046285, 3.7688217, 3.7733491, 3.777854325, 3.78220325, 3.7862525, 3.7902387500000003, 3.79382975, 3.79747175, 3.80099425, 3.8044845, 3.807692, 3.81084575, 3.81401875, 3.81712475, 3.819978, 3.82288775, 3.8256725, 3.82839575, 3.831115, 3.833666, 3.83623375, 3.8387695, 3.8412792500000004, 3.843683, 3.84610625, 3.848493, 3.85085775, 3.853256, 3.8555495, 3.857885, 3.860084, 3.8623624999999997, 3.864488, 3.8665785, 3.868598, 3.8707445, 3.872883, 3.8749195, 3.876992, 3.8789395, 3.881018, 3.8830415, 3.88503225, 3.88720725, 3.88930175, 3.8913365, 3.89335925, 3.8954657499999996, 3.89757275, 3.89982075, 3.90193375, 3.9041045000000003, 3.9064775, 3.9087365, 3.911139, 3.91353525, 3.9160155, 3.91865925, 3.9213975000000003, 3.92425775, 3.927181, 3.9305595, 3.93418175, 3.93828975, 3.942859, 3.9479075, 3.9531125, 3.9585965, 3.9639149999999996, 3.968714, 3.97340675, 3.9776422499999997, 3.98160425, 3.98535725, 3.98884925, 3.992164, 3.995375, 3.9984995000000003, 4.001535, 4.004506, 4.007268, 4.0099659999999995, 4.01259725, 4.015162500000001, 4.017576, 4.019969, 4.0222085, 4.02434475, 4.026504500000001, 4.0285565, 4.030494, 4.03242275, 4.03431475, 4.036036999999999, 4.0377155, 4.03942175, 4.041119, 4.04283575, 4.0445085, 4.046061, 4.047662750000001, 4.04936075, 4.050904500000001, 4.052707, 4.05437925, 4.05612, 4.05792075, 4.0597215, 4.06156925, 4.063487, 4.065569, 4.067661, 4.0698415, 4.072056, 4.074522, 4.07694675, 4.079536999999999, 4.0823055, 4.085265000000001, 4.08839325, 4.0915842499999995, 4.0950035, 4.09868875, 4.102737, 4.106893250000001, 4.11155, 4.1162355, 4.1216729999999995, 4.1272975, 4.133553, 4.140458125, 4.149328799999999], [2.80628095, 2.898641, 2.98021655, 3.0438654, 3.09768495, 3.1450483, 3.18743065, 3.2250919, 3.2589743500000004, 3.2898764500000004, 3.3184533999999997, 3.34477015, 3.36892115, 3.39142155, 3.41233825, 3.43196315, 3.4503747999999996, 3.46756125, 3.4836606000000003, 3.4989578499999996, 3.5129258500000002, 3.5254527, 3.534516525, 3.539529195, 3.542624615, 3.545094545, 3.54731395, 3.549590255, 3.55191544, 3.55434642, 3.556853335, 3.55962127, 3.562339743, 3.565159865, 3.568445215, 3.57176209, 3.57549498, 3.5796407799999996, 3.58401321, 3.5889921, 3.5942460699999996, 3.59970785, 3.605558, 3.6116582499999996, 3.6176562, 3.624125045, 3.630193255, 3.63647943, 3.642907605, 3.6494968749999996, 3.656658275, 3.66343943, 3.6697452999999998, 3.67566683, 3.6816921099999997, 3.688071855, 3.694985375, 3.70213909, 3.709578885, 3.71680719, 3.72306527, 3.728501255, 3.7333418750000003, 3.7382934999999997, 3.743180825, 3.74842372, 3.7534718999999996, 3.758732045, 3.7639233130000003, 3.7693190600000004, 3.77442838, 3.779577785, 3.78444585, 3.7890145, 3.79322975, 3.7969735499999997, 3.80088915, 3.80458965, 3.8081521, 3.8116056, 3.81496235, 3.81827375, 3.8213045500000002, 3.8243603999999998, 3.82735795, 3.8302104999999997, 3.83303235, 3.8357669999999997, 3.8383588, 3.84098075, 3.8436251, 3.8460626500000004, 3.8483894000000003, 3.8509112500000002, 3.8533674, 3.85578395, 3.8581008, 3.8602290999999997, 3.862753, 3.8647912, 3.8671325, 3.8691984, 3.8712813, 3.8732364, 3.8752600999999998, 3.8772694, 3.8794151, 3.8812256, 3.8832111, 3.8852724000000003, 3.8871547, 3.88897805, 3.89105305, 3.8930631499999997, 3.8950457, 3.89692665, 3.8989583499999996, 3.90091095, 3.90303735, 3.90508075, 3.9071481, 3.9094995, 3.9116457000000002, 3.9139702, 3.91628345, 3.9185879, 3.92126665, 3.9239555, 3.92678395, 3.9298058, 3.9332471, 3.93712715, 3.9415615500000003, 3.9465062, 3.9523935, 3.9585624999999998, 3.9649137, 3.970967, 3.9760052, 3.9806921500000003, 3.98471605, 3.98824765, 3.99148305, 3.99464865, 3.9975752, 4.000395, 4.0031391, 4.005963, 4.0088308, 4.0113224, 4.0139388, 4.016435049999999, 4.018892500000001, 4.0212368, 4.0236241999999995, 4.0258953, 4.02798055, 4.0301081000000005, 4.032121699999999, 4.0341692, 4.03612095, 4.03792655, 4.0397466, 4.0413279, 4.04311915, 4.0448142, 4.04662435, 4.0483553, 4.0499498, 4.05147295, 4.05316935, 4.0548281, 4.0566325999999995, 4.05836265, 4.060136, 4.06193735, 4.0637387, 4.06562465, 4.0676366, 4.069704199999999, 4.0717898, 4.0739547, 4.0761008, 4.0786196, 4.08114415, 4.083566599999999, 4.0863899, 4.089237000000001, 4.09246785, 4.09557165, 4.0989263, 4.1025997499999995, 4.1065266, 4.11048785, 4.11511, 4.1195439, 4.1247714, 4.1300955, 4.1359954, 4.1421846250000005, 4.1497518399999995]]"
                    unit = "V"
                    group = "Basic parameters"
                }

                R0 {
                    label = "Internal resistance"
                    widget = edit
                    type = generic
                    default_value = "[4.6198e-3, 1.7810e-3, 1.1351e-3]"
                    unit = "Ω"
                    group = "Basic parameters"
                }

                eta {
                    label = "Coulombic efficiency"
                    widget = edit
                    type = generic
                    default_value = "[0.98174, 0.99102, 0.98965]"
                    group = "Basic parameters"
                }

                cell_NO {
                    label = "Number of cells in parallel"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Basic parameters"
                }

                nom_Q_combo {
                    label = "Nominal capacity"
                    widget = combo
                    combo_values = "Total capacity", "Discharge capacity"
                    type = string
                    default_value = "Total capacity"
                    group = "Basic parameters"
                    no_evaluate

                    CODE property_value_edited
                        if new_value=="Total capacity":
                            mdl.enable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.disable_property(mdl.prop(container_handle, "V_min"))
                            mdl.disable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_discharge"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.enable_property(mdl.prop(container_handle, "V_min"))
                            mdl.enable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_discharge"))
                    ENDCODE
                }

                Q_discharge {
                    label = "Discharge capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                    disabled
                }

                V_min {
                    label = "Minimum/cut-off voltage"
                    widget = edit
                    type = generic
                    default_value = "2.81"
                    unit = "V"
                    group = "Basic parameters"
                    disabled
                }

                I_dis {
                    label = "Discharge rate"
                    widget = edit
                    type = generic
                    default_value = "15"
                    unit = "A"
                    group = "Basic parameters"
                    disabled
                }

                Q_total {
                    label = "Total capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                }

                Ts {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "s"
                    group = "Basic parameters"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Basic parameters"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "basic_parameters")
                    ENDCODE
                }

                RC_NO {
                    label = "Model order"
                    widget = combo
                    combo_values = "None", "1", "2", "3"
                    type = string
                    default_value = "1"
                    group = "Diffusion process:3"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        parallel_rc = mdl.get_item("Parallel RC", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        mdl.set_property_value(mdl.prop(parallel_rc, "RC_number"), new_value)
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.disable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="1":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="2":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="3":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.enable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.enable_property(mdl.prop(container_handle, "C3"))
                    ENDCODE
                }

                R1 {
                    label = "Resistor 1"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                }

                C1 {
                    label = "Capacitor 1"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                }

                R2 {
                    label = "Resistor 2"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C2 {
                    label = "Capacitor 2"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                R3 {
                    label = "Resistor 3"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C3 {
                    label = "Capacitor 3"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                H_type {
                    label = "Hysteresis model"
                    widget = combo
                    combo_values = "None", "One state"
                    type = string
                    default_value = "One state"
                    group = "Voltage hysteresis:4"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        Hysteresis = mdl.get_item("Hysteresis", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if new_value=="None":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "None")
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        if new_value=="One state":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "One state")
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    ENDCODE
                }

                T_vector_h {
                    label = "Temperatures vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    unit = "celsius"
                    group = "Voltage hysteresis"
                }

                SOC_vector_h {
                    label = "State of charge vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Voltage hysteresis"
                }

                M0 {
                    label = "M0 parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.0031315, 0.0023535, 0.0011502]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                M {
                    label = "M parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.039929, 0.020018, 0.020545]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                gamma {
                    label = "Gamma parameter"
                    widget = edit
                    type = generic
                    default_value = "[67.207e-3, 92.645e-3, 67.840e-3]"
                    group = "Voltage hysteresis"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Voltage hysteresis"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "voltage_hysteresis")
                    
                    ENDCODE
                }

                balancing {
                    label = "Balancing circuit"
                    widget = combo
                    combo_values = "None", "Passive", "Direct current input"
                    type = string
                    default_value = "None"
                    group = "Balancing circuit:5"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION, ITEM_TAG
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        passive_balancing_subsystem = mdl.get_item("Passive Balancing", parent=sub_handle, item_type=ITEM_COMPONENT)
                        Sum3 = mdl.get_item("Sum3", parent=sub_handle, item_type=ITEM_COMPONENT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        Goto3 = mdl.get_item("Goto3", parent=sub_handle, item_type=ITEM_TAG)
                    
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            try:
                                mdl.delete_item(mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT))
                            except:
                                pass
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "None")
                            try:
                                mdl.create_connection(start=port_T, end=Goto3, name = "Connection1131")
                            except:
                                pass
                        elif new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Passive balancing")
                            if old_value=="Direct current input":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:  #elif old_value=="None":
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                    
                            mdl.create_connection(start=mdl.term(passive_balancing_subsystem, "BL_SW"), end=mdl.term(bus_split, "out1"))
                            mdl.create_connection(start=mdl.term(Sum3, "out"), end=mdl.term(passive_balancing_subsystem, "V_term"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Direct current input")
                            if old_value=="Passive":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                            mdl.create_connection(start=mdl.term(bus_split, "out1"), end=mdl.term(passive_balancing_subsystem, "I_in"))
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                    ENDCODE
                }

                R_balance {
                    label = "Balancing parallel resistor"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "Ω"
                    group = "Balancing circuit"
                    disabled
                }

                meas_SOH {
                    label = "State of health"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements:6"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOH = mdl.create_component("core/Probe",
                                                        name="SOH",
                                                        parent=sub_handle,
                                                        position=(8488, 7760),)
                            Termination1 = mdl.get_item("Termination1", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOH, "in"), end=mdl.term(Termination1, "in"))
                    
                        else:
                            if mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_SOC {
                    label = "State of charge"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOC = mdl.create_component("core/Probe",
                                                        name="SOC",
                                                        parent=sub_handle,
                                                        position=(8488, 7824),)
                            Termination3 = mdl.get_item("Termination3", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOC, "in"), end=mdl.term(Termination3, "in"))
                    
                        else:
                            if mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_OCV {
                    label = "Open circuit voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            OCV = mdl.create_component("core/Probe",
                                                        name="OCV",
                                                        parent=sub_handle,
                                                        position=(8488, 7888),)
                            Termination4 = mdl.get_item("Termination4", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(OCV, "in"), end=mdl.term(Termination4, "in"))
                    
                        else:
                            if mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Rint {
                    label = "Internal resistance"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Internal_resistance = mdl.create_component("core/Probe",
                                                        name="Internal resistance",
                                                        parent=sub_handle,
                                                        position=(8488, 7952),)
                            Termination5 = mdl.get_item("Termination5", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Internal_resistance, "in"), end=mdl.term(Termination5, "in"))
                    
                        else:
                            if mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Q {
                    label = "Total capacity"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Total_capacity = mdl.create_component("core/Probe",
                                                        name="Total capacity",
                                                        parent=sub_handle,
                                                        position=(8488, 8016),)
                            Termination6 = mdl.get_item("Termination6", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Total_capacity, "in"), end=mdl.term(Termination6, "in"))
                    
                        else:
                            if mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Ibal {
                    label = "Balancing current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            current = mdl.create_component("core/Probe",
                                                        name="Balancing current",
                                                        parent=sub_handle,
                                                        position=(8688, 7760),)
                            Termination2 = mdl.get_item("Termination2", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(current, "in"), end=mdl.term(Termination2, "in"))
                    
                        else:
                            if mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Icell {
                    label = "Cell current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Cell_current = mdl.create_component("core/Probe",
                                                        name="Cell current",
                                                        parent=sub_handle,
                                                        position=(8688, 7824),)
                            Termination7 = mdl.get_item("Termination7", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Cell_current, "in"), end=mdl.term(Termination7, "in"))
                    
                        else:
                            if mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_T {
                    label = "Temperature"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Temperature = mdl.create_component("core/Probe",
                                                        name="Temperature",
                                                        parent=sub_handle,
                                                        position=(8688, 7888),)
                            Termination8 = mdl.get_item("Termination8", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Temperature, "in"), end=mdl.term(Termination8, "in"))
                    
                        else:
                            if mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_hyst {
                    label = "Hysteresis voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            voltage = mdl.create_component("core/Probe",
                                                        name="Hysteresis voltage",
                                                        parent=sub_handle,
                                                        position=(8688, 7952),)
                            Termination9 = mdl.get_item("Termination9", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(voltage, "in"), end=mdl.term(Termination9, "in"))
                    
                        else:
                            if mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    Init_SOC = mdl.get_property_value(mdl.prop(item_handle, "Init_SOC"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                    cell_NO = mdl.get_property_value(mdl.prop(item_handle, "cell_NO"))
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                    C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                    R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                    C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                    R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                    C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    T_vector_h = mdl.get_property_value(mdl.prop(item_handle, "T_vector_h"))
                    SOC_vector_h = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector_h"))
                    M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                    M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                    gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                    balancing = mdl.get_property_value(mdl.prop(item_handle, "balancing"))
                    R_balance = mdl.get_property_value(mdl.prop(item_handle, "R_balance"))
                    meas_SOH = mdl.get_property_value(mdl.prop(item_handle, "meas_SOH"))
                    meas_SOC = mdl.get_property_value(mdl.prop(item_handle, "meas_SOC"))
                    meas_OCV = mdl.get_property_value(mdl.prop(item_handle, "meas_OCV"))
                    meas_Rint = mdl.get_property_value(mdl.prop(item_handle, "meas_Rint"))
                    meas_Q = mdl.get_property_value(mdl.prop(item_handle, "meas_Q"))
                    meas_Ibal = mdl.get_property_value(mdl.prop(item_handle, "meas_Ibal"))
                    meas_Icell = mdl.get_property_value(mdl.prop(item_handle, "meas_Icell"))
                    meas_T = mdl.get_property_value(mdl.prop(item_handle, "meas_T"))
                    meas_hyst = mdl.get_property_value(mdl.prop(item_handle, "meas_hyst"))
                    # HEADER STOP
                    # Entire code here is for calculating Q_total from Q_discharge
                    from typhoon.api.schematic_editor.exception import SchApiException
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    import scipy.interpolate as interpolate
                
                    sub_handle = mdl.get_sub_level_handle(item_handle)
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    capacity_module = mdl.get_item("Capacity", parent=sub_handle, item_type=ITEM_COMPONENT)
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                
                    if nom_Q_combo == "Total capacity":
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_total)
                
                    elif nom_Q_combo == "Discharge capacity":
                        # Finding the voltage drops: V_RC_max
                        if RC_NO == "None":
                            RC_drop = 0
                        elif RC_NO == "1":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            RC_drop = R1*I_dis
                        elif RC_NO == "2":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            RC_drop = (R1+R2)*I_dis
                        elif RC_NO == "3":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                            RC_drop = (R1+R2+R3)*I_dis
                
                        # Finding the voltage drops: V_hyst_max
                        if H_type == "None":
                            H_drop = 0
                        elif H_type == "One state":
                            M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                            M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                            H_drop = np.mean(M) + np.mean(M0)
                
                        if np.ndim(Q_discharge) == 0:
                            if np.ndim(R0) == 0:
                                OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    # This is a bad cornercase where OCV is a function of temperature,
                                    # but neither R0 nor Q_discharge are. We take last temperature dependant OCV
                                    SOC_from_OCV = interpolate.interp1d(OCV[-1], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 1:
                                Q_max = [0]*len(R0)
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 2:
                                Q_max = [0]*len(R0[-1])
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 1:
                            Q_max = Q_discharge.copy()
                            for index, temp in enumerate(T_vector):
                                if np.ndim(R0) == 0:
                                    OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 1:
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 2:
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    # [-1] index is used to find the last of the SOH vector
                
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max[index] = Q_discharge[index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 2:
                            Q_max = Q_discharge.copy()
                            for health_index in range(len(SOH_vector)):
                                for index, temp in enumerate(T_vector):
                                    if np.ndim(R0) == 0:
                                        OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 1:
                                        OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 2:
                                        OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                        # [-1] index is used to find the last of the SOH vector
                
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[health_index][index] = Q_discharge[health_index][index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_max)
                        if np.min(np.min(Q_max))<0:
                            info(f"{Q_max=}")
                            raise SchApiException("Provided discharge data is not valid")
                ENDCODE

                CODE define_icon
                    image('battery_cell.svg')
                ENDCODE
            }
        }
        [
            position = 8688, 9056
            size = 32, 64
        ]

        component "core/Voltage Measurement" dyn_voltage_2 {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 8528, 9048
            rotation = right
            scale = -1, 1
            size = 64, 32
        ]

        component sys_mp_signal_switch "Multiport signal switch5" {
            number_of_input_terminals = "5"
        }
        [
            position = 8664, 8912
            hide_name = True
        ]

        component lut_1d "1D look-up table33" {
            in_vec_x = "DYN_25_SCRIPT_1_TIME"
            out_vec_f_x = "DYN_25_SCRIPT_1_CURRENT"
            table_impl = "Non-equidistant"
        }
        [
            position = 8520, 8888
            hide_name = True
        ]

        component "core/Signal Controlled Current Source" Isp26 {
        }
        [
            position = 8832, 9048
            rotation = left
            hide_name = True
            scale = -1, 1
            size = 64, 32
        ]

        component "core/Current Measurement" dyn_current_2 {
            execution_rate = "Ts"
            sig_output = "True"
        }
        [
            position = 8768, 9008
            rotation = down
            scale = 1, -1
            size = 64, 32
        ]

        component gen_integrator Integrator9 {
        }
        [
            position = 8952, 8824
            hide_name = True
        ]

        component gen_probe dyn_chgAh_2 {
        }
        [
            position = 9048, 8808
        ]

        component gen_integrator Integrator10 {
        }
        [
            position = 8952, 8888
            hide_name = True
        ]

        component gen_probe dyn_disAh_2 {
        }
        [
            position = 9048, 8888
        ]

        component gen_c_function "C function11" {
            input_terminals = "real current;"
            input_terminals_dimensions = "inherit"
            input_terminals_feedthrough = "True"
            input_terminals_show_labels = "False"
            output_fnc = "/*Begin code section*/
if (current>0) {
    out = current;
    out2 = 0;
}
else if (current<0) {
    out2 = current;
    out = 0;
}
/*End code section*/"
            output_terminals = "real out;inherit out2;"
            output_terminals_dimensions = "inherit;inherit"
            output_terminals_feedthrough = "True;True"
            output_terminals_show_labels = "False;False"
        }
        [
            position = 8856, 8856
            hide_name = True
            size = 48, 48
        ]

        component gen_c_function "C function12" {
            global_variables = "real next_sw;real first_time_step_flag;real counter_cooldown;"
            init_fnc = "/*Begin code section*/
script_no = 1;  // start with the first script
sw_select = 1;  // start with first sw permutation (1st script)
timer = 0;
counter_cooldown = counter_cooldown_max;
 // wait an \"hour\" for the
// battery to go back to its original temperature [instant with typhoon] 
// and to discharge the RC capacitors
first_time_step_flag = 1;  // This flag exists because vcell measurement
// will always start with 0. We need to prevent even looking at that false vcell.
temperature = input_temp;
/*End code section*/"
            input_terminals = "real input_temp;real Vcell;"
            input_terminals_dimensions = "inherit;inherit"
            input_terminals_feedthrough = "True;True"
            input_terminals_show_labels = "True;True"
            output_fnc = "/*Begin code section*/
if (sw_select == 0) {  // Resting the battery cell
    counter_cooldown--;
    if (counter_cooldown <= 0) {
        sw_select = next_sw;
        counter_cooldown = counter_cooldown_max;
    }
}
else {  //  (sw_select != 0) 
    timer += Ts;
    if (timer >= DYN_SCRIPT_1_STOP_TIME && sw_select == 1){
        // This part triggers when the LUT attached to sw_select finishes with its dynamic profile
        // Consequently, the profile starts again by resetting the timer to 0
        timer = 0;
        if (Vcell < V_end_script_1 && first_time_step_flag != 1){
            // If battery cell reached less than roughly 10% of SOC, stop the dynamic profile injection
            // This is to prevent possible undervoltage with high current peaks
            sw_select = 0;
            next_sw = 2;
            temperature = 25;  // And remains so for the rest of the scripts
            script_no = 2;
        }
    }
    else if (Vcell <= Vmin && sw_select == 2){
        sw_select = 3;  // Tither profiles
        timer = 0;  // Refresh timer
    }
    else if (timer >= DYN_DIS_CHG_TITHER_STOP_TIME && sw_select == 3){
        timer = 0;
        if (Vcell < Vmin) {
            // If battery cell reached less than Vmin, stop the tither profile injection
            sw_select = 4;
            script_no = 3;
            // No need to rest the battery cell
            // Constant current charging of the battery cell with C/1
        }
    }
    else if (sw_select == 4 && Vcell > Vmax){  // Constant current charge reached Vmax
        sw_select = 5;  // Tither profiles
        timer = 0;  // Refresh timer
    }
    else if (sw_select == 5 && timer >= DYN_CHG_TITHER_STOP_TIME){
        timer = 0;  // Refresh timer
        if (Vcell > Vmax){
            sw_select = 0;
            script_no = 4;
            next_sw = 0;
        }
    }
}

first_time_step_flag = 0;
/*End code section*/"
            output_terminals = "real sw_select;inherit temperature;inherit timer;inherit script_no;"
            output_terminals_dimensions = "inherit;inherit;inherit;inherit"
            output_terminals_feedthrough = "True;True;True;True"
            output_terminals_show_labels = "True;True;True;True"
            parameters = "real Vmin;real Vmax;real V_end_script_1;real counter_cooldown_max;real DYN_SCRIPT_1_STOP_TIME;real DYN_CHG_TITHER_STOP_TIME;real DYN_DIS_CHG_TITHER_STOP_TIME;real Ts;"
        }
        [
            position = 8656, 8656
            hide_name = True
            size = 176, 160
        ]

        component gen_probe dyn_script_no_2 {
        }
        [
            position = 8824, 8720
        ]

        component lut_1d "1D look-up table34" {
            in_vec_x = "OCV_25_SCRIPT_2_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_2_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 8520, 8920
            hide_name = True
        ]

        component lut_1d "1D look-up table35" {
            in_vec_x = "OCV_25_SCRIPT_4_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_4_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 8520, 8952
            hide_name = True
        ]

        component Subsystem "Dyn Battery Cell_05" {
            layout = static
            component Subsystem "SOC Model" {
                layout = dynamic
                component gen_gain Gain2 {
                    gain = "1/numeric_scale"
                }
                [
                    position = 7944, 8152
                    hide_name = True
                ]

                component gen_integrator Integrator {
                    limit_lower = "-0.1e6"
                    limit_output = "True"
                    limit_upper = "1.1e6"
                    show_init_condition = "external"
                    show_reset = "rising"
                }
                [
                    position = 7840, 8152
                ]

                component gen_gain Gain1 {
                    execution_rate = "Ts"
                    gain = "1/3600.0"
                }
                [
                    position = 7688, 8128
                    hide_name = True
                ]

                component gen_c_function Coulombic_Eff {
                    input_terminals = "real i;real eta;"
                    input_terminals_dimensions = "inherit;inherit"
                    input_terminals_feedthrough = "True;True"
                    input_terminals_show_labels = "True;True"
                    output_fnc = "/*Begin code section*/
// If the battery is being discharged, efficiency is 1
// If battery is being charged, efficiency eta is used
if(i>0)
    i_out = i;
else
    i_out = eta*i;
/*End code section*/"
                    output_terminals = "real i_out;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "False"
                }
                [
                    position = 7496, 8120
                    size = 48, 48
                ]

                component gen_gain Gain3 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7752, 8128
                    hide_name = True
                ]

                component gen_product Product1 {
                    signs = "*/"
                }
                [
                    position = 7608, 8128
                    hide_name = True
                ]

                component gen_sum Sum1 {
                    signs = "+-"
                }
                [
                    position = 8072, 8088
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                }
                [
                    position = 7976, 8080
                ]

                component src_scada_input "SOC Override" {
                    def_value = "Init_SOC/100.0"
                    execution_rate = "Ts"
                    max = "1"
                    min = "0"
                    unit = ""
                }
                [
                    position = 7472, 8432
                ]

                component gen_sum Sum2 {
                    signs = "+-"
                }
                [
                    position = 7600, 8424
                    hide_name = True
                ]

                component src_constant Constant2 {
                    execution_rate = "Ts"
                }
                [
                    position = 7520, 8392
                    hide_name = True
                ]

                component "core/Edge Detection" "Edge Detection1" {
                }
                [
                    position = 7712, 8168
                    hide_name = True
                    size = 32, 32
                ]

                component gen_gain Gain4 {
                    execution_rate = "Ts"
                    gain = "numeric_scale"
                }
                [
                    position = 7720, 8424
                    hide_name = True
                ]

                component gen_limiter Limit1 {
                    lower_limit = "-0.1"
                }
                [
                    position = 8160, 8088
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8112
                ]

                port SOC_pu {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8240, 8088
                ]

                port Q {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8256
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7248, 8192
                ]

                junction Junction1 sp
                [
                    position = 7656, 8424
                ]

                comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Ah-As</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling  </span></p></body></html> ENDCOMMENT 
                [
                    position = 7664, 8056
                ]

                comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Taking into account</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">the Coulombic Efficiency</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">during charge </span></p></body></html> ENDCOMMENT 
                [
                    position = 7424, 8024
                ]

                comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7736, 8056
                ]

                comment Comment4 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling Inversion</span></p></body></html> ENDCOMMENT 
                [
                    position = 7896, 8176
                ]

                comment Comment6 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">pu</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">scaling </span> </p></body></html> ENDCOMMENT 
                [
                    position = 7584, 8056
                ]

                comment Comment7 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Initial SOC and</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">SOC Override</span></p></body></html> ENDCOMMENT 
                [
                    position = 7512, 8328
                ]

                comment Comment8 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Numeric</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Scaling</span></p></body></html> ENDCOMMENT 
                [
                    position = 7696, 8448
                ]

                connect I Coulombic_Eff.i as Connection1019
                connect Integrator.in Gain3.out as Connection1024
                connect Gain3.in Gain1.out as Connection1025
                connect Gain2.in Integrator.out as Connection1026
                connect Product1.in Coulombic_Eff.i_out as Connection1027
                connect Product1.out Gain1.in as Connection1028
                connect Constant1.out Sum1.in as Connection1030
                connect Sum1.in1 Gain2.out as Connection1031
                [
                    position = 0, 0
                    breakpoints = 8024, 8096; 8024, 8152
                ]
                connect Q Product1.in1 as Connection1033
                connect Constant2.out Sum2.in as Connection1034
                connect Sum2.in1 "SOC Override.out" as Connection1035
                connect Integrator.reset "Edge Detection1.Out1" as Connection1042
                connect "Edge Detection1.In1" Junction1 as Connection1043
                connect Junction1 Sum2.out as Connection1044
                [
                    position = 0, 0
                ]
                connect Integrator.init_condition_port Gain4.out as Connection1045
                connect Gain4.in Junction1 as Connection1046
                connect eta Coulombic_Eff.eta as Connection1047
                [
                    position = 0, 0
                    breakpoints = 7440, 8192; 7440, 8128
                ]
                connect Sum1.out Limit1.in as Connection1048
                connect Limit1.out SOC_pu as Connection1049

                Init_SOC = "Init_SOC"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">SOC Model models the state of charge of the battery by applying ideal Coulomb Counting.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Following options are supported:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Coulombic Efficiency</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Available capacity as signal input Q</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Inital SOC supported</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- SOC can be overridden during the simulation (reset to any value)</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Full numerical range of the integrator is used </p></body></html>"

                    Init_SOC {
                        label = "Initial SOC"
                        widget = edit
                        type = generic
                        default_value = "80"
                        unit = "%"
                    }

                    Ts {
                        label = "execution_rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE init
                        numeric_scale = 1e6
                    ENDCODE
                }
            }
            [
                position = 8072, 8072
                size = 128, 64
            ]

            component "core/Signal Controlled Voltage Source" Vt {
            }
            [
                position = 8352, 8384
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component "core/Current Measurement" It {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8448, 8336
                size = 64, 32
            ]

            component gen_sum Sum3 {
                signs = "++--"
            }
            [
                position = 8016, 8384
                hide_name = True
            ]

            component src_scada_input SOH_set {
                def_value = "1"
                execution_rate = "Ts"
                max = "1"
                min = "0"
                unit = ""
            }
            [
                position = 7224, 8032
            ]

            component Subsystem Capacity {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Qnom {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port Q {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Qnom.out Q as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Capacity can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Qnom is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Qnom {
                        label = "Nominal Capacity"
                        widget = edit
                        type = generic
                        default_value = "Q_discharge"
                        unit = "Ah"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Qnom = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Qnom_value = mdl.get_property_value(mdl.prop(item_handle, "Qnom"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Qnom_value)) < 0:
                            raise SchApiException("Cell total capacity cannot be smaller than 0. Please check the data again")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Qnom_value) == 0:
                            Qnom = mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Qnom, "value"), Qnom_value)
                            mdl.set_property_value(mdl.prop(Qnom, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Q)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Qnom_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Qnom", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Q)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Qnom_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7816
                size = 128, 56
            ]

            component Subsystem "Internal Resistance" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Rint {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port R {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Rint.out R as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Resistance can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If Rint is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    Rint {
                        label = "Series Resistance"
                        widget = edit
                        type = generic
                        default_value = "R0"
                        unit = "Ω"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        Rint = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        Rint_prop_value = mdl.get_property_value(mdl.prop(item_handle, "Rint"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(Rint_prop_value)) < 0:
                            raise SchApiException("Provided Internal resistance cannot be smaller than 0")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_Rint = mdl.get_item("R", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(Rint_prop_value) == 0:
                            Rint = mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Rint, "value"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(Rint, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_Rint)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(Rint_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Rint", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_Rint)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), Rint_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Internal resistance is not properly defined")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7896
                size = 128, 56
            ]

            component Subsystem "Coulombic efficiency" {
                layout = dynamic
                component gen_terminator termination_SOH {
                }
                [
                    position = 8368, 8304
                ]

                component src_constant Efficiency_constant {
                    execution_rate = "Ts"
                }
                [
                    position = 8552, 8104
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8360, 8080
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port eta {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOH {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOH</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect termination_SOH.in SOH as Connection1
                connect termination_T.in T as Connection2
                connect Efficiency_constant.out eta as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Coulombic efficiency can be a function of temperature and SOH but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a value, then its independant of temperature and SOH.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a list, then it\'s dependace is of temperature, regardless of what is written inside SOH vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If eta is a nested list, then it\'s dependance is first of temperature and then of SOH.</p></body></html>"

                    eta {
                        label = "Coulombic efficiency"
                        widget = edit
                        type = generic
                        default_value = "eta"
                        unit = "ohm"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOH_vector {
                        label = "State of health vector"
                        widget = edit
                        type = generic
                        default_value = "SOH_vector"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        eta_prop_value = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    
                        if np.min(np.min(eta_prop_value)) < 0:
                            raise SchApiException("Cell coulombic efficiency cannot be smaller than 0.")
                        if np.max(np.max(eta_prop_value)) > 1:
                            raise SchApiException("Cell coulombic efficiency cannot be larger than 1.")
                    
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_SOH = mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(eta_prop_value) == 0:
                            Efficiency_constant = mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "value"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(Efficiency_constant, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 1:
                            LUT_1D = mdl.create_component("core/1D look-up table",
                                                        name="LUT_1D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_1D, "addr"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_1D, "value"), end=port_eta)
                    
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), Ts)
                    
                        elif np.ndim(eta_prop_value) == 2:
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("Efficiency_constant", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_SOH)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_eta)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), SOH_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), eta_prop_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), Ts)
                    
                        else:
                            raise SchApiException("Provided Capacity is not properly defined")
                    
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8072, 7984
                size = 128, 56
            ]

            component Subsystem "Open Circuit Voltage" {
                layout = dynamic
                component lut_1d LUT_1D {
                    ext_mode = "Linear"
                }
                [
                    position = 8432, 8200
                ]

                component gen_terminator termination_T {
                }
                [
                    position = 8416, 8096
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8080
                ]

                port OCV {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8640, 8104
                ]

                port SOC {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8288, 8304
                ]

                comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">Function of Temperature</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:8pt;">and SOC</span></p></body></html> ENDCOMMENT 
                [
                    position = 8464, 8016
                ]

                connect LUT_1D.addr SOC as Connection1
                connect LUT_1D.value OCV as Connection2
                connect termination_T.in T as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage is always a function of State of Charge.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Open circuit voltage can be a function of temperature but doesn\'t have to be.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a list, then it\'s dependace is of SOC, regardless of what is written inside temperature vector value.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If OCV is a nested list, then it\'s dependance is first of SOC and then of temperature.</p></body></html>"

                    OCV {
                        label = "Open circuit voltage vector (table)"
                        widget = edit
                        type = generic
                        default_value = "OCV"
                        unit = "V"
                    }

                    T_vector {
                        label = "Temperatures vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        OCV_value = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    
                        if not np.all(np.diff(SOC_vector) >= 0):
                            raise SchApiException("Provided SOC data is not monotonically nondecreasing, please check the documentation")
                    
                        if np.min(np.min(OCV_value)) < 0:
                            raise SchApiException("Open circuit voltage cannot be negative for any point.")
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                        port_OCV = mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        if np.ndim(OCV_value) == 1:
                            LUT_1D = mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(LUT_1D, "in_vec_x"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_1D, "out_vec_f_x"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_1D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_1D, "execution_rate"), execution_rate)
                            if not np.all(np.diff(OCV_value) >= 0):
                                raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                        elif np.ndim(OCV_value) == 2:
                            for OCV_1D in OCV_value:  # checks for non decaying OCV for each Temp
                                if not np.all(np.diff(OCV_value) >= 0):
                                    raise SchApiException("Provided OCV data is not monotonically nondecreasing, please check the documentation")
                    
                            LUT_2D = mdl.create_component("core/2D look-up table",
                                                        name="LUT_2D",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                    
                            mdl.delete_item(mdl.get_item("LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT))
                    
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_x"), end=port_T)
                            mdl.create_connection(start=mdl.term(LUT_2D, "addr_y"), end=port_SOC)
                            mdl.create_connection(start=mdl.term(LUT_2D, "value"), end=port_OCV)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_y"), SOC_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "in_vec_x"), T_vector)
                            mdl.set_property_value(mdl.prop(LUT_2D, "out_vec_f_xy"), OCV_value)
                            mdl.set_property_value(mdl.prop(LUT_2D, "ext_mode"), "linear")
                            mdl.set_property_value(mdl.prop(LUT_2D, "execution_rate"), execution_rate)
                    
                        else:
                            raise SchApiException("Provided discharge data is not valid")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7672, 7816
                size = 128, 56
            ]

            component Subsystem "Parallel RC" {
                layout = dynamic
                component gen_terminator termination_I {
                }
                [
                    position = 7832, 8048
                ]

                component gen_product Product_1a {
                }
                [
                    position = 7952, 8256
                ]

                component gen_product Product_1b {
                    signs = "*/"
                }
                [
                    position = 8064, 8112
                ]

                component gen_product Product_1c {
                    signs = "/*"
                }
                [
                    position = 8176, 8216
                    rotation = down
                ]

                component gen_sum Sum_1 {
                    signs = "+-"
                }
                [
                    position = 8176, 8120
                ]

                component gen_integrator Integrator_1 {
                }
                [
                    position = 8304, 8120
                ]

                component src_constant Constant_C1 {
                    execution_rate = "Ts"
                    value = "C1"
                }
                [
                    position = 7832, 8208
                ]

                component src_constant Constant_R1 {
                    execution_rate = "Ts"
                    value = "R1"
                }
                [
                    position = 7832, 8264
                ]

                component gen_sum Sum {
                    signs = "+"
                }
                [
                    position = 8448, 8128
                ]

                port V {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8544, 8136
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7736, 8120
                ]

                junction Junction1 sp
                [
                    position = 8344, 8520
                ]

                connect I termination_I.in as Connection127
                [
                    position = 0, 0
                ]
                connect Product_1a.in Constant_C1.out as Connection128
                connect Product_1a.in1 Constant_R1.out as Connection129
                connect Product_1b.in I as Connection131
                connect Product_1b.in1 Constant_C1.out as Connection132
                connect Product_1a.out Product_1c.in as Connection133
                connect Sum_1.in1 Product_1c.out as Connection134
                connect Product_1b.out Sum_1.in as Connection135
                connect Integrator_1.in Sum_1.out as Connection136
                connect Integrator_1.out Product_1c.in1 as Connection137
                connect Integrator_1.out Sum.in as Connection138
                connect Sum.out V as Connection139

                mask {
                    description = "The parallel RC subsystem emulates cell voltage drop due to the physical proccess diffusion of lithium ions.
                                   This is a standard method of implementing a cell in electrical circuits. The fidelity of the cell response can be modeled by increasing the order of the system. If the selected Model Order is less than 3, then the values for unused resistors and capacitors are not propagated. All the RC circuits are implemented using signal processing. If None is selected than the output voltage drop is a constant 0."

                    RC_number {
                        label = "Model order"
                        widget = combo
                        combo_values = "None", "1", "2", "3"
                        type = string
                        default_value = "1"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            port_V = mdl.get_item("V", parent=sub_handle, item_type=ITEM_PORT)
                            port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        
                            def delete_constant():
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                        
                            def delete_1():
                                mdl.delete_item(mdl.get_item("Constant_C1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_1c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_2():
                                mdl.delete_item(mdl.get_item("Constant_C2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_2c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def delete_3():
                                mdl.delete_item(mdl.get_item("Constant_C3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Constant_R3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3a", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3b", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Product_3c", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Sum_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.delete_item(mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT))
                                try:
                                    mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                except:
                                    pass
                        
                            def create_constant():
                                Constant_0 = mdl.create_component("core/Constant",
                                                            name="Constant_0",
                                                            parent=sub_handle,)
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V)
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                            def create_1():
                                Product_1a = mdl.create_component("core/Product",
                                                                name="Product_1a",
                                                                parent=sub_handle,
                                                                position=(7952, 8256),)
                                Product_1b = mdl.create_component("core/Product",
                                                                name="Product_1b",
                                                                parent=sub_handle,
                                                                position=(8064, 8112))
                                Product_1c = mdl.create_component("core/Product",
                                                                name="Product_1c",
                                                                parent=sub_handle,
                                                                position=(8176, 8216),
                                                                rotation="down")
                                Sum_1 = mdl.create_component("core/Sum",
                                                                name="Sum_1",
                                                                parent=sub_handle,
                                                                position=(8176, 8120),)
                                Integrator_1 = mdl.create_component("core/Integrator",
                                                                name="Integrator_1",
                                                                parent=sub_handle,
                                                                position=(8304, 8120),)
                                Constant_C1 = mdl.create_component("core/Constant",
                                                                name="Constant_C1",
                                                                parent=sub_handle,
                                                                position=(7832, 8208))
                                Constant_R1 = mdl.create_component("core/Constant",
                                                                name="Constant_R1",
                                                                parent=sub_handle,
                                                                position=(7832, 8264))
                        
                                mdl.set_property_value(mdl.prop(Sum_1, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_1b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_1c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C1, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R1, "value"), "R1")
                                mdl.set_property_value(mdl.prop(Constant_C1, "value"), "C1")
                        
                                mdl.create_connection(start=mdl.term(Product_1a, "in"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "in1"), end=mdl.term(Constant_R1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_1b, "in1"), end=mdl.term(Constant_C1, "out"))
                                mdl.create_connection(start=mdl.term(Product_1a, "out"), end=mdl.term(Product_1c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_1, "in1"), end=mdl.term(Product_1c, "out"))
                                mdl.create_connection(start=mdl.term(Product_1b, "out"), end=mdl.term(Sum_1, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "in"), end=mdl.term(Sum_1, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Product_1c, "in1"))
                        
                            def create_2():
                                Product_2a = mdl.create_component("core/Product",
                                                            name="Product_2a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+400),)
                                Product_2b = mdl.create_component("core/Product",
                                                            name="Product_2b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+400))
                                Product_2c = mdl.create_component("core/Product",
                                                            name="Product_2c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+400),
                                                            rotation="down")
                                Sum_2 = mdl.create_component("core/Sum",
                                                            name="Sum_2",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+400),)
                                Integrator_2 = mdl.create_component("core/Integrator",
                                                            name="Integrator_2",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+400),)
                                Constant_C2 = mdl.create_component("core/Constant",
                                                            name="Constant_C2",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+400))
                                Constant_R2 = mdl.create_component("core/Constant",
                                                            name="Constant_R2",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+400))
                        
                                mdl.set_property_value(mdl.prop(Sum_2, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_2b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_2c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C2, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R2, "value"), "R2")
                                mdl.set_property_value(mdl.prop(Constant_C2, "value"), "C2")
                        
                                mdl.create_connection(start=mdl.term(Product_2a, "in"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "in1"), end=mdl.term(Constant_R2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_2b, "in1"), end=mdl.term(Constant_C2, "out"))
                                mdl.create_connection(start=mdl.term(Product_2a, "out"), end=mdl.term(Product_2c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_2, "in1"), end=mdl.term(Product_2c, "out"))
                                mdl.create_connection(start=mdl.term(Product_2b, "out"), end=mdl.term(Sum_2, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "in"), end=mdl.term(Sum_2, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Product_2c, "in1"))
                        
                            def create_3():
                                Product_3a = mdl.create_component("core/Product",
                                                            name="Product_3a",
                                                            parent=sub_handle,
                                                            position=(7952, 8256+200),)
                                Product_3b = mdl.create_component("core/Product",
                                                            name="Product_3b",
                                                            parent=sub_handle,
                                                            position=(8064, 8112+200))
                                Product_3c = mdl.create_component("core/Product",
                                                            name="Product_3c",
                                                            parent=sub_handle,
                                                            position=(8176, 8216+200),
                                                            rotation="down")
                                Sum_3 = mdl.create_component("core/Sum",
                                                            name="Sum_3",
                                                            parent=sub_handle,
                                                            position=(8176, 8120+200),)
                                Integrator_3 = mdl.create_component("core/Integrator",
                                                            name="Integrator_3",
                                                            parent=sub_handle,
                                                            position=(8304, 8120+200),)
                                Constant_C3 = mdl.create_component("core/Constant",
                                                            name="Constant_C3",
                                                            parent=sub_handle,
                                                            position=(7832, 8208+200))
                                Constant_R3 = mdl.create_component("core/Constant",
                                                            name="Constant_R3",
                                                            parent=sub_handle,
                                                            position=(7832, 8264+200))
                        
                                mdl.set_property_value(mdl.prop(Sum_3, "signs"), "+-")
                                mdl.set_property_value(mdl.prop(Product_3b, "signs"), "*/")
                                mdl.set_property_value(mdl.prop(Product_3c, "signs"), "/*")
                                mdl.set_property_value(mdl.prop(Constant_R3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_C3, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_R3, "value"), "R3")
                                mdl.set_property_value(mdl.prop(Constant_C3, "value"), "C3")
                        
                                mdl.create_connection(start=mdl.term(Product_3a, "in"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "in1"), end=mdl.term(Constant_R3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "in"), end=port_I)
                                mdl.create_connection(start=mdl.term(Product_3b, "in1"), end=mdl.term(Constant_C3, "out"))
                                mdl.create_connection(start=mdl.term(Product_3a, "out"), end=mdl.term(Product_3c, "in"))
                                mdl.create_connection(start=mdl.term(Sum_3, "in1"), end=mdl.term(Product_3c, "out"))
                                mdl.create_connection(start=mdl.term(Product_3b, "out"), end=mdl.term(Sum_3, "in"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "in"), end=mdl.term(Sum_3, "out"))
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Product_3c, "in1"))
                        
                            #####################################################
                        
                            if new_value == "None":
                                delete_1()
                        
                                if old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                        
                                create_constant()
                        
                            elif new_value == "1":
                                if old_value == "None":
                                    delete_constant()
                                    create_1()
                                elif old_value == "2" or old_value == "3":
                                    delete_2()
                                    if old_value == "3":
                                        delete_3()
                                if old_value == "1":
                                    pass
                                else:
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Sum = mdl.create_component("core/Sum",
                                                                name="Sum",
                                                                parent=sub_handle,
                                                                position=(8450, 8130))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "+")
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                        
                            elif new_value == "2":
                                if old_value == "None" or old_value == "1":
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                    create_2()
                                elif old_value == "3":
                                    delete_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                        
                            elif new_value == "3":
                                if old_value == "None" or old_value == "1":
                                    create_2()
                                    if old_value == "None":
                                        delete_constant()
                                        create_1()
                                create_3()
                        
                                try:
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8450, 8130))
                                    Integrator_1 = mdl.get_item("Integrator_1", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_1, "out"), end=mdl.term(Sum, "in"))
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=port_V)
                                except:
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "+++")
                        
                                try:
                                    Integrator_2 = mdl.get_item("Integrator_2", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    mdl.create_connection(start=mdl.term(Integrator_2, "out"), end=mdl.term(Sum, "in1"))
                                except:
                                    pass
                                Integrator_3 = mdl.get_item("Integrator_3", parent=sub_handle, item_type=ITEM_COMPONENT)
                                mdl.create_connection(start=mdl.term(Integrator_3, "out"), end=mdl.term(Sum, "in2"))
                        ENDCODE
                    }

                    R1 {
                        label = "Resistance 1"
                        widget = edit
                        type = generic
                        default_value = "R1"
                        unit = "Ω"
                    }

                    C1 {
                        label = "Capacitance 1"
                        widget = edit
                        type = generic
                        default_value = "C1"
                        unit = "F"
                    }

                    R2 {
                        label = "Resistance 2"
                        widget = edit
                        type = generic
                        default_value = "R2"
                        unit = "Ω"
                    }

                    C2 {
                        label = "Capacitance 2"
                        widget = edit
                        type = generic
                        default_value = "C2"
                        unit = "F"
                    }

                    R3 {
                        label = "Resistance 3"
                        widget = edit
                        type = generic
                        default_value = "R3"
                        unit = "Ω"
                    }

                    C3 {
                        label = "Capacitance 3"
                        widget = edit
                        type = generic
                        default_value = "C3"
                        unit = "F"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        RC_number = mdl.get_property_value(mdl.prop(item_handle, "RC_number"))
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.exception import SchApiException
                        R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                        C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                        R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                        C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                        R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                        C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    
                        if R1 < 0:
                            raise SchApiException("R1 cannot be negative.")
                        if R2 < 0:
                            raise SchApiException("R2 cannot be negative.")
                        if R3 < 0:
                            raise SchApiException("R3 cannot be negative.")
                        if C1 < 0:
                            raise SchApiException("C1 cannot be negative.")
                        if C2 < 0:
                            raise SchApiException("C2 cannot be negative.")
                        if C3 < 0:
                            raise SchApiException("C3 cannot be negative.")
                    ENDCODE
                }
            }
            [
                position = 7672, 8096
                size = 128, 80
            ]

            component Subsystem "Series voltage drop" {
                layout = dynamic
                component gen_product Product {
                }
                [
                    position = 8224, 8176
                    hide_name = True
                ]

                port I {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8168
                ]

                port R0 {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8096, 8208
                ]

                port V_R0 {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8296, 8176
                ]

                connect Product.out V_R0 as Connection1170
                connect Product.in I as Connection1168
                connect Product.in1 R0 as Connection1169
            }
            [
                position = 7672, 8200
                size = 128, 64
            ]

            component Subsystem "Passive Balancing" {
                layout = dynamic
                component src_constant Constant_0 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8136, 8280
                ]

                port I_bal {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8208
                ]

                port I_t {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7992, 7936
                ]

                port I_cell {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8488, 8072
                ]

                connect I_t I_cell as direct_connection
                connect Constant_0.out I_bal as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Passive balancing subsystem is dynamically changed by changing the type of balancing:<br></br>1. \"None\" mode simply propagates the total input current as the cell current and 0 value for balance current.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. \"Passive balancing\" introduces a current flowing through the resistor parallel to the cell. Value of resistance is specified as a parameter and an input for terminal voltage and balancing switch is created. Balancing switch opens and closes the ideal switch connecting cell terminals to the resistor.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. \"Direct current input\" option simply subtracts the signal out of the I_in terminal from the I_t and outputs in the I_cell signal output. I_bal is therefore the signal that enters I_in terminal.</p></body></html>"

                    balancing_combo {
                        label = "Balancing mode"
                        widget = combo
                        combo_values = "None", "Passive balancing", "Direct current input"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                            sub_handle = mdl.get_sub_level_handle(container_handle)
                            I_t = mdl.get_item("I_t", parent=sub_handle, item_type=ITEM_PORT)
                            I_cell = mdl.get_item("I_cell", parent=sub_handle, item_type=ITEM_PORT)
                            I_bal = mdl.get_item("I_bal", parent=sub_handle, item_type=ITEM_PORT)
                        
                            if new_value==old_value:
                                pass
                            elif new_value=="None":
                                if old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                mdl.delete_item(mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT))
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                                mdl.create_connection(start=I_t, end=I_cell, name="direct_connection")
                                mdl.create_connection(start=mdl.term(Constant_0, "out"), end=I_bal, name="Connection1")
                        
                            elif new_value=="Passive balancing":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    try:
                                        mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                        mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    except:
                                        pass
                                    Constant_0 = mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT)
                                elif old_value=="Direct current input":
                                    mdl.delete_item(mdl.get_item("I_in", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                                    Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8135, 8280))
                        
                                BL_SW = mdl.create_port(name="BL_SW",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                V_term = mdl.create_port(name="V_term",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8220),)
                                R_balance_gain = mdl.create_component("core/Gain",
                                                        name="R_balance_gain",
                                                        parent=sub_handle,
                                                        position=(8135, 8200))
                                signal_switch = mdl.create_component("core/Signal switch",
                                                        name="signal_switch",
                                                        parent=sub_handle,
                                                        position=(8262, 8240))
                                unit_delay = mdl.create_component("core/Unit Delay",
                                                        name="unit_delay",
                                                        parent=sub_handle,
                                                        position=(8325, 8216))
                        
                                mdl.set_property_value(mdl.prop(signal_switch, "threshold"), 0.5)
                                mdl.set_property_value(mdl.prop(R_balance_gain, "gain"), "1/R_balance")
                                mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), "Ts")
                                mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        
                                mdl.create_connection(start=BL_SW, end=mdl.term(signal_switch, "in2"))
                                mdl.create_connection(start=V_term, end=mdl.term(R_balance_gain, "in"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in"), end=mdl.term(R_balance_gain, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "in1"), end=mdl.term(Constant_0, "out"))
                                mdl.create_connection(start=mdl.term(signal_switch, "out"), end=mdl.term(unit_delay, "in"))
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=mdl.term(unit_delay, "out"))
                                mdl.create_connection(start=I_bal, end=mdl.term(unit_delay, "out"))
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        
                            elif new_value=="Direct current input":
                                if old_value=="None":
                                    Sum = mdl.create_component("core/Sum",
                                                            name="Sum",
                                                            parent=sub_handle,
                                                            position=(8400, 8100))
                                    mdl.set_property_value(mdl.prop(Sum, "signs"), "++")
                                    mdl.delete_item(mdl.get_item("direct_connection", parent=sub_handle, item_type=ITEM_CONNECTION))
                                    mdl.delete_item(mdl.get_item("Connection1", parent=sub_handle, item_type=ITEM_CONNECTION))
                                elif old_value=="Passive balancing":
                                    mdl.delete_item(mdl.get_item("R_balance_gain", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("signal_switch", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("unit_delay", parent=sub_handle, item_type=ITEM_COMPONENT))
                                    mdl.delete_item(mdl.get_item("BL_SW", parent=sub_handle, item_type=ITEM_PORT))
                                    mdl.delete_item(mdl.get_item("V_term", parent=sub_handle, item_type=ITEM_PORT))
                                    Sum = mdl.get_item("Sum", parent=sub_handle, item_type=ITEM_COMPONENT)
                        
                                mdl.delete_item(mdl.get_item("Constant_0", parent=sub_handle, item_type=ITEM_COMPONENT))
                                I_in = mdl.create_port(name="I_in",
                                                    kind="sp",
                                                    terminal_position=("left", 2),
                                                    parent=sub_handle,
                                                    direction="in",
                                                    position=(7991, 8134),)
                                mdl.create_connection(start=mdl.term(Sum, "in1"), end=I_in)
                                mdl.create_connection(start=I_bal, end=I_in)
                                try:
                                    mdl.create_connection(start=mdl.term(Sum, "in"), end=I_t)
                                    mdl.create_connection(start=mdl.term(Sum, "out"), end=I_cell)
                                except:
                                    pass
                        ENDCODE
                    }

                    R_balance {
                        label = "Balancing Resistance"
                        widget = edit
                        type = generic
                        default_value = "R_balance"
                        unit = "Ω"
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE
                }
            }
            [
                position = 7520, 8344
                size = 128, 112
            ]

            component gen_gain Cell_NO {
                gain = "1/cell_NO"
            }
            [
                position = 7408, 8312
                hide_name = True
            ]

            component gen_probe "Cell voltage" {
            }
            [
                position = 8688, 8064
            ]

            component gen_terminator Termination1 {
            }
            [
                position = 8400, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination2 {
            }
            [
                position = 8576, 7808
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination3 {
            }
            [
                position = 8400, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination4 {
            }
            [
                position = 8400, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination5 {
            }
            [
                position = 8400, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination6 {
            }
            [
                position = 8400, 8064
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination7 {
            }
            [
                position = 8576, 7872
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination8 {
            }
            [
                position = 8576, 7936
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination9 {
            }
            [
                position = 8576, 8000
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination10 {
            }
            [
                position = 8576, 8064
                rotation = down
                hide_name = True
            ]

            component Subsystem Hysteresis {
                layout = dynamic
                component gen_terminator termination_T {
                }
                [
                    position = 7968, 8280
                ]

                component gen_terminator termination_I {
                }
                [
                    position = 8080, 8440
                ]

                component gen_terminator termination_eta {
                }
                [
                    position = 7976, 8056
                ]

                component gen_c_function C_function {
                    global_variables = "real h;real h_mem;real h1;real h2;real current_sign;real efficiency;"
                    init_fnc = "/*Begin code section*/
current_sign = 1;
h_mem = 0;
efficiency = 1;
/*End code section*/"
                    input_terminals = "real current;inherit M0;inherit M;inherit gamma_param;inherit eta;inherit Q;inherit Ts;"
                    input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
if (current<0){
    current_sign = -1;
    efficiency = eta;
}
else if (current>0){
    current_sign = 1;
    efficiency = 1;
}

h = exp(-fabs(current*efficiency*gamma_param/Q*Ts))*h_mem - (1-exp(-fabs(current*efficiency*gamma_param/Q*Ts)))*current_sign;
h_mem = h;
V_h = M0*current_sign + M*h;
/*End code section*/"
                    output_terminals = "inherit V_h;"
                    output_terminals_dimensions = "inherit"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "True"
                }
                [
                    position = 8320, 8160
                    scale = 1, -1
                    size = 144, 320
                ]

                component lut_1d M0_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8072, 8240
                ]

                component lut_1d M_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 7992, 8200
                ]

                component lut_1d gamma_LUT_1D {
                    ext_mode = "Linear"
                    in_vec_x = "[0, 1]"
                    out_vec_f_x = "[0, 1]"
                }
                [
                    position = 8080, 8160
                ]

                component gen_terminator termination_Q {
                }
                [
                    position = 8016, 7952
                ]

                component gen_terminator termination_Ts {
                }
                [
                    position = 8248, 7952
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                    value = "Ts"
                }
                [
                    position = 8160, 8040
                ]

                component gen_terminator termination_SOC {
                }
                [
                    position = 7976, 8336
                ]

                port I {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7984, 8392
                ]

                port eta {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8104
                ]

                port T {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7864, 8216
                ]

                port V_hyst {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8504, 8160
                ]

                port Q {
                    position = left:4
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7896, 8008
                ]

                port SOC {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7856, 8336
                ]

                junction Junction1 sp
                [
                    position = 7936, 8216
                ]

                junction Junction2 sp
                [
                    position = 7936, 8216
                ]

                junction Junction3 sp
                [
                    position = 7904, 8216
                ]

                junction Junction4 sp
                [
                    position = 8040, 8392
                ]

                junction Junction7 sp
                [
                    position = 8208, 8240
                ]

                junction Junction12 sp
                [
                    position = 8192, 8040
                ]

                junction Junction8 sp
                [
                    position = 8032, 8200
                ]

                junction Junction10 sp
                [
                    position = 7904, 8104
                ]

                junction Junction11 sp
                [
                    position = 7936, 8008
                ]

                connect C_function.V_h V_hyst as Connection1164
                connect M_LUT_1D.addr Junction1 as Connection1165
                connect M0_LUT_1D.addr Junction2 as Connection1168
                connect Junction2 Junction1 as Connection1169
                connect gamma_LUT_1D.addr Junction2 as Connection1170
                connect Junction1 Junction3 as Connection1171
                connect Junction3 T as Connection1172
                connect termination_T.in Junction3 as Connection1173
                connect C_function.current Junction4 as Connection1174
                [
                    position = 0, 0
                    breakpoints = 8184, 8280; 8184, 8392
                ]
                connect Junction4 I as Connection1175
                connect termination_I.in Junction4 as Connection1176
                connect gamma_LUT_1D.value C_function.gamma_param as Connection1211
                connect C_function.M0 Junction7 as Connection1192
                connect Constant1.out Junction12 as Connection1212
                connect Junction7 M0_LUT_1D.value as Connection1193
                [
                    position = 0, 0
                ]
                connect Junction12 C_function.Ts as Connection1213
                connect termination_Ts.in Junction12 as Connection1214
                connect M_LUT_1D.value Junction8 as Connection1196
                connect Junction8 C_function.M as Connection1197
                connect termination_eta.in Junction10 as Connection1203
                connect Junction10 eta as Connection1204
                [
                    position = 0, 0
                ]
                connect C_function.eta Junction10 as Connection1205
                connect Q Junction11 as Connection1207
                connect Junction11 termination_Q.in as Connection1208
                [
                    position = 0, 0
                ]
                connect C_function.Q Junction11 as Connection1209
                [
                    position = 0, 0
                    breakpoints = 8024, 8080; 8024, 8008
                ]
                connect SOC termination_SOC.in as Connection1215

                hysteresis_model = "One state"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If hysteresis implementation is \"None\", then the output is a constant 0.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For the \"One state\" implementation, output is a multivariable function referenced from: https://ieeexplore.ieee.org/document/7049363<br></br>This C-function is a function of multiple parameters, including the temperature and SOC dependant M, M0 and gamma.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For each of these parameters, if their value is entered as a constant, they are not functions of temperature and SOC.<br></br>If their value is a list, they are a function of temperature and if it is a nested list, they are a function first of temperature and then of SOC.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"Preisach model\" implementation is also a popular method of representing hysteresis, but is not currently available.<br></br></p></body></html>"

                    hysteresis_model {
                        label = "Hysteresis model"
                        widget = combo
                        combo_values = "None", "One state"
                        type = string
                        default_value = "None"
                        no_evaluate
                    }

                    T_vector {
                        label = "Temperature vector"
                        widget = edit
                        type = generic
                        default_value = "T_vector_h"
                    }

                    SOC_vector {
                        label = "State of charge vector"
                        widget = edit
                        type = generic
                        default_value = "SOC_vector_h"
                    }

                    M0 {
                        label = "M0 parameter"
                        widget = edit
                        type = generic
                        default_value = "M0"
                    }

                    M {
                        label = "M parameter"
                        widget = edit
                        type = generic
                        default_value = "M"
                    }

                    gamma {
                        label = "Gamma parameter"
                        widget = edit
                        type = generic
                        default_value = "gamma"
                    }

                    execution_rate {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                        from typhoon.api.schematic_editor.exception import SchApiException
                    
                        SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                        T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                        M0_value = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                        M_value = mdl.get_property_value(mdl.prop(item_handle, "M"))
                        gamma_value = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        hysteresis_model = mdl.get_property_value(mdl.prop(item_handle, "hysteresis_model"))
                    
                        sub_handle = mdl.get_sub_level_handle(item_handle)
                    
                        if np.min(np.min(M0_value)) < 0:
                            raise SchApiException("M0 parameter cannot be negative for any point.")
                        if np.min(np.min(M_value)) < 0:
                            raise SchApiException("M parameter cannot be negative for any point.")
                        if np.min(np.min(gamma_value)) < 0:
                            raise SchApiException("Gamma parameter cannot be negative for any point.")
                    
                        port_I = mdl.get_item("I", parent=sub_handle, item_type=ITEM_PORT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        port_eta = mdl.get_item("eta", parent=sub_handle, item_type=ITEM_PORT)
                        port_Q = mdl.get_item("Q", parent=sub_handle, item_type=ITEM_PORT)
                        port_V_hyst = mdl.get_item("V_hyst", parent=sub_handle, item_type=ITEM_PORT)
                        port_SOC = mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_PORT)
                    
                        C_function = mdl.get_item("C_function", parent=sub_handle, item_type=ITEM_COMPONENT)
                        gamma_LUT_1D = mdl.get_item("gamma_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M_LUT_1D = mdl.get_item("M_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                        M0_LUT_1D = mdl.get_item("M0_LUT_1D", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if hysteresis_model == "None":
                            mdl.delete_item(mdl.get_item("Connection1164", parent=sub_handle, item_type=ITEM_CONNECTION))
                            Constant_0 = mdl.create_component("core/Constant",
                                                        name="Constant_0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                            # replace output voltage with 0
                            mdl.create_connection(start=mdl.term(Constant_0, "out"), end=port_V_hyst)
                            mdl.set_property_value(mdl.prop(Constant_0, "execution_rate"), execution_rate)
                            mdl.set_property_value(mdl.prop(Constant_0, "value"), 0)
                        else:
                            # M_value
                            if np.ndim(M_value) == 0:
                                mdl.delete_item(M_LUT_1D)
                                Constant_M = mdl.create_component("core/Constant",
                                                        name="Constant_M",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M, "value"), M_value)
                                mdl.set_property_value(mdl.prop(Constant_M, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M, "out"), end=mdl.term(C_function, "M"))
                    
                            elif np.ndim(M_value) == 1:
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "out_vec_f_x"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M_value) == 2:
                                M_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M_LUT_2D, "value"), end=mdl.term(C_function, "M"))
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "out_vec_f_xy"), M_value)
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M_value.")
                    
                            # M0_value
                            if np.ndim(M0_value) == 0:
                                mdl.delete_item(M0_LUT_1D)
                                Constant_M0 = mdl.create_component("core/Constant",
                                                        name="Constant_M0",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_M0, "value"), M0_value)
                                mdl.set_property_value(mdl.prop(Constant_M0, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_M0, "out"), end=mdl.term(C_function, "M0"))
                    
                            elif np.ndim(M0_value) == 1:
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "out_vec_f_x"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(M0_value) == 2:
                                M0_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="M0_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(M0_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(M0_LUT_2D, "value"), end=mdl.term(C_function, "M0"))
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "out_vec_f_xy"), M0_value)
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(M0_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for M0_value.")
                    
                            # gamma_value
                            if np.ndim(gamma_value) == 0:
                                mdl.delete_item(gamma_LUT_1D)
                                Constant_gamma = mdl.create_component("core/Constant",
                                                        name="Constant_gamma",
                                                        parent=sub_handle,
                                                        position=(8272, 8116),
                                                        rotation="left")
                                mdl.set_property_value(mdl.prop(Constant_gamma, "value"), gamma_value)
                                mdl.set_property_value(mdl.prop(Constant_gamma, "execution_rate"), execution_rate)
                                mdl.create_connection(start=mdl.term(Constant_gamma, "out"), end=mdl.term(C_function, "gamma_param"))
                    
                            elif np.ndim(gamma_value) == 1:
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "in_vec_x"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "out_vec_f_x"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_1D, "execution_rate"), execution_rate)
                    
                            elif np.ndim(gamma_value) == 2:
                                gamma_LUT_2D = mdl.create_component("core/2D look-up table",
                                                            name="gamma_LUT_2D",
                                                            parent=sub_handle,
                                                            position=(8272, 8116),
                                                            rotation="left")
                                mdl.delete_item(gamma_LUT_1D)
                    
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_x"), end=port_SOC)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "addr_y"), end=port_T)
                                mdl.create_connection(start=mdl.term(gamma_LUT_2D, "value"), end=mdl.term(C_function, "gamma_param"))
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_x"), SOC_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "in_vec_y"), T_vector)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "out_vec_f_xy"), gamma_value)
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "ext_mode"), "linear")
                                mdl.set_property_value(mdl.prop(gamma_LUT_2D, "execution_rate"), execution_rate)
                            else:
                                info("Invalid input value for gamma value.")
                    ENDCODE
                }
            }
            [
                position = 7672, 7944
                size = 128, 160
            ]

            component sys_signal_switch "Signal switch1" {
            }
            [
                position = 8096, 8368
            ]

            component src_scada_input "Vcell Value Set" {
                execution_rate = "Ts"
                min = "0"
                unit = ""
            }
            [
                position = 8016, 8304
            ]

            component src_scada_input "Vcell Override" {
                execution_rate = "Ts"
                format = "int"
                max = "1"
                min = "0"
                signal_type = "int"
                unit = ""
            }
            [
                position = 8016, 8248
            ]

            component gen_probe SOC {
            }
            [
                position = 8488, 7824
            ]

            port P {
                position = top center
                kind = pe
            }
            [
                position = 8528, 8336
                rotation = down
                hide_name = True
            ]

            port N {
                position = bottom center
                kind = pe
            }
            [
                position = 8528, 8424
                rotation = down
                hide_name = True
            ]

            port T {
                position = -16.0, -8.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7128, 7904
                hide_name = True
            ]

            tag From1 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8056
                hide_name = True
                size = 60, 20
            ]

            tag Goto3 {
                value = "T"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7368, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From6 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From7 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From10 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8216
                hide_name = True
                size = 60, 20
            ]

            tag From11 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7856, 8360
                hide_name = True
                size = 60, 20
            ]

            tag Goto6 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8200
                hide_name = True
                size = 60, 20
            ]

            tag From12 {
                value = "V_R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7840, 8392
                hide_name = True
                size = 60, 20
            ]

            tag From13 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8408
                hide_name = True
                size = 60, 20
            ]

            tag Goto19 {
                value = "Q"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7816
                hide_name = True
                size = 60, 20
            ]

            tag From32 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From16 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8184
                hide_name = True
                size = 60, 20
            ]

            tag Goto10 {
                value = "R0"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7896
                hide_name = True
                size = 60, 20
            ]

            tag Goto11 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 8072
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7920, 8376
                hide_name = True
                size = 60, 20
            ]

            tag Goto12 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7944
                hide_name = True
                size = 60, 20
            ]

            tag Goto13 {
                value = "OCV"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 7816
                hide_name = True
                size = 60, 20
            ]

            tag Goto14 {
                value = "I_t"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8496, 8288
                hide_name = True
                size = 60, 20
            ]

            tag Goto16 {
                value = "V_term"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8176, 8368
                hide_name = True
                size = 60, 20
            ]

            tag From20 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8256, 8384
                hide_name = True
                size = 60, 20
            ]

            tag From22 {
                value = "I_t"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7344, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto2 {
                value = "SOH"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7344, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From34 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From35 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7888
                hide_name = True
                size = 60, 20
            ]

            tag Goto20 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8200, 7984
                hide_name = True
                size = 60, 20
            ]

            tag From36 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7888, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From37 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 7976
                hide_name = True
                size = 60, 20
            ]

            tag From38 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7952, 8088
                hide_name = True
                size = 60, 20
            ]

            tag From39 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7488, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From40 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From15 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto9 {
                value = "V_RC"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7800, 8096
                hide_name = True
                size = 60, 20
            ]

            tag Goto21 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8312
                hide_name = True
                size = 60, 20
            ]

            tag Goto22 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8376
                hide_name = True
                size = 60, 20
            ]

            tag From33 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From23 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From24 {
                value = "OCV"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From25 {
                value = "V_term"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From26 {
                value = "R0"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From27 {
                value = "I_balance"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From28 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 8032
                hide_name = True
                size = 60, 20
            ]

            tag From29 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From30 {
                value = "SOH"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8400, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From43 {
                value = "V_hyst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7968
                hide_name = True
                size = 60, 20
            ]

            tag From5 {
                value = "T"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7944
                hide_name = True
                size = 60, 20
            ]

            tag From42 {
                value = "I_cell"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7920
                hide_name = True
                size = 60, 20
            ]

            tag From44 {
                value = "Q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From45 {
                value = "Efficiency"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7896
                hide_name = True
                size = 60, 20
            ]

            tag From46 {
                value = "SOC_pu"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7968
                hide_name = True
                size = 60, 20
            ]

            junction Junction12 sp
            [
                position = 8632, 8032
            ]

            comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Measurements *****</p></body></html> ENDCOMMENT 
            [
                position = 8440, 7704
            ]

            comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** Battery Effects *****  </p></body></html> ENDCOMMENT 
            [
                position = 7752, 7720
            ]

            comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">***** ECM and Passive Balancing *****  </p></body></html> ENDCOMMENT 
            [
                position = 7848, 8192
            ]

            connect From1 "SOC Model.I" as Connection1062
            connect Vt.p_node It.p_node as Connection42
            connect It.n_node P as Connection1129
            connect Vt.n_node N as Connection1130
            connect From32 "SOC Model.Q" as Connection1135
            connect From11 Sum3.in as Connection1091
            connect From18 Sum3.in1 as Connection1095
            connect Goto14 It.out as Connection1102
            connect From20 Vt.in as Connection1109
            connect Goto11 "SOC Model.SOC_pu" as Connection1119
            connect Goto2 SOH_set.out as Connection1063
            connect Capacity.SOH From6 as Connection1144
            connect Capacity.T From7 as Connection1145
            connect From35 "Internal Resistance.T" as Connection1147
            connect From34 "Internal Resistance.SOH" as Connection1148
            connect Goto10 "Internal Resistance.R" as Connection1149
            connect From37 "Coulombic efficiency.T" as Connection1150
            connect From36 "Coulombic efficiency.SOH" as Connection1151
            connect Goto20 "Coulombic efficiency.eta" as Connection1152
            connect From38 "SOC Model.eta" as Connection1153
            connect "Open Circuit Voltage.SOC" From39 as Connection1154
            connect "Open Circuit Voltage.T" From40 as Connection1155
            connect Goto13 "Open Circuit Voltage.OCV" as Connection1162
            connect Goto9 "Parallel RC.V" as Connection1141
            connect From15 "Parallel RC.I" as Connection1077
            connect Goto6 "Series voltage drop.V_R0" as Connection1169
            connect From10 "Series voltage drop.R0" as Connection1168
            connect From16 "Series voltage drop.I" as Connection1167
            connect Sum3.in3 From13 as Connection1175
            connect From12 Sum3.in2 as Connection1179
            connect Goto21 "Passive Balancing.I_bal" as Connection1173
            connect Capacity.Q Goto19 as Connection1181
            connect From22 Cell_NO.in as Connection1182
            connect Cell_NO.out "Passive Balancing.I_t" as Connection1183
            connect Goto22 "Passive Balancing.I_cell" as Connection1184
            connect From25 Junction12 as Connection1212
            connect Junction12 "Cell voltage.in" as Connection1213
            connect Termination10.in Junction12 as Connection1214
            connect From26 Termination5.in as Connection1222
            connect From28 Termination6.in as Connection1220
            connect Termination4.in From24 as Connection1221
            connect Termination8.in From29 as Connection1218
            connect Termination2.in From27 as Connection1223
            connect From23 Termination3.in as Connection1215
            connect Termination7.in From33 as Connection1219
            connect Termination9.in From43 as Connection1216
            connect Termination1.in From30 as Connection1217
            connect Hysteresis.T From5 as Connection1158
            connect Hysteresis.I From42 as Connection1159
            connect From44 Hysteresis.Q as Connection1233
            connect From45 Hysteresis.eta as Connection1234
            connect Goto12 Hysteresis.V_hyst as Connection1235
            connect From46 Hysteresis.SOC as Connection1245
            connect T Goto3 as Connection1131
            connect "Signal switch1.in1" Sum3.out as Connection1246
            connect Goto16 "Signal switch1.out" as Connection1247
            connect "Vcell Value Set.out" "Signal switch1.in" as Connection1248
            connect "Vcell Override.out" "Signal switch1.in2" as Connection1249
            connect SOC.in Termination3.in as Connection1251

            Init_SOC = "init_dynamic"
            Q_total = "total_Q"
            Ts = "Ts"
            meas_Ibal = "False"
            meas_Icell = "False"
            meas_OCV = "False"
            meas_Q = "False"
            meas_Rint = "False"
            meas_SOH = "False"
            meas_T = "False"
            meas_hyst = "False"

            mask {
                description = "This component represents the \"Enhanced self correcting\" battery cell model. It is a state-of-the-art electrical representation of the physical processes naturally ocurring inside the battery cell. Many parameters can be set as either constants or functions of temperature, state of charge, or state of health. Parallel cells are modelled simply by distributing the input current across the number of cells entered in the parameter input. <br></br>This component is simulated at the signal processing time step, entered in this component as the Execution rate parameter.<br></br><br></br>For more information regarding implementation and parametrization, please refer to the documentation."
                help_file = "battery_cell.html"

                SOC_vector {
                    label = "State of charge vector"
                    widget = edit
                    type = generic
                    default_value = "[0.00000, 0.00500, 0.01000, 0.01500, 0.02000, 0.02500, 0.03000, 0.03500, 0.04000, 0.04500, 0.05000, 0.05500, 0.06000, 0.06500, 0.07000, 0.07500, 0.08000, 0.08500, 0.09000, 0.09500, 0.10000, 0.10500, 0.11000, 0.11500, 0.12000, 0.12500, 0.13000, 0.13500, 0.14000, 0.14500, 0.15000, 0.15500, 0.16000, 0.16500, 0.17000, 0.17500, 0.18000, 0.18500, 0.19000, 0.19500, 0.20000, 0.20500, 0.21000, 0.21500, 0.22000, 0.22500, 0.23000, 0.23500, 0.24000, 0.24500, 0.25000, 0.25500, 0.26000, 0.26500, 0.27000, 0.27500, 0.28000, 0.28500, 0.29000, 0.29500, 0.30000, 0.30500, 0.31000, 0.31500, 0.32000, 0.32500, 0.33000, 0.33500, 0.34000, 0.34500, 0.35000, 0.35500, 0.36000, 0.36500, 0.37000, 0.37500, 0.38000, 0.38500, 0.39000, 0.39500, 0.40000, 0.40500, 0.41000, 0.41500, 0.42000, 0.42500, 0.43000, 0.43500, 0.44000, 0.44500, 0.45000, 0.45500, 0.46000, 0.46500, 0.47000, 0.47500, 0.48000, 0.48500, 0.49000, 0.49500, 0.50000, 0.50500, 0.51000, 0.51500, 0.52000, 0.52500, 0.53000, 0.53500, 0.54000, 0.54500, 0.55000, 0.55500, 0.56000, 0.56500, 0.57000, 0.57500, 0.58000, 0.58500, 0.59000, 0.59500, 0.60000, 0.60500, 0.61000, 0.61500, 0.62000, 0.62500, 0.63000, 0.63500, 0.64000, 0.64500, 0.65000, 0.65500, 0.66000, 0.66500, 0.67000, 0.67500, 0.68000, 0.68500, 0.69000, 0.69500, 0.70000, 0.70500, 0.71000, 0.71500, 0.72000, 0.72500, 0.73000, 0.73500, 0.74000, 0.74500, 0.75000, 0.75500, 0.76000, 0.76500, 0.77000, 0.77500, 0.78000, 0.78500, 0.79000, 0.79500, 0.80000, 0.80500, 0.81000, 0.81500, 0.82000, 0.82500, 0.83000, 0.83500, 0.84000, 0.84500, 0.85000, 0.85500, 0.86000, 0.86500, 0.87000, 0.87500, 0.88000, 0.88500, 0.89000, 0.89500, 0.90000, 0.90500, 0.91000, 0.91500, 0.92000, 0.92500, 0.93000, 0.93500, 0.94000, 0.94500, 0.95000, 0.95500, 0.96000, 0.96500, 0.97000, 0.97500, 0.98000, 0.98500, 0.99000, 0.99500, 1.00000]"
                    unit = "p.u."
                    group = "Basic parameters:1"
                }

                Init_SOC {
                    label = "Initial state of charge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                    group = "Basic parameters"
                }

                SOH_vector {
                    label = "State of health vector"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Basic parameters"
                }

                T_vector {
                    label = "Temperatures vector"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    group = "Basic parameters"
                }

                OCV {
                    label = "Open circuit voltage"
                    widget = edit
                    type = generic
                    default_value = "[[ 2.81376455, 2.934249, 3.01131295, 3.0707406, 3.12232055, 3.1679386999999997, 3.20864785, 3.2450991, 3.27819715, 3.30856405, 3.3362725999999996, 3.3618633499999997, 3.38570235, 3.40775795, 3.42830425, 3.4476403500000004, 3.4655972, 3.48235125, 3.4982734000000004, 3.5123286499999997, 3.52428065, 3.5322503000000003, 3.536190725, 3.538614355, 3.5410027349999997, 3.543410505, 3.54570155, 3.548176695, 3.55074616, 3.55332738, 3.5560948150000002, 3.5590690300000003, 3.5622155269999998, 3.5656399850000002, 3.569116135, 3.5732180099999997, 3.57727722, 3.5820934199999996, 3.58702369, 3.5923769, 3.5981162299999996, 3.60387865, 3.6098619999999997, 3.61578425, 3.6219618000000002, 3.6279250050000003, 3.633843695, 3.6400532699999997, 3.646100845, 3.6525218749999997, 3.659006475, 3.6658932699999998, 3.6723717, 3.67845187, 3.6843657899999998, 3.690319095, 3.696598375, 3.70317101, 3.7103087649999997, 3.71751191, 3.72478503, 3.7312556949999998, 3.737126875, 3.7421215, 3.746753425, 3.7512470799999997, 3.7557191, 3.759948005, 3.7641692570000003, 3.7683243400000004, 3.77226982, 3.776130865, 3.77996065, 3.7834905, 3.78724775, 3.79068595, 3.79405435, 3.79739885, 3.8008169, 3.8037784, 3.80672915, 3.80976375, 3.81294495, 3.8155956, 3.81841755, 3.8211345, 3.82375915, 3.826463, 3.8289732, 3.83148675, 3.8339139, 3.8364958500000004, 3.8389766, 3.84130125, 3.8436186, 3.84593155, 3.8484112, 3.8508698999999997, 3.853017, 3.8553768, 3.8575925, 3.8597776, 3.8618757, 3.8639596, 3.8662289, 3.8684966, 3.8704239, 3.8727584, 3.8746679, 3.8767636000000003, 3.8789283, 3.88108645, 3.88336145, 3.88554035, 3.8876272999999997, 3.88979185, 3.8919731499999997, 3.89423455, 3.89660415, 3.89878675, 3.9010609, 3.9034554999999997, 3.9058273, 3.9083077999999998, 3.9107870499999997, 3.9134431, 3.91605185, 3.9188395000000003, 3.92173155, 3.9245562, 3.9278719, 3.93123635, 3.93501795, 3.9392118, 3.9434215, 3.9476625, 3.9522793, 3.956863, 3.9614228, 3.9661213500000003, 3.97056845, 3.97496085, 3.97923145, 3.98304985, 3.9867527999999997, 3.990355, 3.9938599000000004, 3.997107, 4.0001812, 4.0032136000000005, 4.0059932, 4.0087594499999994, 4.011432500000001, 4.0139152, 4.0163138, 4.0185217, 4.02070895, 4.022900900000001, 4.0249913, 4.0268188, 4.02872455, 4.03070295, 4.0323274, 4.0341031, 4.03572435, 4.0374238, 4.03904715, 4.0406617, 4.0421721999999995, 4.04385255, 4.04555215, 4.0469809, 4.048781399999999, 4.05039585, 4.052104, 4.05390415, 4.0557043, 4.057513849999999, 4.0593374, 4.0614338, 4.0635322, 4.0657283, 4.0680112, 4.0704244, 4.07274935, 4.075507399999999, 4.0782211, 4.0812930000000005, 4.08431865, 4.08759685, 4.0910807, 4.0947777499999995, 4.0989474, 4.10329865, 4.10799, 4.1129271, 4.1185746, 4.1244995, 4.1311105999999995, 4.138731625, 4.14890576], [2.8100227500000003, 2.916445, 2.99576475, 3.057303, 3.11000275, 3.1564935, 3.19803925, 3.2350955, 3.26858575, 3.2992202500000003, 3.3273629999999996, 3.35331675, 3.37731175, 3.39958975, 3.4203212499999998, 3.4398017500000004, 3.457986, 3.47495625, 3.4909670000000004, 3.50564325, 3.51860325, 3.5288515, 3.535353625, 3.539071775, 3.5418136749999998, 3.544252525, 3.54650775, 3.5488834750000002, 3.5513308, 3.5538369, 3.556474075, 3.55934515, 3.5622776349999996, 3.565399925, 3.5687806749999997, 3.57249005, 3.5763861, 3.5808671, 3.5855184500000004, 3.5906845, 3.5961811499999996, 3.60179325, 3.60771, 3.6137212499999998, 3.619809, 3.626025025, 3.632018475, 3.63826635, 3.644504225, 3.6510093749999997, 3.657832375, 3.66466635, 3.6710585, 3.67705935, 3.6830289499999997, 3.689195475, 3.6957918750000003, 3.70265505, 3.709943825, 3.71715955, 3.72392515, 3.729878475, 3.735234375, 3.7402075, 3.744967125, 3.7498354, 3.7545954999999998, 3.759340025, 3.764046285, 3.7688217, 3.7733491, 3.777854325, 3.78220325, 3.7862525, 3.7902387500000003, 3.79382975, 3.79747175, 3.80099425, 3.8044845, 3.807692, 3.81084575, 3.81401875, 3.81712475, 3.819978, 3.82288775, 3.8256725, 3.82839575, 3.831115, 3.833666, 3.83623375, 3.8387695, 3.8412792500000004, 3.843683, 3.84610625, 3.848493, 3.85085775, 3.853256, 3.8555495, 3.857885, 3.860084, 3.8623624999999997, 3.864488, 3.8665785, 3.868598, 3.8707445, 3.872883, 3.8749195, 3.876992, 3.8789395, 3.881018, 3.8830415, 3.88503225, 3.88720725, 3.88930175, 3.8913365, 3.89335925, 3.8954657499999996, 3.89757275, 3.89982075, 3.90193375, 3.9041045000000003, 3.9064775, 3.9087365, 3.911139, 3.91353525, 3.9160155, 3.91865925, 3.9213975000000003, 3.92425775, 3.927181, 3.9305595, 3.93418175, 3.93828975, 3.942859, 3.9479075, 3.9531125, 3.9585965, 3.9639149999999996, 3.968714, 3.97340675, 3.9776422499999997, 3.98160425, 3.98535725, 3.98884925, 3.992164, 3.995375, 3.9984995000000003, 4.001535, 4.004506, 4.007268, 4.0099659999999995, 4.01259725, 4.015162500000001, 4.017576, 4.019969, 4.0222085, 4.02434475, 4.026504500000001, 4.0285565, 4.030494, 4.03242275, 4.03431475, 4.036036999999999, 4.0377155, 4.03942175, 4.041119, 4.04283575, 4.0445085, 4.046061, 4.047662750000001, 4.04936075, 4.050904500000001, 4.052707, 4.05437925, 4.05612, 4.05792075, 4.0597215, 4.06156925, 4.063487, 4.065569, 4.067661, 4.0698415, 4.072056, 4.074522, 4.07694675, 4.079536999999999, 4.0823055, 4.085265000000001, 4.08839325, 4.0915842499999995, 4.0950035, 4.09868875, 4.102737, 4.106893250000001, 4.11155, 4.1162355, 4.1216729999999995, 4.1272975, 4.133553, 4.140458125, 4.149328799999999], [2.80628095, 2.898641, 2.98021655, 3.0438654, 3.09768495, 3.1450483, 3.18743065, 3.2250919, 3.2589743500000004, 3.2898764500000004, 3.3184533999999997, 3.34477015, 3.36892115, 3.39142155, 3.41233825, 3.43196315, 3.4503747999999996, 3.46756125, 3.4836606000000003, 3.4989578499999996, 3.5129258500000002, 3.5254527, 3.534516525, 3.539529195, 3.542624615, 3.545094545, 3.54731395, 3.549590255, 3.55191544, 3.55434642, 3.556853335, 3.55962127, 3.562339743, 3.565159865, 3.568445215, 3.57176209, 3.57549498, 3.5796407799999996, 3.58401321, 3.5889921, 3.5942460699999996, 3.59970785, 3.605558, 3.6116582499999996, 3.6176562, 3.624125045, 3.630193255, 3.63647943, 3.642907605, 3.6494968749999996, 3.656658275, 3.66343943, 3.6697452999999998, 3.67566683, 3.6816921099999997, 3.688071855, 3.694985375, 3.70213909, 3.709578885, 3.71680719, 3.72306527, 3.728501255, 3.7333418750000003, 3.7382934999999997, 3.743180825, 3.74842372, 3.7534718999999996, 3.758732045, 3.7639233130000003, 3.7693190600000004, 3.77442838, 3.779577785, 3.78444585, 3.7890145, 3.79322975, 3.7969735499999997, 3.80088915, 3.80458965, 3.8081521, 3.8116056, 3.81496235, 3.81827375, 3.8213045500000002, 3.8243603999999998, 3.82735795, 3.8302104999999997, 3.83303235, 3.8357669999999997, 3.8383588, 3.84098075, 3.8436251, 3.8460626500000004, 3.8483894000000003, 3.8509112500000002, 3.8533674, 3.85578395, 3.8581008, 3.8602290999999997, 3.862753, 3.8647912, 3.8671325, 3.8691984, 3.8712813, 3.8732364, 3.8752600999999998, 3.8772694, 3.8794151, 3.8812256, 3.8832111, 3.8852724000000003, 3.8871547, 3.88897805, 3.89105305, 3.8930631499999997, 3.8950457, 3.89692665, 3.8989583499999996, 3.90091095, 3.90303735, 3.90508075, 3.9071481, 3.9094995, 3.9116457000000002, 3.9139702, 3.91628345, 3.9185879, 3.92126665, 3.9239555, 3.92678395, 3.9298058, 3.9332471, 3.93712715, 3.9415615500000003, 3.9465062, 3.9523935, 3.9585624999999998, 3.9649137, 3.970967, 3.9760052, 3.9806921500000003, 3.98471605, 3.98824765, 3.99148305, 3.99464865, 3.9975752, 4.000395, 4.0031391, 4.005963, 4.0088308, 4.0113224, 4.0139388, 4.016435049999999, 4.018892500000001, 4.0212368, 4.0236241999999995, 4.0258953, 4.02798055, 4.0301081000000005, 4.032121699999999, 4.0341692, 4.03612095, 4.03792655, 4.0397466, 4.0413279, 4.04311915, 4.0448142, 4.04662435, 4.0483553, 4.0499498, 4.05147295, 4.05316935, 4.0548281, 4.0566325999999995, 4.05836265, 4.060136, 4.06193735, 4.0637387, 4.06562465, 4.0676366, 4.069704199999999, 4.0717898, 4.0739547, 4.0761008, 4.0786196, 4.08114415, 4.083566599999999, 4.0863899, 4.089237000000001, 4.09246785, 4.09557165, 4.0989263, 4.1025997499999995, 4.1065266, 4.11048785, 4.11511, 4.1195439, 4.1247714, 4.1300955, 4.1359954, 4.1421846250000005, 4.1497518399999995]]"
                    unit = "V"
                    group = "Basic parameters"
                }

                R0 {
                    label = "Internal resistance"
                    widget = edit
                    type = generic
                    default_value = "[4.6198e-3, 1.7810e-3, 1.1351e-3]"
                    unit = "Ω"
                    group = "Basic parameters"
                }

                eta {
                    label = "Coulombic efficiency"
                    widget = edit
                    type = generic
                    default_value = "[0.98174, 0.99102, 0.98965]"
                    group = "Basic parameters"
                }

                cell_NO {
                    label = "Number of cells in parallel"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Basic parameters"
                }

                nom_Q_combo {
                    label = "Nominal capacity"
                    widget = combo
                    combo_values = "Total capacity", "Discharge capacity"
                    type = string
                    default_value = "Total capacity"
                    group = "Basic parameters"
                    no_evaluate

                    CODE property_value_edited
                        if new_value=="Total capacity":
                            mdl.enable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.disable_property(mdl.prop(container_handle, "V_min"))
                            mdl.disable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_discharge"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "Q_total"))
                    
                            mdl.enable_property(mdl.prop(container_handle, "V_min"))
                            mdl.enable_property(mdl.prop(container_handle, "I_dis"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_discharge"))
                    ENDCODE
                }

                Q_discharge {
                    label = "Discharge capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                    disabled
                }

                V_min {
                    label = "Minimum/cut-off voltage"
                    widget = edit
                    type = generic
                    default_value = "2.81"
                    unit = "V"
                    group = "Basic parameters"
                    disabled
                }

                I_dis {
                    label = "Discharge rate"
                    widget = edit
                    type = generic
                    default_value = "15"
                    unit = "A"
                    group = "Basic parameters"
                    disabled
                }

                Q_total {
                    label = "Total capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                    group = "Basic parameters"
                }

                Ts {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "s"
                    group = "Basic parameters"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Basic parameters"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "basic_parameters")
                    ENDCODE
                }

                RC_NO {
                    label = "Model order"
                    widget = combo
                    combo_values = "None", "1", "2", "3"
                    type = string
                    default_value = "1"
                    group = "Diffusion process:3"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        parallel_rc = mdl.get_item("Parallel RC", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        mdl.set_property_value(mdl.prop(parallel_rc, "RC_number"), new_value)
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.disable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="1":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.disable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.disable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="2":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.disable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.disable_property(mdl.prop(container_handle, "C3"))
                        elif new_value=="3":
                            mdl.enable_property(mdl.prop(container_handle, "R1"))
                            mdl.enable_property(mdl.prop(container_handle, "R2"))
                            mdl.enable_property(mdl.prop(container_handle, "R3"))
                            mdl.enable_property(mdl.prop(container_handle, "C1"))
                            mdl.enable_property(mdl.prop(container_handle, "C2"))
                            mdl.enable_property(mdl.prop(container_handle, "C3"))
                    ENDCODE
                }

                R1 {
                    label = "Resistor 1"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                }

                C1 {
                    label = "Capacitor 1"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                }

                R2 {
                    label = "Resistor 2"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C2 {
                    label = "Capacitor 2"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                R3 {
                    label = "Resistor 3"
                    widget = edit
                    type = generic
                    default_value = "0.64769e-3"
                    unit = "Ω"
                    group = "Diffusion process"
                    disabled
                }

                C3 {
                    label = "Capacitor 3"
                    widget = edit
                    type = generic
                    default_value = "7.9598e3"
                    unit = "F"
                    group = "Diffusion process"
                    disabled
                }

                H_type {
                    label = "Hysteresis model"
                    widget = combo
                    combo_values = "None", "One state"
                    type = string
                    default_value = "One state"
                    group = "Voltage hysteresis:4"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        Hysteresis = mdl.get_item("Hysteresis", parent=sub_handle, item_type=ITEM_COMPONENT)
                    
                        if new_value=="None":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "None")
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        if new_value=="One state":
                            mdl.set_property_value(mdl.prop(Hysteresis, "hysteresis_model"), "One state")
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "M"))
                            mdl.disable_property(mdl.prop(container_handle, "M0"))
                            mdl.disable_property(mdl.prop(container_handle, "gamma"))
                            mdl.disable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.disable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.hide_property(mdl.prop(container_handle, "visualize_luts"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "M"))
                            mdl.enable_property(mdl.prop(container_handle, "M0"))
                            mdl.enable_property(mdl.prop(container_handle, "gamma"))
                            mdl.enable_property(mdl.prop(container_handle, "T_vector_h"))
                            mdl.enable_property(mdl.prop(container_handle, "SOC_vector_h"))
                            mdl.show_property(mdl.prop(container_handle, "visualize_luts"))
                    ENDCODE
                }

                T_vector_h {
                    label = "Temperatures vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                    unit = "celsius"
                    group = "Voltage hysteresis"
                }

                SOC_vector_h {
                    label = "State of charge vector for hysteresis parameters"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Voltage hysteresis"
                }

                M0 {
                    label = "M0 parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.0031315, 0.0023535, 0.0011502]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                M {
                    label = "M parameter"
                    widget = edit
                    type = generic
                    default_value = "[0.039929, 0.020018, 0.020545]"
                    unit = "V"
                    group = "Voltage hysteresis"
                }

                gamma {
                    label = "Gamma parameter"
                    widget = edit
                    type = generic
                    default_value = "[67.207e-3, 92.645e-3, 67.840e-3]"
                    group = "Voltage hysteresis"
                }

                visualize_luts {
                    widget = button
                    type = string
                    default_value = "Visualize Lookup Tables"
                    group = "Voltage hysteresis"
                    no_evaluate

                    CODE button_clicked
                        from typhoon.import_path.handlers.lut_visualization_functions import visualize_battery_luts
                        visualize_battery_luts(mdl, container_handle, "voltage_hysteresis")
                    
                    ENDCODE
                }

                balancing {
                    label = "Balancing circuit"
                    widget = combo
                    combo_values = "None", "Passive", "Direct current input"
                    type = string
                    default_value = "None"
                    group = "Balancing circuit:5"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION, ITEM_TAG
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        passive_balancing_subsystem = mdl.get_item("Passive Balancing", parent=sub_handle, item_type=ITEM_COMPONENT)
                        Sum3 = mdl.get_item("Sum3", parent=sub_handle, item_type=ITEM_COMPONENT)
                        port_T = mdl.get_item("T", parent=sub_handle, item_type=ITEM_PORT)
                        Goto3 = mdl.get_item("Goto3", parent=sub_handle, item_type=ITEM_TAG)
                    
                        if new_value=="None":
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            try:
                                mdl.delete_item(mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT))
                            except:
                                pass
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "None")
                            try:
                                mdl.create_connection(start=port_T, end=Goto3, name = "Connection1131")
                            except:
                                pass
                        elif new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Passive balancing")
                            if old_value=="Direct current input":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:  #elif old_value=="None":
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                    
                            mdl.create_connection(start=mdl.term(passive_balancing_subsystem, "BL_SW"), end=mdl.term(bus_split, "out1"))
                            mdl.create_connection(start=mdl.term(Sum3, "out"), end=mdl.term(passive_balancing_subsystem, "V_term"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                            mdl.set_property_value(mdl.prop(passive_balancing_subsystem, "balancing_combo"), "Direct current input")
                            if old_value=="Passive":
                                bus_split = mdl.get_item("bus_split", parent=sub_handle, item_type=ITEM_COMPONENT)
                            else:
                                bus_split = mdl.create_component("core/Bus Split",
                                                            name="bus_split",
                                                            parent=sub_handle,
                                                            position=(7250, 7900))
                                mdl.create_connection(start=port_T, end=mdl.term(bus_split, "in"))
                                mdl.delete_item(mdl.get_item("Connection1131", parent=sub_handle, item_type=ITEM_CONNECTION))
                                mdl.create_connection(start=Goto3, end=mdl.term(bus_split, "out"))
                            mdl.create_connection(start=mdl.term(bus_split, "out1"), end=mdl.term(passive_balancing_subsystem, "I_in"))
                    ENDCODE

                    CODE property_value_edited
                        if new_value=="Passive":
                            mdl.enable_property(mdl.prop(container_handle, "R_balance"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "R_balance"))
                    ENDCODE
                }

                R_balance {
                    label = "Balancing parallel resistor"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "Ω"
                    group = "Balancing circuit"
                    disabled
                }

                meas_SOH {
                    label = "State of health"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements:6"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOH = mdl.create_component("core/Probe",
                                                        name="SOH",
                                                        parent=sub_handle,
                                                        position=(8488, 7760),)
                            Termination1 = mdl.get_item("Termination1", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOH, "in"), end=mdl.term(Termination1, "in"))
                    
                        else:
                            if mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOH", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_SOC {
                    label = "State of charge"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            SOC = mdl.create_component("core/Probe",
                                                        name="SOC",
                                                        parent=sub_handle,
                                                        position=(8488, 7824),)
                            Termination3 = mdl.get_item("Termination3", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(SOC, "in"), end=mdl.term(Termination3, "in"))
                    
                        else:
                            if mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("SOC", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_OCV {
                    label = "Open circuit voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            OCV = mdl.create_component("core/Probe",
                                                        name="OCV",
                                                        parent=sub_handle,
                                                        position=(8488, 7888),)
                            Termination4 = mdl.get_item("Termination4", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(OCV, "in"), end=mdl.term(Termination4, "in"))
                    
                        else:
                            if mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("OCV", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Rint {
                    label = "Internal resistance"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Internal_resistance = mdl.create_component("core/Probe",
                                                        name="Internal resistance",
                                                        parent=sub_handle,
                                                        position=(8488, 7952),)
                            Termination5 = mdl.get_item("Termination5", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Internal_resistance, "in"), end=mdl.term(Termination5, "in"))
                    
                        else:
                            if mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Internal resistance", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Q {
                    label = "Total capacity"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Total_capacity = mdl.create_component("core/Probe",
                                                        name="Total capacity",
                                                        parent=sub_handle,
                                                        position=(8488, 8016),)
                            Termination6 = mdl.get_item("Termination6", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Total_capacity, "in"), end=mdl.term(Termination6, "in"))
                    
                        else:
                            if mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Total capacity", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Ibal {
                    label = "Balancing current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            current = mdl.create_component("core/Probe",
                                                        name="Balancing current",
                                                        parent=sub_handle,
                                                        position=(8688, 7760),)
                            Termination2 = mdl.get_item("Termination2", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(current, "in"), end=mdl.term(Termination2, "in"))
                    
                        else:
                            if mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Balancing current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_Icell {
                    label = "Cell current"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Cell_current = mdl.create_component("core/Probe",
                                                        name="Cell current",
                                                        parent=sub_handle,
                                                        position=(8688, 7824),)
                            Termination7 = mdl.get_item("Termination7", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Cell_current, "in"), end=mdl.term(Termination7, "in"))
                    
                        else:
                            if mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Cell current", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_T {
                    label = "Temperature"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            Temperature = mdl.create_component("core/Probe",
                                                        name="Temperature",
                                                        parent=sub_handle,
                                                        position=(8688, 7888),)
                            Termination8 = mdl.get_item("Termination8", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(Temperature, "in"), end=mdl.term(Termination8, "in"))
                    
                        else:
                            if mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Temperature", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                meas_hyst {
                    label = "Hysteresis voltage"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Measurements"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    
                        sub_handle = mdl.get_sub_level_handle(container_handle)
                        if new_value==True:
                            voltage = mdl.create_component("core/Probe",
                                                        name="Hysteresis voltage",
                                                        parent=sub_handle,
                                                        position=(8688, 7952),)
                            Termination9 = mdl.get_item("Termination9", parent=sub_handle, item_type=ITEM_COMPONENT)
                            mdl.create_connection(start=mdl.term(voltage, "in"), end=mdl.term(Termination9, "in"))
                    
                        else:
                            if mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT):
                                mdl.delete_item(mdl.get_item("Hysteresis voltage", parent=sub_handle, item_type=ITEM_COMPONENT))
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    Init_SOC = mdl.get_property_value(mdl.prop(item_handle, "Init_SOC"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    eta = mdl.get_property_value(mdl.prop(item_handle, "eta"))
                    cell_NO = mdl.get_property_value(mdl.prop(item_handle, "cell_NO"))
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                    C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                    R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                    C2 = mdl.get_property_value(mdl.prop(item_handle, "C2"))
                    R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                    C3 = mdl.get_property_value(mdl.prop(item_handle, "C3"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    T_vector_h = mdl.get_property_value(mdl.prop(item_handle, "T_vector_h"))
                    SOC_vector_h = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector_h"))
                    M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                    M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                    gamma = mdl.get_property_value(mdl.prop(item_handle, "gamma"))
                    balancing = mdl.get_property_value(mdl.prop(item_handle, "balancing"))
                    R_balance = mdl.get_property_value(mdl.prop(item_handle, "R_balance"))
                    meas_SOH = mdl.get_property_value(mdl.prop(item_handle, "meas_SOH"))
                    meas_SOC = mdl.get_property_value(mdl.prop(item_handle, "meas_SOC"))
                    meas_OCV = mdl.get_property_value(mdl.prop(item_handle, "meas_OCV"))
                    meas_Rint = mdl.get_property_value(mdl.prop(item_handle, "meas_Rint"))
                    meas_Q = mdl.get_property_value(mdl.prop(item_handle, "meas_Q"))
                    meas_Ibal = mdl.get_property_value(mdl.prop(item_handle, "meas_Ibal"))
                    meas_Icell = mdl.get_property_value(mdl.prop(item_handle, "meas_Icell"))
                    meas_T = mdl.get_property_value(mdl.prop(item_handle, "meas_T"))
                    meas_hyst = mdl.get_property_value(mdl.prop(item_handle, "meas_hyst"))
                    # HEADER STOP
                    # Entire code here is for calculating Q_total from Q_discharge
                    from typhoon.api.schematic_editor.exception import SchApiException
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT, ITEM_CONNECTION
                    import scipy.interpolate as interpolate
                
                    sub_handle = mdl.get_sub_level_handle(item_handle)
                    nom_Q_combo = mdl.get_property_value(mdl.prop(item_handle, "nom_Q_combo"))
                    capacity_module = mdl.get_item("Capacity", parent=sub_handle, item_type=ITEM_COMPONENT)
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    T_vector = mdl.get_property_value(mdl.prop(item_handle, "T_vector"))
                    V_min = mdl.get_property_value(mdl.prop(item_handle, "V_min"))
                    I_dis = mdl.get_property_value(mdl.prop(item_handle, "I_dis"))
                    RC_NO = mdl.get_property_value(mdl.prop(item_handle, "RC_NO"))
                    H_type = mdl.get_property_value(mdl.prop(item_handle, "H_type"))
                    Q_discharge = mdl.get_property_value(mdl.prop(item_handle, "Q_discharge"))
                    SOH_vector = mdl.get_property_value(mdl.prop(item_handle, "SOH_vector"))
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    OCV = mdl.get_property_value(mdl.prop(item_handle, "OCV"))
                    Q_total = mdl.get_property_value(mdl.prop(item_handle, "Q_total"))
                
                    if nom_Q_combo == "Total capacity":
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_total)
                
                    elif nom_Q_combo == "Discharge capacity":
                        # Finding the voltage drops: V_RC_max
                        if RC_NO == "None":
                            RC_drop = 0
                        elif RC_NO == "1":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            RC_drop = R1*I_dis
                        elif RC_NO == "2":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            RC_drop = (R1+R2)*I_dis
                        elif RC_NO == "3":
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            R3 = mdl.get_property_value(mdl.prop(item_handle, "R3"))
                            RC_drop = (R1+R2+R3)*I_dis
                
                        # Finding the voltage drops: V_hyst_max
                        if H_type == "None":
                            H_drop = 0
                        elif H_type == "One state":
                            M0 = mdl.get_property_value(mdl.prop(item_handle, "M0"))
                            M = mdl.get_property_value(mdl.prop(item_handle, "M"))
                            H_drop = np.mean(M) + np.mean(M0)
                
                        if np.ndim(Q_discharge) == 0:
                            if np.ndim(R0) == 0:
                                OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    # This is a bad cornercase where OCV is a function of temperature,
                                    # but neither R0 nor Q_discharge are. We take last temperature dependant OCV
                                    SOC_from_OCV = interpolate.interp1d(OCV[-1], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 1:
                                Q_max = [0]*len(R0)
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                            elif np.ndim(R0) == 2:
                                Q_max = [0]*len(R0[-1])
                                for index, temp in enumerate(T_vector):
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[index] = Q_discharge*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 1:
                            Q_max = Q_discharge.copy()
                            for index, temp in enumerate(T_vector):
                                if np.ndim(R0) == 0:
                                    OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 1:
                                    OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                elif np.ndim(R0) == 2:
                                    OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                    # [-1] index is used to find the last of the SOH vector
                
                                if np.ndim(OCV) == 1:
                                    SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                else:
                                    SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                SOC_min = SOC_from_OCV(OCV_min)
                                Q_max[index] = Q_discharge[index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        elif np.ndim(Q_discharge) == 2:
                            Q_max = Q_discharge.copy()
                            for health_index in range(len(SOH_vector)):
                                for index, temp in enumerate(T_vector):
                                    if np.ndim(R0) == 0:
                                        OCV_min = R0*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 1:
                                        OCV_min = R0[index]*I_dis + RC_drop + H_drop + V_min
                                    elif np.ndim(R0) == 2:
                                        OCV_min = R0[-1][index]*I_dis + RC_drop + H_drop + V_min
                                        # [-1] index is used to find the last of the SOH vector
                
                                    if np.ndim(OCV) == 1:
                                        SOC_from_OCV = interpolate.interp1d(OCV, SOC_vector, fill_value="extrapolate")
                                    else:
                                        SOC_from_OCV = interpolate.interp1d(OCV[index], SOC_vector, fill_value="extrapolate")
                                    SOC_min = SOC_from_OCV(OCV_min)
                                    Q_max[health_index][index] = Q_discharge[health_index][index]*np.max(SOC_vector)/(np.max(SOC_vector)-SOC_min)
                
                        mdl.set_property_value(mdl.prop(capacity_module, "Qnom"), Q_max)
                        if np.min(np.min(Q_max))<0:
                            info(f"{Q_max=}")
                            raise SchApiException("Provided discharge data is not valid")
                ENDCODE

                CODE define_icon
                    image('battery_cell.svg')
                ENDCODE
            }
        }
        [
            position = 9552, 9056
            size = 32, 64
        ]

        component "core/Voltage Measurement" dyn_voltage_3 {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 9392, 9048
            rotation = right
            scale = -1, 1
            size = 64, 32
        ]

        component sys_mp_signal_switch "Multiport signal switch6" {
            number_of_input_terminals = "5"
        }
        [
            position = 9528, 8912
            hide_name = True
        ]

        component lut_1d "1D look-up table36" {
            in_vec_x = "DYN_25_SCRIPT_1_TIME"
            out_vec_f_x = "DYN_25_SCRIPT_1_CURRENT"
            table_impl = "Non-equidistant"
        }
        [
            position = 9384, 8888
            hide_name = True
        ]

        component "core/Signal Controlled Current Source" Isp27 {
        }
        [
            position = 9696, 9048
            rotation = left
            hide_name = True
            scale = -1, 1
            size = 64, 32
        ]

        component "core/Current Measurement" dyn_current_3 {
            execution_rate = "Ts"
            sig_output = "True"
        }
        [
            position = 9632, 9008
            rotation = down
            scale = 1, -1
            size = 64, 32
        ]

        component gen_integrator Integrator11 {
        }
        [
            position = 9824, 8824
            hide_name = True
        ]

        component gen_probe dyn_chgAh_3 {
        }
        [
            position = 9920, 8808
        ]

        component gen_integrator Integrator12 {
        }
        [
            position = 9824, 8888
            hide_name = True
        ]

        component gen_probe dyn_disAh_3 {
        }
        [
            position = 9920, 8888
        ]

        component gen_c_function "C function13" {
            input_terminals = "real current;"
            input_terminals_dimensions = "inherit"
            input_terminals_feedthrough = "True"
            input_terminals_show_labels = "False"
            output_fnc = "/*Begin code section*/
if (current>0) {
    out = current;
    out2 = 0;
}
else if (current<0) {
    out2 = current;
    out = 0;
}
/*End code section*/"
            output_terminals = "real out;inherit out2;"
            output_terminals_dimensions = "inherit;inherit"
            output_terminals_feedthrough = "True;True"
            output_terminals_show_labels = "False;False"
        }
        [
            position = 9728, 8856
            hide_name = True
            size = 48, 48
        ]

        component gen_c_function "C function14" {
            global_variables = "real next_sw;real first_time_step_flag;real counter_cooldown;"
            init_fnc = "/*Begin code section*/
script_no = 1;  // start with the first script
sw_select = 1;  // start with first sw permutation (1st script)
timer = 0;
counter_cooldown = counter_cooldown_max;
 // wait an \"hour\" for the
// battery to go back to its original temperature [instant with typhoon] 
// and to discharge the RC capacitors
first_time_step_flag = 1;  // This flag exists because vcell measurement
// will always start with 0. We need to prevent even looking at that false vcell.
temperature = input_temp;
/*End code section*/"
            input_terminals = "real input_temp;real Vcell;"
            input_terminals_dimensions = "inherit;inherit"
            input_terminals_feedthrough = "True;True"
            input_terminals_show_labels = "True;True"
            output_fnc = "/*Begin code section*/
if (sw_select == 0) {  // Resting the battery cell
    counter_cooldown--;
    if (counter_cooldown <= 0) {
        sw_select = next_sw;
        counter_cooldown = counter_cooldown_max;
    }
}
else {  //  (sw_select != 0) 
    timer += Ts;
    if (timer >= DYN_SCRIPT_1_STOP_TIME && sw_select == 1){
        // This part triggers when the LUT attached to sw_select finishes with its dynamic profile
        // Consequently, the profile starts again by resetting the timer to 0
        timer = 0;
        if (Vcell < V_end_script_1 && first_time_step_flag != 1){
            // If battery cell reached less than roughly 10% of SOC, stop the dynamic profile injection
            // This is to prevent possible undervoltage with high current peaks
            sw_select = 0;
            next_sw = 2;
            temperature = 25;  // And remains so for the rest of the scripts
            script_no = 2;
        }
    }
    else if (Vcell <= Vmin && sw_select == 2){
        sw_select = 3;  // Tither profiles
        timer = 0;  // Refresh timer
    }
    else if (timer >= DYN_DIS_CHG_TITHER_STOP_TIME && sw_select == 3){
        timer = 0;
        if (Vcell < Vmin) {
            // If battery cell reached less than Vmin, stop the tither profile injection
            sw_select = 4;
            script_no = 3;
            // No need to rest the battery cell
            // Constant current charging of the battery cell with C/1
        }
    }
    else if (sw_select == 4 && Vcell > Vmax){  // Constant current charge reached Vmax
        sw_select = 5;  // Tither profiles
        timer = 0;  // Refresh timer
    }
    else if (sw_select == 5 && timer >= DYN_CHG_TITHER_STOP_TIME){
        timer = 0;  // Refresh timer
        if (Vcell > Vmax){
            sw_select = 0;
            script_no = 4;
            next_sw = 0;
        }
    }
}

first_time_step_flag = 0;
/*End code section*/"
            output_terminals = "real sw_select;inherit temperature;inherit timer;inherit script_no;"
            output_terminals_dimensions = "inherit;inherit;inherit;inherit"
            output_terminals_feedthrough = "True;True;True;True"
            output_terminals_show_labels = "True;True;True;True"
            parameters = "real Vmin;real Vmax;real V_end_script_1;real counter_cooldown_max;real DYN_SCRIPT_1_STOP_TIME;real DYN_CHG_TITHER_STOP_TIME;real DYN_DIS_CHG_TITHER_STOP_TIME;real Ts;"
        }
        [
            position = 9520, 8656
            hide_name = True
            size = 176, 160
        ]

        component gen_probe dyn_script_no_3 {
        }
        [
            position = 9688, 8720
        ]

        component lut_1d "1D look-up table37" {
            in_vec_x = "OCV_25_SCRIPT_2_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_2_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 9384, 8920
            hide_name = True
        ]

        component lut_1d "1D look-up table38" {
            in_vec_x = "OCV_25_SCRIPT_4_TIME_TITHER"
            out_vec_f_x = "OCV_25_SCRIPT_4_CURRENT_TITHER"
            table_impl = "Non-equidistant"
        }
        [
            position = 9384, 8952
            hide_name = True
        ]

        component gen_probe dyn_temperature_1 {
        }
        [
            position = 8120, 8616
        ]

        component gen_probe dyn_temperature_2 {
        }
        [
            position = 9000, 8616
        ]

        component gen_probe dyn_temperature_3 {
        }
        [
            position = 9848, 8608
        ]

        component gen_c_function "C function15" {
            global_variables = "real next_sw;real counter_cooldown;real first_time_step_flag;"
            init_fnc = "/*Begin code section*/
script_no = 1;  // start with the first script
sw_select = 1;  // start with first sw permutation (1st script)
timer = 0;
counter_cooldown = counter_cooldown_max;  // wait an hour for the
// battery to go back to its original temperature [instant with typhoon] 
// and to discharge the RC capacitors
first_time_step_flag = 1;  // This flag exists because vcell measurement
// will always start with 0. We need to prevent even looking at that false vcell.
temperature = input_temp;
/*End code section*/"
            input_terminals = "real input_temp;real Vcell;"
            input_terminals_dimensions = "inherit;inherit"
            input_terminals_feedthrough = "True;True"
            input_terminals_show_labels = "True;True"
            output_fnc = "/*Begin code section*/
// The model starts immediately with time and script_no 1
// sw_select = 1
// script_no = 1

if (sw_select == 0) {
    counter_cooldown--;
    if (counter_cooldown <= 0) {
        sw_select = next_sw;
        counter_cooldown = counter_cooldown_max;
    }
}
else {  // (sw_select != 0)
    timer += Ts;
    if (Vcell < Vmin && sw_select == 1 && first_time_step_flag != 1) {
        // Start second script countdown
        // Usually we would wait for the batteries and the chamber to cool off back to 25 degrees 
        script_no = 2;  // second script
        sw_select = 0;  // zero current
        next_sw = 2;
        temperature = 25;  // default temperature
        timer = 0;
    }
    else if (timer > OCV_25_SCRIPT_2_TIME_STOP && sw_select == 2){
        timer = 0;
        if (Vcell < Vmin) {
            // Start third script
            script_no = 3;
            sw_select = 3;
            temperature = input_temp;
        }
    }
    else if (Vcell > Vmax && sw_select == 3) {
        // Start forth script countdown
        // Usually we would wait for the batteries and the chamber to cool off back to 25 degrees 
        script_no = 4;
        sw_select = 0;  // zero current
        next_sw = 4;
        timer = 0;
    }
    else if (timer > OCV_25_SCRIPT_4_TIME_STOP && sw_select == 4){
        timer = 0;
        if (Vcell > Vmax) {
            // Start forth script countdown
            // Usually we would wait for the batteries and the chamber to cool off back to 25 degrees 
            sw_select = 0;  // zero current
            script_no = 5;
            next_sw = 0;
        }
    }
}

first_time_step_flag = 0;
/*End code section*/"
            output_terminals = "real sw_select;inherit temperature;inherit timer;inherit script_no;"
            output_terminals_dimensions = "inherit;inherit;inherit;inherit"
            output_terminals_feedthrough = "True;True;True;True"
            output_terminals_show_labels = "True;True;True;True"
            parameters = "real Vmin;real Vmax;real Ts;real OCV_25_SCRIPT_4_TIME_STOP;real OCV_25_SCRIPT_2_TIME_STOP;real counter_cooldown_max;"
        }
        [
            position = 8736, 7904
            hide_name = True
            size = 264, 160
        ]

        component gen_c_function "C function16" {
            global_variables = "real next_sw;real counter_cooldown;real first_time_step_flag;"
            init_fnc = "/*Begin code section*/
script_no = 1;  // start with the first script
sw_select = 1;  // start with first sw permutation (1st script)
timer = 0;
counter_cooldown = counter_cooldown_max;  // wait an hour for the
// battery to go back to its original temperature [instant with typhoon] 
// and to discharge the RC capacitors
first_time_step_flag = 1;  // This flag exists because vcell measurement
// will always start with 0. We need to prevent even looking at that false vcell.
temperature = input_temp;
/*End code section*/"
            input_terminals = "real input_temp;real Vcell;"
            input_terminals_dimensions = "inherit;inherit"
            input_terminals_feedthrough = "True;True"
            input_terminals_show_labels = "True;True"
            output_fnc = "/*Begin code section*/
// The model starts immediately with time and script_no 1
// sw_select = 1
// script_no = 1

if (sw_select == 0) {
    counter_cooldown--;
    if (counter_cooldown <= 0) {
        sw_select = next_sw;
        counter_cooldown = counter_cooldown_max;
    }
}
else {  // (sw_select != 0)
    timer += Ts;
    if (Vcell < Vmin && sw_select == 1 && first_time_step_flag != 1) {
        // Start second script countdown
        // Usually we would wait for the batteries and the chamber to cool off back to 25 degrees 
        script_no = 2;  // second script
        sw_select = 0;  // zero current
        next_sw = 2;
        temperature = 25;  // default temperature
        timer = 0;
    }
    else if (timer > OCV_25_SCRIPT_2_TIME_STOP && sw_select == 2){
        timer = 0;
        if (Vcell < Vmin) {
            // Start third script
            script_no = 3;
            sw_select = 3;
            temperature = input_temp;
        }
    }
    else if (Vcell > Vmax && sw_select == 3) {
        // Start forth script countdown
        // Usually we would wait for the batteries and the chamber to cool off back to 25 degrees 
        script_no = 4;
        sw_select = 0;  // zero current
        next_sw = 4;
        timer = 0;
    }
    else if (timer > OCV_25_SCRIPT_4_TIME_STOP && sw_select == 4){
        timer = 0;
        if (Vcell > Vmax) {
            // Start forth script countdown
            // Usually we would wait for the batteries and the chamber to cool off back to 25 degrees 
            sw_select = 0;  // zero current
            script_no = 5;
            next_sw = 0;
        }
    }
}

first_time_step_flag = 0;
/*End code section*/"
            output_terminals = "real sw_select;inherit temperature;inherit timer;inherit script_no;"
            output_terminals_dimensions = "inherit;inherit;inherit;inherit"
            output_terminals_feedthrough = "True;True;True;True"
            output_terminals_show_labels = "True;True;True;True"
            parameters = "real Vmin;real Vmax;real Ts;real OCV_25_SCRIPT_4_TIME_STOP;real OCV_25_SCRIPT_2_TIME_STOP;real counter_cooldown_max;"
        }
        [
            position = 9592, 7888
            hide_name = True
            size = 264, 160
        ]

        component gen_gain Gain1 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 7288, 8512
            hide_name = True
        ]

        component gen_gain Gain2 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 7544, 8248
            hide_name = True
        ]

        component gen_gain Gain3 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 7920, 8176
            hide_name = True
        ]

        component gen_gain Gain4 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 7984, 8856
            hide_name = True
        ]

        component gen_gain Gain5 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 8800, 8856
            hide_name = True
        ]

        component gen_gain Gain6 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 8784, 8176
            hide_name = True
        ]

        component gen_gain Gain7 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 9664, 8856
            hide_name = True
        ]

        component gen_gain Gain8 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 9640, 8144
            hide_name = True
        ]

        component gen_gain Gain9 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 7592, 8920
            hide_name = True
        ]

        component gen_gain Gain10 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 8440, 8920
            hide_name = True
        ]

        component gen_gain Gain11 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 9288, 8920
            hide_name = True
        ]

        component gen_gain Gain12 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 8400, 8240
            hide_name = True
        ]

        component gen_gain Gain13 {
            gain = "SIMULATION_SPEED_UP"
        }
        [
            position = 9296, 8216
            hide_name = True
        ]

        component src_constant STA_DIS_CHG {
            execution_rate = "Ts"
            value = "DISCHG_RATE"
        }
        [
            position = 7264, 8056
        ]

        component src_constant STA_CHG {
            execution_rate = "Ts"
            value = "CHG_RATE"
        }
        [
            position = 7264, 8120
        ]

        component gen_probe dyn_sw_select_1 {
        }
        [
            position = 8088, 8520
        ]

        component gen_c_function "C function17" {
            init_fnc = "/*Begin code section*/
done_flag = 0;
/*End code section*/"
            input_terminals = "real sta1;inherit sta2;inherit sta3;inherit dyn1;inherit dyn2;inherit dyn3;"
            input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit"
            input_terminals_feedthrough = "True;True;True;True;True;True"
            input_terminals_show_labels = "True;True;True;True;True;True"
            output_fnc = "/*Begin code section*/
if (sta1 > 4.5 && sta2 > 4.5 && sta3 > 4.5 && dyn1 > 3.5 && dyn2 > 3.5 && dyn3 > 3.5 ) {
    done_flag = 1;
}
else {
    done_flag = 0;
}
/*End code section*/"
            output_terminals = "real done_flag;"
            output_terminals_dimensions = "inherit"
            output_terminals_feedthrough = "True"
            output_terminals_show_labels = "True"
        }
        [
            position = 10136, 8488
            hide_name = True
            size = 96, 152
        ]

        component gen_probe done_flag {
        }
        [
            position = 10368, 8488
        ]

        component gen_delay Delay1 {
            del_length = "2000"
        }
        [
            position = 10272, 8488
        ]

        tag From1 {
            value = "temp_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7720, 8368
            hide_name = True
            size = 60, 20
        ]

        tag Goto1 {
            value = "temp_1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8112, 7896
            hide_name = True
            size = 60, 20
        ]

        tag Goto2 {
            value = "timer_1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8112, 7928
            hide_name = True
            size = 60, 20
        ]

        tag Goto3 {
            value = "vcell_1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 7544, 8432
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From4 {
            value = "vcell_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7664, 7976
            hide_name = True
            size = 60, 20
        ]

        tag From5 {
            value = "timer_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7472, 8248
            hide_name = True
            size = 60, 20
        ]

        tag Goto4 {
            value = "sw_select_1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8112, 7800
            hide_name = True
            size = 60, 20
        ]

        tag From6 {
            value = "sw_select_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7632, 8200
            hide_name = True
            size = 60, 20
        ]

        tag Goto11 {
            value = "dischg"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 7376, 8056
            hide_name = True
            size = 60, 20
        ]

        tag Goto12 {
            value = "chg"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 7376, 8120
            hide_name = True
            size = 60, 20
        ]

        tag From15 {
            value = "dischg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7704, 8216
            hide_name = True
            size = 60, 20
        ]

        tag From16 {
            value = "chg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7704, 8248
            hide_name = True
            size = 60, 20
        ]

        tag From17 {
            value = "temp_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8576, 8360
            hide_name = True
            size = 60, 20
        ]

        tag Goto13 {
            value = "temp_2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8968, 7888
            hide_name = True
            size = 60, 20
        ]

        tag Goto14 {
            value = "timer_2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8968, 7920
            hide_name = True
            size = 60, 20
        ]

        tag Goto15 {
            value = "vcell_2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8400, 8424
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From20 {
            value = "vcell_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8512, 7968
            hide_name = True
            size = 60, 20
        ]

        tag From21 {
            value = "timer_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8320, 8240
            hide_name = True
            size = 60, 20
        ]

        tag Goto16 {
            value = "sw_select_2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8968, 7792
            hide_name = True
            size = 60, 20
        ]

        tag From22 {
            value = "sw_select_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8488, 8192
            hide_name = True
            size = 60, 20
        ]

        tag From25 {
            value = "dischg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8560, 8208
            hide_name = True
            size = 60, 20
        ]

        tag From26 {
            value = "chg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8560, 8240
            hide_name = True
            size = 60, 20
        ]

        tag From27 {
            value = "temp_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9448, 8336
            hide_name = True
            size = 60, 20
        ]

        tag Goto17 {
            value = "temp_3"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9840, 7864
            hide_name = True
            size = 60, 20
        ]

        tag Goto18 {
            value = "timer_3"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9880, 7896
            hide_name = True
            size = 60, 20
        ]

        tag Goto19 {
            value = "vcell_3"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9272, 8400
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From30 {
            value = "vcell_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9384, 7952
            hide_name = True
            size = 60, 20
        ]

        tag From31 {
            value = "timer_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9232, 8216
            hide_name = True
            size = 60, 20
        ]

        tag Goto20 {
            value = "sw_select_3"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9840, 7768
            hide_name = True
            size = 60, 20
        ]

        tag From32 {
            value = "sw_select_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9360, 8168
            hide_name = True
            size = 60, 20
        ]

        tag From35 {
            value = "dischg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9432, 8184
            hide_name = True
            size = 60, 20
        ]

        tag From36 {
            value = "chg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9432, 8216
            hide_name = True
            size = 60, 20
        ]

        tag From37 {
            value = "dyn_temperature_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7768, 9048
            hide_name = True
            size = 60, 20
        ]

        tag Goto21 {
            value = "dyn_vcell_1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 7592, 9112
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From38 {
            value = "dyn_timer_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7520, 8920
            hide_name = True
            size = 60, 20
        ]

        tag From39 {
            value = "dyn_sw_select_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7680, 8800
            hide_name = True
            size = 60, 20
        ]

        tag Goto22 {
            value = "test_temp_1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 7360, 8560
            hide_name = True
            size = 60, 20
        ]

        tag From42 {
            value = "test_temp_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7664, 7848
            hide_name = True
            size = 60, 20
        ]

        tag Goto23 {
            value = "test_temp_2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 7360, 8624
            hide_name = True
            size = 60, 20
        ]

        tag Goto24 {
            value = "test_temp_3"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 7360, 8688
            hide_name = True
            size = 60, 20
        ]

        tag From43 {
            value = "test_temp_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8504, 7840
            hide_name = True
            size = 60, 20
        ]

        tag From44 {
            value = "test_temp_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9376, 7824
            hide_name = True
            size = 60, 20
        ]

        tag From45 {
            value = "test_temp_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7576, 8592
            hide_name = True
            size = 60, 20
        ]

        tag Goto25 {
            value = "dyn_sw_select_1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8056, 8592
            hide_name = True
            size = 60, 20
        ]

        tag From46 {
            value = "dyn_vcell_1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7576, 8720
            hide_name = True
            size = 60, 20
        ]

        tag Goto27 {
            value = "dyn_timer_1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8000, 8672
            hide_name = True
            size = 60, 20
        ]

        tag Goto28 {
            value = "dyn_temperature_1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8000, 8640
            hide_name = True
            size = 60, 20
        ]

        tag Goto29 {
            value = "dyn_dis_chg"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 7384, 8976
            hide_name = True
            size = 60, 20
        ]

        tag From47 {
            value = "dyn_dis_chg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7736, 8904
            hide_name = True
            size = 60, 20
        ]

        tag From48 {
            value = "dyn_chg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 7736, 8936
            hide_name = True
            size = 60, 20
        ]

        tag Goto30 {
            value = "dyn_chg"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 7384, 9040
            hide_name = True
            size = 60, 20
        ]

        tag From49 {
            value = "dyn_temperature_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8600, 9048
            hide_name = True
            size = 60, 20
        ]

        tag Goto31 {
            value = "dyn_vcell_2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8424, 9112
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From50 {
            value = "dyn_timer_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8384, 8920
            hide_name = True
            size = 60, 20
        ]

        tag From51 {
            value = "dyn_sw_select_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8512, 8800
            hide_name = True
            size = 60, 20
        ]

        tag From52 {
            value = "test_temp_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8408, 8592
            hide_name = True
            size = 60, 20
        ]

        tag Goto32 {
            value = "dyn_sw_select_2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8888, 8592
            hide_name = True
            size = 60, 20
        ]

        tag From53 {
            value = "dyn_vcell_2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8408, 8720
            hide_name = True
            size = 60, 20
        ]

        tag Goto33 {
            value = "dyn_timer_2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8832, 8672
            hide_name = True
            size = 60, 20
        ]

        tag Goto34 {
            value = "dyn_temperature_2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8832, 8640
            hide_name = True
            size = 60, 20
        ]

        tag From54 {
            value = "dyn_dis_chg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8568, 8904
            hide_name = True
            size = 60, 20
        ]

        tag From55 {
            value = "dyn_chg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8568, 8936
            hide_name = True
            size = 60, 20
        ]

        tag From56 {
            value = "dyn_temperature_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9464, 9048
            hide_name = True
            size = 60, 20
        ]

        tag Goto35 {
            value = "dyn_vcell_3"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9288, 9112
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From57 {
            value = "dyn_timer_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9232, 8920
            hide_name = True
            size = 60, 20
        ]

        tag From58 {
            value = "dyn_sw_select_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9376, 8800
            hide_name = True
            size = 60, 20
        ]

        tag From59 {
            value = "test_temp_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9272, 8592
            hide_name = True
            size = 60, 20
        ]

        tag Goto36 {
            value = "dyn_sw_select_3"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9752, 8592
            hide_name = True
            size = 60, 20
        ]

        tag From60 {
            value = "dyn_vcell_3"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9272, 8720
            hide_name = True
            size = 60, 20
        ]

        tag Goto37 {
            value = "dyn_timer_3"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9696, 8672
            hide_name = True
            size = 60, 20
        ]

        tag Goto38 {
            value = "dyn_temperature_3"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9696, 8640
            hide_name = True
            size = 60, 20
        ]

        tag From61 {
            value = "dyn_dis_chg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9432, 8904
            hide_name = True
            size = 60, 20
        ]

        tag From62 {
            value = "dyn_chg"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 9432, 8936
            hide_name = True
            size = 60, 20
        ]

        tag Goto39 {
            value = "dyn_script_no_1_tag"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8008, 8784
            hide_name = True
            size = 60, 20
        ]

        tag Goto40 {
            value = "dyn_script_no_2_tag"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8848, 8784
            hide_name = True
            size = 60, 20
        ]

        tag Goto41 {
            value = "dyn_script_no_3_tag"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9680, 8768
            hide_name = True
            size = 60, 20
        ]

        tag From63 {
            value = "dyn_script_no_1_tag"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 10008, 8504
            hide_name = True
            size = 60, 20
        ]

        tag From64 {
            value = "dyn_script_no_2_tag"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 10008, 8528
            hide_name = True
            size = 60, 20
        ]

        tag From65 {
            value = "dyn_script_no_3_tag"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 10008, 8552
            hide_name = True
            size = 60, 20
        ]

        tag Goto42 {
            value = "sta_script_no_3_tag"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9872, 7952
            hide_name = True
            size = 60, 20
        ]

        tag Goto43 {
            value = "sta_script_no_2_tag"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8968, 7968
            hide_name = True
            size = 60, 20
        ]

        tag Goto44 {
            value = "sta_script_no_1_tag"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8112, 7976
            hide_name = True
            size = 60, 20
        ]

        tag From66 {
            value = "sta_script_no_1_tag"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 10008, 8424
            hide_name = True
            size = 60, 20
        ]

        tag From67 {
            value = "sta_script_no_2_tag"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 10008, 8448
            hide_name = True
            size = 60, 20
        ]

        tag From68 {
            value = "sta_script_no_3_tag"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 10008, 8472
            hide_name = True
            size = 60, 20
        ]

        junction Junction91 pe
        [
            position = 7808, 8328
        ]

        junction Junction98 sp
        [
            position = 8064, 7896
        ]

        junction Junction104 sp
        [
            position = 7608, 8248
        ]

        junction Junction105 pe
        [
            position = 8664, 8320
        ]

        junction Junction108 sp
        [
            position = 8464, 8240
        ]

        junction Junction109 pe
        [
            position = 9536, 8296
        ]

        junction Junction112 sp
        [
            position = 9336, 8216
        ]

        junction Junction113 sp
        [
            position = 8056, 7800
        ]

        junction Junction116 pe
        [
            position = 7856, 9008
        ]

        junction Junction121 sp
        [
            position = 7640, 8920
        ]

        junction Junction122 sp
        [
            position = 7640, 8920
        ]

        junction Junction123 pe
        [
            position = 8688, 9008
        ]

        junction Junction124 sp
        [
            position = 8472, 8920
        ]

        junction Junction125 sp
        [
            position = 8472, 8920
        ]

        junction Junction126 pe
        [
            position = 9552, 9008
        ]

        junction Junction127 sp
        [
            position = 9336, 8920
        ]

        junction Junction128 sp
        [
            position = 9336, 8920
        ]

        junction Junction129 sp
        [
            position = 7952, 8640
        ]

        junction Junction130 sp
        [
            position = 8784, 8640
        ]

        junction Junction131 sp
        [
            position = 9640, 8640
        ]

        junction Junction133 sp
        [
            position = 9792, 7864
        ]

        junction Junction134 sp
        [
            position = 8904, 7888
        ]

        junction Junction135 sp
        [
            position = 7976, 8592
        ]

        junction Junction136 sp
        [
            position = 7936, 8720
        ]

        junction Junction137 sp
        [
            position = 9632, 8720
        ]

        junction Junction138 sp
        [
            position = 8768, 8720
        ]

        junction Junction139 sp
        [
            position = 9824, 7952
        ]

        junction Junction140 sp
        [
            position = 8888, 7968
        ]

        junction Junction141 sp
        [
            position = 8040, 7976
        ]

        comment Comment4 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">STATIC TEST<br />TEMP 45 DEG  </p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">DYNAMIC TEST </p></body></html> ENDCOMMENT 
        [
            position = 8520, 8464
        ]

        comment Comment5 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">STATIC TEST<br />TEMP 25 DEG  </p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">DYNAMIC TEST </p></body></html> ENDCOMMENT 
        [
            position = 7696, 8464
        ]

        comment Comment6 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">STATIC TEST<br />TEMP 5 DEG   </p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">DYNAMIC TEST </p></body></html> ENDCOMMENT 
        [
            position = 9440, 8432
        ]

        comment Comment7 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Unlinked to lower SOC limit</p></body></html> ENDCOMMENT 
        [
            position = 7896, 8424
        ]

        comment Comment8 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Unlinked to lower SOC limit</p></body></html> ENDCOMMENT 
        [
            position = 8728, 8416
        ]

        comment Comment9 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Unlinked to lower SOC limit</p></body></html> ENDCOMMENT 
        [
            position = 9592, 8392
        ]

        comment Comment10 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Unlinked to lower SOC limit</p></body></html> ENDCOMMENT 
        [
            position = 7792, 9112
        ]

        comment Comment11 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Unlinked to lower SOC limit</p></body></html> ENDCOMMENT 
        [
            position = 8632, 9112
        ]

        comment Comment12 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Unlinked to lower SOC limit</p></body></html> ENDCOMMENT 
        [
            position = 9496, 9112
        ]

        connect "1D look-up table23.value" "Multiport signal switch1.in1" as Connection331
        connect "1D look-up table25.value" "Multiport signal switch1.in3" as Connection332
        connect Isp22.in "Multiport signal switch1.out" as Connection337
        connect Isp22.p_node "Battery Cell_25.N" as Connection338
        [
            breakpoints = 7880, 8416; 7808, 8416
        ]
        connect voltage_1.n_node "Battery Cell_25.N" as Connection339
        connect voltage_1.p_node Junction91 as Connection341
        connect Junction91 "Battery Cell_25.P" as Connection342
        connect From1 "Battery Cell_25.T" as Connection351
        connect Isp22.n_node current_1.p_node as Connection390
        connect current_1.n_node Junction91 as Connection391
        connect Integrator1.out chgAh_1.in as Connection392
        connect Integrator2.out disAh_1.in as Connection393
        connect "C function2.out" Integrator1.in as Connection395
        connect Goto1 Junction98 as Connection398
        connect Junction98 "C function1.temperature" as Connection399
        connect temperature_1.in Junction98 as Connection400
        connect Goto3 voltage_1.out as Connection403
        connect Integrator2.in "C function2.out2" as Connection417
        connect From16 "Multiport signal switch1.in2" as Connection465
        connect From15 "Multiport signal switch1.in" as Connection466
        connect Junction104 "1D look-up table23.addr" as Connection469
        connect "1D look-up table25.addr" Junction104 as Connection470
        connect "Multiport signal switch1.ctrl" From6 as Connection471
        connect "1D look-up table26.value" "Multiport signal switch2.in1" as Connection472
        connect "1D look-up table27.value" "Multiport signal switch2.in3" as Connection473
        connect Isp23.in "Multiport signal switch2.out" as Connection474
        connect Isp23.p_node "Battery Cell_45.N" as Connection475
        [
            breakpoints = 8736, 8408; 8664, 8408
        ]
        connect voltage_2.n_node "Battery Cell_45.N" as Connection476
        connect voltage_2.p_node Junction105 as Connection477
        connect Junction105 "Battery Cell_45.P" as Connection478
        connect From17 "Battery Cell_45.T" as Connection479
        connect Isp23.n_node current_2.p_node as Connection486
        connect current_2.n_node Junction105 as Connection487
        connect Integrator3.out chgAh_2.in as Connection488
        connect Integrator4.out disAh_2.in as Connection489
        connect "C function4.out" Integrator3.in as Connection491
        connect Goto15 voltage_2.out as Connection496
        connect Integrator4.in "C function4.out2" as Connection502
        connect From26 "Multiport signal switch2.in2" as Connection506
        connect From25 "Multiport signal switch2.in" as Connection507
        connect Junction108 "1D look-up table26.addr" as Connection509
        connect "1D look-up table27.addr" Junction108 as Connection510
        connect "Multiport signal switch2.ctrl" From22 as Connection511
        connect "1D look-up table28.value" "Multiport signal switch3.in1" as Connection512
        connect "1D look-up table29.value" "Multiport signal switch3.in3" as Connection513
        connect Isp24.in "Multiport signal switch3.out" as Connection514
        connect Isp24.p_node "Battery Cell_05.N" as Connection515
        [
            breakpoints = 9608, 8384; 9536, 8384; 9536, 8392; 9536, 8392
        ]
        connect voltage_3.n_node "Battery Cell_05.N" as Connection516
        connect voltage_3.p_node Junction109 as Connection517
        connect Junction109 "Battery Cell_05.P" as Connection518
        connect From27 "Battery Cell_05.T" as Connection519
        connect Isp24.n_node current_3.p_node as Connection526
        connect current_3.n_node Junction109 as Connection527
        connect Integrator5.out chgAh_3.in as Connection528
        connect Integrator6.out disAh_3.in as Connection529
        connect "C function6.out" Integrator5.in as Connection531
        connect Goto19 voltage_3.out as Connection536
        connect Integrator6.in "C function6.out2" as Connection542
        connect From36 "Multiport signal switch3.in2" as Connection546
        connect From35 "Multiport signal switch3.in" as Connection547
        connect Junction112 "1D look-up table28.addr" as Connection549
        connect "1D look-up table29.addr" Junction112 as Connection550
        connect "Multiport signal switch3.ctrl" From32 as Connection551
        connect Goto4 Junction113 as Connection552
        connect Junction113 "C function1.sw_select" as Connection553
        [
            breakpoints = 8064, 7800; 8040, 7800
        ]
        connect sw_select_1.in Junction113 as Connection554
        connect Isp25.in "Multiport signal switch4.out" as Connection557
        connect Isp25.n_node dyn_current_1.p_node as Connection563
        connect Integrator7.out dyn_chgAh_1.in as Connection565
        connect Integrator8.out dyn_disAh_1.in as Connection566
        connect "C function7.out" Integrator7.in as Connection568
        connect Goto21 dyn_voltage_1.out as Connection569
        connect Integrator8.in "C function7.out2" as Connection570
        connect "Multiport signal switch4.ctrl" From39 as Connection576
        [
            breakpoints = 7792, 8864; 7792, 8864; 7792, 8800
        ]
        connect "Dyn Battery Cell_25.N" dyn_voltage_1.n_node as Connection578
        connect Isp25.p_node "Dyn Battery Cell_25.N" as Connection579
        connect dyn_current_1.n_node Junction116 as Connection580
        connect Junction116 dyn_voltage_1.p_node as Connection581
        [
            breakpoints = 7856, 9008
        ]
        connect "Dyn Battery Cell_25.P" Junction116 as Connection582
        connect "Dyn Battery Cell_25.T" From37 as Connection583
        connect Goto22 "battery temp 1.out" as Connection614
        connect From42 "C function1.input_temp" as Connection615
        connect Goto23 "battery temp 2.out" as Connection616
        connect "battery temp 3.out" Goto24 as Connection617
        connect From45 "C function10.input_temp" as Connection620
        connect "Multiport signal switch4.in" "1D look-up table30.value" as Connection627
        connect From46 "C function10.Vcell" as Connection628
        connect Goto27 "C function10.timer" as Connection634
        connect Goto29 DYN_DIS_CHG.out as Connection637
        connect From47 "Multiport signal switch4.in1" as Connection638
        connect "1D look-up table30.addr" Junction121 as Connection640
        connect "1D look-up table31.addr" Junction122 as Connection643
        connect Junction122 Junction121 as Connection644
        connect "1D look-up table32.addr" Junction122 as Connection645
        connect "1D look-up table32.value" "Multiport signal switch4.in4" as Connection646
        connect "1D look-up table31.value" "Multiport signal switch4.in2" as Connection647
        connect From48 "Multiport signal switch4.in3" as Connection648
        connect Goto30 DYN_CHG.out as Connection650
        connect Isp26.in "Multiport signal switch5.out" as Connection651
        connect Isp26.n_node dyn_current_2.p_node as Connection652
        connect Integrator9.out dyn_chgAh_2.in as Connection653
        connect Integrator10.out dyn_disAh_2.in as Connection654
        connect "C function11.out" Integrator9.in as Connection656
        connect Goto31 dyn_voltage_2.out as Connection657
        connect Integrator10.in "C function11.out2" as Connection658
        connect "Multiport signal switch5.ctrl" From51 as Connection659
        [
            breakpoints = 8624, 8864; 8624, 8864; 8624, 8800
        ]
        connect "Dyn Battery Cell_45.N" dyn_voltage_2.n_node as Connection660
        connect Isp26.p_node "Dyn Battery Cell_45.N" as Connection661
        connect dyn_current_2.n_node Junction123 as Connection662
        connect Junction123 dyn_voltage_2.p_node as Connection663
        [
            breakpoints = 8688, 9008
        ]
        connect "Dyn Battery Cell_45.P" Junction123 as Connection664
        connect "Dyn Battery Cell_45.T" From49 as Connection665
        connect From52 "C function12.input_temp" as Connection666
        connect Goto32 "C function12.sw_select" as Connection667
        connect "Multiport signal switch5.in" "1D look-up table33.value" as Connection668
        connect From53 "C function12.Vcell" as Connection669
        connect Goto33 "C function12.timer" as Connection670
        connect From54 "Multiport signal switch5.in1" as Connection672
        connect "1D look-up table33.addr" Junction124 as Connection673
        connect "1D look-up table34.addr" Junction125 as Connection675
        connect Junction125 Junction124 as Connection676
        connect "1D look-up table35.addr" Junction125 as Connection677
        connect "1D look-up table35.value" "Multiport signal switch5.in4" as Connection678
        connect "1D look-up table34.value" "Multiport signal switch5.in2" as Connection679
        connect From55 "Multiport signal switch5.in3" as Connection680
        connect Isp27.in "Multiport signal switch6.out" as Connection682
        connect Isp27.n_node dyn_current_3.p_node as Connection683
        connect Integrator11.out dyn_chgAh_3.in as Connection684
        connect Integrator12.out dyn_disAh_3.in as Connection685
        connect "C function13.out" Integrator11.in as Connection687
        connect Goto35 dyn_voltage_3.out as Connection688
        connect Integrator12.in "C function13.out2" as Connection689
        connect "Multiport signal switch6.ctrl" From58 as Connection690
        [
            breakpoints = 9488, 8864; 9488, 8864; 9488, 8800
        ]
        connect "Dyn Battery Cell_05.N" dyn_voltage_3.n_node as Connection691
        connect Isp27.p_node "Dyn Battery Cell_05.N" as Connection692
        connect dyn_current_3.n_node Junction126 as Connection693
        connect Junction126 dyn_voltage_3.p_node as Connection694
        [
            breakpoints = 9552, 9008
        ]
        connect "Dyn Battery Cell_05.P" Junction126 as Connection695
        connect "Dyn Battery Cell_05.T" From56 as Connection696
        connect From59 "C function14.input_temp" as Connection697
        connect Goto36 "C function14.sw_select" as Connection698
        connect "Multiport signal switch6.in" "1D look-up table36.value" as Connection699
        connect From60 "C function14.Vcell" as Connection700
        connect Goto37 "C function14.timer" as Connection701
        connect From61 "Multiport signal switch6.in1" as Connection703
        connect "1D look-up table36.addr" Junction127 as Connection704
        connect "1D look-up table37.addr" Junction128 as Connection706
        connect Junction128 Junction127 as Connection707
        connect "1D look-up table38.addr" Junction128 as Connection708
        connect "1D look-up table38.value" "Multiport signal switch6.in4" as Connection709
        connect "1D look-up table37.value" "Multiport signal switch6.in2" as Connection710
        connect From62 "Multiport signal switch6.in3" as Connection711
        connect From4 "C function1.Vcell" as Connection713
        connect Goto28 Junction129 as Connection714
        connect Junction129 "C function10.temperature" as Connection715
        connect dyn_temperature_1.in Junction129 as Connection716
        connect Goto34 Junction130 as Connection717
        connect Junction130 "C function12.temperature" as Connection718
        connect dyn_temperature_2.in Junction130 as Connection719
        connect Goto38 Junction131 as Connection720
        connect Junction131 "C function14.temperature" as Connection721
        connect dyn_temperature_3.in Junction131 as Connection722
        connect From30 "C function16.Vcell" as Connection727
        connect From44 "C function16.input_temp" as Connection728
        connect temperature_3.in Junction133 as Connection734
        connect Junction133 Goto17 as Connection735
        [
            breakpoints = 9792, 7856; 9792, 7864
        ]
        connect "C function16.temperature" Junction133 as Connection736
        connect "C function16.sw_select" Goto20 as Connection737
        [
            breakpoints = 9760, 7824; 9760, 7768
        ]
        connect "C function15.temperature" Junction134 as Connection739
        connect Junction134 Goto13 as Connection740
        connect temperature_2.in Junction134 as Connection741
        connect "C function15.sw_select" Goto16 as Connection742
        [
            breakpoints = 8888, 7840; 8888, 7792
        ]
        connect From20 "C function15.Vcell" as Connection748
        connect From43 "C function15.input_temp" as Connection749
        connect Time.in Gain1.out as Connection750
        connect Gain1.in Clock1.out as Connection751
        connect From5 Gain2.in as Connection752
        connect Gain2.out Junction104 as Connection753
        connect "C function2.current" Gain3.out as Connection754
        connect Gain3.in current_1.out as Connection755
        connect "C function7.current" Gain4.out as Connection756
        connect Gain4.in dyn_current_1.out as Connection757
        connect "C function11.current" Gain5.out as Connection758
        connect Gain5.in dyn_current_2.out as Connection759
        connect "C function4.current" Gain6.out as Connection760
        connect Gain6.in current_2.out as Connection761
        connect "C function13.current" Gain7.out as Connection762
        connect Gain7.in dyn_current_3.out as Connection763
        connect "C function6.current" Gain8.out as Connection764
        connect Gain8.in current_3.out as Connection765
        connect "C function1.timer" Goto2 as Connection766
        [
            breakpoints = 8064, 7928
        ]
        connect "C function15.timer" Goto14 as Connection767
        [
            breakpoints = 8904, 7920
        ]
        connect "C function16.timer" Goto18 as Connection768
        [
            breakpoints = 9800, 7896
        ]
        connect Junction121 Gain9.out as Connection769
        connect Gain9.in From38 as Connection770
        connect Junction124 Gain10.out as Connection771
        connect Gain10.in From50 as Connection772
        connect Junction127 Gain11.out as Connection773
        connect Gain11.in From57 as Connection774
        connect From21 Gain12.in as Connection775
        connect Gain12.out Junction108 as Connection776
        connect From31 Gain13.in as Connection777
        connect Gain13.out Junction112 as Connection778
        connect STA_CHG.out Goto12 as Connection779
        connect STA_DIS_CHG.out Goto11 as Connection780
        connect Goto25 Junction135 as Connection781
        connect Junction135 "C function10.sw_select" as Connection782
        connect dyn_sw_select_1.in Junction135 as Connection783
        connect dyn_script_no_1.in Junction136 as Connection784
        connect Junction136 "C function10.script_no" as Connection785
        connect Goto39 Junction136 as Connection786
        connect dyn_script_no_3.in Junction137 as Connection787
        connect Junction137 "C function14.script_no" as Connection788
        connect Goto41 Junction137 as Connection789
        connect dyn_script_no_2.in Junction138 as Connection790
        connect Junction138 "C function12.script_no" as Connection791
        connect Goto40 Junction138 as Connection792
        connect "C function16.script_no" Junction139 as Connection793
        connect Junction139 script_no_3.in as Connection794
        connect Goto42 Junction139 as Connection795
        connect "C function15.script_no" Junction140 as Connection796
        connect Junction140 script_no_2.in as Connection797
        [
            breakpoints = 8888, 7968; 8888, 8056
        ]
        connect Goto43 Junction140 as Connection798
        connect script_no_1.in Junction141 as Connection799
        connect Junction141 "C function1.script_no" as Connection800
        connect Goto44 Junction141 as Connection801
        connect From66 "C function17.sta1" as Connection802
        connect "C function17.sta2" From67 as Connection803
        connect "C function17.sta3" From68 as Connection804
        connect "C function17.dyn1" From63 as Connection805
        connect "C function17.dyn2" From64 as Connection806
        connect "C function17.dyn3" From65 as Connection807
        [
            breakpoints = 10064, 8528; 10064, 8552
        ]
        connect Delay1.in "C function17.done_flag" as Connection808
        connect Delay1.out done_flag.in as Connection809
    }

    logically_deleted {
        "Comment4"
        "Comment5"
        "Comment6"
    }

    default {
        gen_c_function {
            input_terminals = "real in;"
            input_terminals_show_labels = "False;"
            input_terminals_feedthrough = "True;"
            input_terminals_dimensions = "inherit;"
            output_terminals = "real out;"
            output_terminals_show_labels = "False;"
            output_terminals_feedthrough = "True;"
            output_terminals_dimensions = "inherit;"
            output_fnc = ""
            update_fnc = ""
            init_fnc = ""
            global_variables = ""
            parameters = ""
            execution_rate = "inherit"
        }

        gen_c_function {
            input_terminals = "real in;"
            input_terminals_show_labels = "False;"
            input_terminals_feedthrough = "True;"
            input_terminals_dimensions = "inherit;"
            output_terminals = "real out;"
            output_terminals_show_labels = "False;"
            output_terminals_feedthrough = "True;"
            output_terminals_dimensions = "inherit;"
            output_fnc = ""
            update_fnc = ""
            init_fnc = ""
            global_variables = ""
            parameters = ""
            execution_rate = "inherit"
        }

        gen_delay {
            delay_type = "Fixed delay"
            del_length = "2"
            max_delay_length = "20"
            init_value = "0"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        gen_gain {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        gen_gain {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        gen_integrator {
            show_reset = "none"
            reset_type = "asynchronous"
            show_init_condition = "internal"
            init_value = "0"
            limit_output = "False"
            limit_upper = "inf"
            limit_lower = "-inf"
            show_state = "False"
            state_port_type = "inherit"
            execution_rate = "inherit"
        }

        gen_integrator {
            show_reset = "none"
            reset_type = "asynchronous"
            show_init_condition = "internal"
            init_value = "0"
            limit_output = "False"
            limit_upper = "inf"
            limit_lower = "-inf"
            show_state = "False"
            state_port_type = "inherit"
            execution_rate = "inherit"
        }

        gen_limiter {
            upper_limit = "[\'inf\']"
            lower_limit = "[\'-inf\']"
            execution_rate = "inherit"
        }

        gen_limiter {
            upper_limit = "[\'inf\']"
            lower_limit = "[\'-inf\']"
            execution_rate = "inherit"
        }

        gen_probe {
            signal_access = "inherit"
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        gen_probe {
            signal_access = "inherit"
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        gen_product {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_product {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_sum {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_sum {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_terminator {
            execution_rate = "inherit"
        }

        gen_terminator {
            execution_rate = "inherit"
        }

        lut_1d {
            in_vec_x = "np.arange(-5,6)"
            out_vec_f_x = "np.arange(-5,6)**2"
            table_impl = "Equidistant"
            ext_mode = "Clip"
            execution_rate = "inherit"
        }

        lut_1d {
            in_vec_x = "np.arange(-5,6)"
            out_vec_f_x = "np.arange(-5,6)**2"
            table_impl = "Equidistant"
            ext_mode = "Clip"
            execution_rate = "inherit"
        }

        src_clock {
            enb_reset = "False"
            reset_at = "1.0"
            execution_rate = "100e-6"
        }

        src_constant {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        src_constant {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        src_scada_input {
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        src_scada_input {
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        sys_mp_signal_switch {
            number_of_input_terminals = "2"
            execution_rate = "inherit"
        }

        sys_signal_switch {
            criterion = "ctrl > threshold"
            threshold = "0.5"
            execution_rate = "inherit"
        }

        sys_signal_switch {
            criterion = "ctrl > threshold"
            threshold = "0.5"
            execution_rate = "inherit"
        }

        "core/Current Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Edge Detection" {
            edge = "both"
            execution_rate = "inherit"
        }

        "core/Signal Controlled Current Source" {
            execution_rate = "inherit"
        }

        "core/Signal Controlled Voltage Source" {
            execution_rate = "inherit"
        }

        "core/Voltage Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }
    }

    CODE model_init
        # Numpy module is imported as 'np'
        # Scipy module is imported as 'sp'
        # The Schematic API is imported as 'mdl'
        # To get the model file path, use 'mdl.get_model_file_path()'
        # To print information to the console, use info()
        SIMULATION_SPEED_UP = 100
        
        Ts = 1e-2
        rest_time_for_temperature_equilibrium = 360  # 7200s or 2h
        counter_cooldown_max = rest_time_for_temperature_equilibrium/Ts
        counter_cooldown_max = counter_cooldown_max/SIMULATION_SPEED_UP
        
        Vmax = 4.1497   # Volts
        Vmin = 2.8060   # Volts
        total_Q_original = [14.592, 14.532, 14.444]
        total_Q = [i/SIMULATION_SPEED_UP for i in total_Q_original]
        
        C = 14.532  # C rate of a battery is current that will empty the cell in one hour
        DISCHG_RATE =  5 # 0.5 if its normal battery discharg speed
        CHG_RATE = -DISCHG_RATE
        
        init_dynamic = 90  # 90% initial state of charge for dynamic scripts so that
        # when the dynamic script executes, current profiles don't push the cell voltage
        # over the intended Vmax
        V_end_script_1 = (Vmax-Vmin)*0.1+Vmin  # ends dynamic script 1 when SOC is roughly at 10%
        DYN_DIS_CHG = C/30
        DYN_CHG = -C
        
        import pickle
        filename = 'c:\\PROJECT\\battery_cell_testing\\scripts_and_data\\current_profiles.pickle'
        file = open(filename, 'rb')
        current_profiles_dict = pickle.load(file)
        
        OCV_25_SCRIPT_2_TIME_TITHER     = current_profiles_dict['OCV_25_SCRIPT_2_TIME_TITHER']
        OCV_25_SCRIPT_4_TIME_TITHER     = current_profiles_dict['OCV_25_SCRIPT_4_TIME_TITHER']
        OCV_25_SCRIPT_2_CURRENT_TITHER  = current_profiles_dict['OCV_25_SCRIPT_2_CURRENT_TITHER']
        OCV_25_SCRIPT_4_CURRENT_TITHER  = current_profiles_dict['OCV_25_SCRIPT_4_CURRENT_TITHER']
        OCV_25_SCRIPT_2_TIME_STOP       = current_profiles_dict['OCV_25_SCRIPT_2_TIME_STOP']
        OCV_25_SCRIPT_4_TIME_STOP       = current_profiles_dict['OCV_25_SCRIPT_4_TIME_STOP']
        
        DYN_25_SCRIPT_1_TIME            = current_profiles_dict['DYN_25_SCRIPT_1_TIME']
        DYN_25_SCRIPT_1_CURRENT         = current_profiles_dict['DYN_25_SCRIPT_1_CURRENT']
        DYN_SCRIPT_1_STOP_TIME          = current_profiles_dict['DYN_SCRIPT_1_STOP']
        # DYN_CHG_TITHER_STOP_TIME        = current_profiles_dict['DYN_CHG_TITHER_STOP_TIME']
        # DYN_DIS_CHG_TITHER_STOP_TIME    = current_profiles_dict['DYN_DIS_CHG_TITHER_STOP_TIME']
        # Tither profiles are assumed to be the same as for the static scripts, check later
        DYN_DIS_CHG_TITHER_STOP_TIME    = OCV_25_SCRIPT_2_TIME_STOP
        DYN_CHG_TITHER_STOP_TIME        = OCV_25_SCRIPT_4_TIME_STOP
        
        OCV_25_SCRIPT_2_TIME_STOP       = OCV_25_SCRIPT_2_TIME_STOP    /SIMULATION_SPEED_UP
        OCV_25_SCRIPT_4_TIME_STOP       = OCV_25_SCRIPT_4_TIME_STOP    /SIMULATION_SPEED_UP
        DYN_DIS_CHG_TITHER_STOP_TIME    = DYN_DIS_CHG_TITHER_STOP_TIME /SIMULATION_SPEED_UP
        DYN_CHG_TITHER_STOP_TIME        = DYN_CHG_TITHER_STOP_TIME     /SIMULATION_SPEED_UP
        DYN_SCRIPT_1_STOP_TIME          = DYN_SCRIPT_1_STOP_TIME       /SIMULATION_SPEED_UP
        info('ready')
    ENDCODE
}
